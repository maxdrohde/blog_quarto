---
title: Tidy evaluation and metaprogramming
description: Exploring metaprogramming in R with examples in data analysis
author: Max Rohde
date: 10/02/2022
# image: preview.png
code-fold: false
---

# Introduction to metaprogramming in R

Metaprogramming is a powerful tool in R that is used to an extent not found in many other programming languages. The Wikipedia definition of metaprogramming describes the concept as^[<https://en.wikipedia.org/wiki/Metaprogramming>]:

> Metaprogramming is a programming technique in which computer programs have the ability to treat other programs as their data. It means that a program can be designed to read, generate, analyze or transform other programs, and even modify itself while running.

Let's dive right in with showing how to do this in R. 

While this sounds rather esoteric, you likely encounter metaprogramming every time you use R. Let's examine the `library()` function -- possibly the most commonly used R function. You may have observed that the package name can be specified either as is, or enclosed in quotes to pass it in as a character vector.

```{r}
# Both of these work
library(ggplot2)
library("ggplot2")
```

We generally use the version without quotes because it works and it's faster to type. You may have noticed this ability to use unquoted names in tidyverse functions like `dplyr::select()` and base R functions like `subset()`.

How is this metaprogramming? When you pass in `"ggplot2"`, you are passing in an R object. Like other R objects, I save it to a variable and manipulate it.

```{r}
x <- "ggplot2"
stringr::str_to_upper(x)
```

What about when I pass in `ggplot2`? Is `ggplot2` an object? Let's try.

```{r}
#| eval: false
x <- ggplot2
```

```
Error: object 'ggplot2' not found
```

It seems not. R is trying to evaluate what `ggplot2` is, but it isn't in the namespace. By this logic, why doesn't `library()` raise an error when an undefined variable is passed to it? We will explore this idea in detail later in the post, but the short answer is that R captures the code you typed into the function and turned it into an object. As the Wikipedia definition of metaprogramming stated, `library()` treated your code like data, which it was then able to manipulate and use.

There's a surprising amount of detail behind something as simple as using unquoted string in function calls!

# Another metaprogramming example

Before we proceed with the rest of this blog post, let's load some libraries. We also load the Palmer Penguins dataset, which we'll use for illustration.

## Load example data

```{r}
library(tidyverse)
library(rlang)
library(lobstr)
library(palmerpenguins)
```

```{r}
# Load the palmer penguins data and drop all rows with missing data
df <- 
  penguins |>
  drop_na()
```

```{r}
#| echo: false
print(df)
```

## Metaprogramming when subsetting data

Subsetting data is a common task in R, and many functions used for subsetting incorporate metaprogramming. First however, let's look at an example without metaprogramming.

### Example 1

```{r}
#| output: false
df_filt_base1 <- df[df[["bill_length_mm"]] > 20, ]
```

Just like in the `library()` example, we can put a character vector like `"bill_length_mm"` into the square brackets in order to specify the data column we are talking about.

Notice how the `"bill_length_mm"` is used along with the data frame object `df` to determine the object representing the data column. This may be more clear if we write the `[[` function in prefix form so we can clearly see its arguments^[All function in R can be written in prefix form. See here for more details: <https://adv-r.hadley.nz/functions.html#function-forms>]. Instead of `df[["bill_length_mm"]]` we use the corresponding prefix form `` `[[`(df, "bill_length_mm") ``.

```{r}
#| output: false
df_filt_bracket <- df[`[[`(df, "bill_length_mm") > 20, ]
```

Now we see that the `[[` function takes as arguments two objects, the data frame and a character vector specifying a column. The important point to note is that `"bill_length_mm"` exists independently of the data frame. It's just a character vector that can be evaluated whenever we want:

```{r}
"bill_length_mm"
```

The same is not true for `bill_length_mm`. Running the same code without the quotation marks doesn't work:

```{r}
#| eval: false
df_filt_bracket <- df[`[[`(df, bill_length_mm) > 20, ]
```

```
Error in tbl_subset2(x, j = i, j_arg = substitute(i)) : 
object 'bill_length_mm' not found
```

### Example 2

Now we will look at approaches that do allow you to pass in unquoted arguments. The most basic uses the `$` function:

```{r}
#| output: false
df_filt_dollar <- df[df$bill_length_mm > 20, ]

# Equivalent command in prefix form for the `$` operator
df_filt_dollar_prefix <- df[`$`(df, bill_length_mm) > 20, ]
```

### Example 3

Another example from base R is the `subset()` function:

```{r}
#| output: false
df_filt_subset <- subset(df, bill_length_mm > 20)
```

### Example 4

The `filter()` function from `dplyr` and many tidyverse functions like `select()` and `mutate()` also allow the use of unquoted arguments:

```{r}
#| output: false
df_filt_filter <- filter(df, bill_length_mm > 20)
```

### Example 5

Finally, there is the `with()` function that allows data columns to be unquoted.

```{r}
#| output: false
df_filt_with <- with(df, df[bill_length_mm > 20, ])
```

### So what?

We can see below that all these methods give identical results.

```{r}
#| echo: false

DescTools::AllIdentical(df_filt_bracket,
                        df_filt_dollar,
                        df_filt_subset,
                        df_filt_filter,
                        df_filt_with) |>
  stopifnot()
```

So, is the conclusion that function that don't require quoting should always be used, since it's easier to type their arguments? Not so fast. The cost of convenience has a downside. While these functions may be easier to use interactively, they use of metaprogramming makes programming with them more difficult.

:::{.callout-note}
## Note

While we have mainly discussed metaprogramming in the context of using unquoted names, this is not the entirety of it. We will see more applications soon.
:::

## Difficulties with functions that use metaprogramming






# What you can do with metaprogramming

Most people run into the issues described above when they try to program with a function like `subset()` or `filter`.




Show how we can create the `with` function in R with two lines of code.

When you capture an expression you can **inspect** and **modify** the code.

```{r}
my_expression <- expr(if(TRUE) 1 else 2)
```

```{r}
eval(my_expression)
```

```{r}
my_expression[[1]]
```

```{r}
for (i in 1:length(my_expression)) {
  print(my_expression[[i]])
}
```

```{r}
my_expression[[2]] <- FALSE
my_expression[[4]] <- 999

print(my_expression)
```

```{r}
eval(my_expression)
```

Looking at abtract syntax trees with multiple levels:

```{r}
ast(1+2*3)
```

The tree has three main branches:

```{r}
my_expr <- expr(1+2*3)

my_expr[[1]]
my_expr[[2]]
my_expr[[3]]
```

The third branch has three branches extending from it:

```{r}
my_expr[[3]][[1]]
my_expr[[3]][[2]]
my_expr[[3]][[3]]
```

# Additional Resources

| Description                                                                                | Link                                                                 |
|-----------------------------|-------------------------------------------|
| How to use `dplyr` in functions                                                            | https://dplyr.tidyverse.org/articles/programming.html                |
| Understanding data masking                                                                 | https://rlang.r-lib.org/reference/topic-data-mask.html               |
| Programming with data masking                                                              | https://rlang.r-lib.org/reference/topic-data-mask-programming.html   |
| Programming with `ggplot2` functions                                                       | https://ggplot2.tidyverse.org/articles/ggplot2-in-packages.html      |
| R metaprogramming video tutorials                                                          | https://youtube.com/playlist?list=PLZ_9sY7D2wDCy6MbYx8E21nz2XYbx00qQ |
| Introduction to metaprogramming in R with comparisons to Python                            | https://youtu.be/BXv0iVOiCrw                                         |
| Authoritative resource on metaprogramming and other R programming topics by Hadley Wickham | https://adv-r.hadley.nz/                                             |
| Metaprogramming overview from the Advanced R book club                                     | https://youtu.be/FSm2_TJmhm0                                         |
| Interesting discussion of metaprogramming from the viewpoint of LISP                       | https://youtu.be/dw-y3vNDRWk                                         |
| Tidy evaluation in 5 minutes from Hadley Wickham                                           | https://youtu.be/nERXS3ssntw                                         |
| Metaprogramming using `dplyr::select` as an example                                        | https://youtu.be/WoBbQ5gsbgU                                         |
| Overview of the tidy eval framework                                                        | https://youtu.be/SW_TUkPXSmA                                         |
| Basics and motivation behind the tidy eval framework                                       | https://youtu.be/2BXPLnLMTYo                                         |
| Introducing to metaprogramming in R with a real-world data analysis application            | https://youtu.be/52R8fNbccx4                                         |
|                                                                                            |                                                                      |
