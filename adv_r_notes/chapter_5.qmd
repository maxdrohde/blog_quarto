# Control Flow

```{r}
library(tidyverse)

# Set global ggplot theme
theme_set(cowplot::theme_cowplot(font_size=12,
                                 font_family = "Source Sans Pro"))
```


## `if` statements

`if` statement example:

```{r}
#| eval: false

grade <- function(x) {
  if (x > 90) {
    "A"
  } else if (x > 80) {
    "B"
  } else if (x > 50) {
    "C"
  } else {
    "F"
  }
}
```

You can assign the result of an `if` statement:

```{r}
x1 <- if (TRUE) 1 else 2
x2 <- if (FALSE) 1 else 2

c(x1, x2)
```

## `switch()` statement

:::{.callout-warning}
Only use `switch()` with character inputs!
:::

You can replace this:

```{r}
x_option <- function(x) {
  if (x == "a") {
    "option 1"
  } else if (x == "b") {
    "option 2" 
  } else if (x == "c") {
    "option 3"
  } else {
    stop("Invalid `x` value")
  }
}
```

with this more concise version using `switch()`

```{r}
x_option <- function(x) {
  switch(x,
    a = "option 1",
    b = "option 2",
    c = "option 3",
    stop("Invalid `x` value")
  )
}
```

If multiple outputs share a value, you can use this special syntax:

```{r}
legs <- function(x) {
  switch(x,
    cow = ,
    horse = ,
    dog = 4,
    human = ,
    chicken = 2,
    plant = 0,
    stop("Unknown input")
  )
}

legs("cow")
```

## `for` loops

> `for` assigns the item to the current environment, overwriting any existing variable with the same name!

 
```{r}
i <- 100
for (i in 1:3) {}

print(i)
```

> There are two ways to terminate a for loop early:
> 
> - `next` exits the current iteration.
> - `break` exits the entire `for` loop.

### Pre-allocation

Remember to pre-allocate space if assigning in a `for` loop. Here's a demonstration of the speed difference.

```{r}
# Without pre-allocation
f1 <- function(n=1e4) {
  vec <- numeric(0)
  for(i in 1:n) vec <- c(vec, i)
}
```

```{r}
# With pre-allocation
f2 <- function(n=1e4) {
  
  # Pre-allocate the memory
  vec <- numeric(n)
  
  for(i in 1:n) vec[i] <- i
}
```

```{r}
#| cache: true
#| column: body-outset-right

bench::mark(`Without pre-allocation` = f1(),
            `With pre-allocation` = f2(),
            iterations = 1e4) %>%
  mutate(expression = as.character(expression)) %>%
  unnest_longer(time) %>%
  mutate(time = as.numeric(time) * 1000) %>%
  ggplot() +
  aes(x=time) +
  geom_histogram(bins=100, color="black", fill="lightgray") +
  scale_x_log10() +
  facet_wrap(~expression, nrow = 2) +
  labs(x = "Time (ms)",
       y = "Trials")
```

```{r}

```


