{
  "hash": "c82e54b4b47895f999650ec55ef7b79b",
  "result": {
    "markdown": "# Control Flow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# Set global ggplot theme\ntheme_set(cowplot::theme_cowplot(font_size=12,\n                                 font_family = \"Source Sans Pro\"))\n```\n:::\n\n\n\n## `if` statements\n\n`if` statement example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade <- function(x) {\n  if (x > 90) {\n    \"A\"\n  } else if (x > 80) {\n    \"B\"\n  } else if (x > 50) {\n    \"C\"\n  } else {\n    \"F\"\n  }\n}\n```\n:::\n\n\nYou can assign the result of an `if` statement:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx1 <- if (TRUE) 1 else 2\nx2 <- if (FALSE) 1 else 2\n\nc(x1, x2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2\n```\n:::\n:::\n\n\n## `switch()` statement\n\n:::{.callout-warning}\nOnly use `switch()` with character inputs!\n:::\n\nYou can replace this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_option <- function(x) {\n  if (x == \"a\") {\n    \"option 1\"\n  } else if (x == \"b\") {\n    \"option 2\" \n  } else if (x == \"c\") {\n    \"option 3\"\n  } else {\n    stop(\"Invalid `x` value\")\n  }\n}\n```\n:::\n\n\nwith this more concise version using `switch()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_option <- function(x) {\n  switch(x,\n    a = \"option 1\",\n    b = \"option 2\",\n    c = \"option 3\",\n    stop(\"Invalid `x` value\")\n  )\n}\n```\n:::\n\n\nIf multiple outputs share a value, you can use this special syntax:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlegs <- function(x) {\n  switch(x,\n    cow = ,\n    horse = ,\n    dog = 4,\n    human = ,\n    chicken = 2,\n    plant = 0,\n    stop(\"Unknown input\")\n  )\n}\n\nlegs(\"cow\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n## `for` loops\n\n> `for` assigns the item to the current environment, overwriting any existing variable with the same name!\n\n \n\n::: {.cell}\n\n```{.r .cell-code}\ni <- 100\nfor (i in 1:3) {}\n\nprint(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n> There are two ways to terminate a for loop early:\n> \n> - `next` exits the current iteration.\n> - `break` exits the entire `for` loop.\n\n### Pre-allocation\n\nRemember to pre-allocate space if assigning in a `for` loop. Here's a demonstration of the speed difference.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Without pre-allocation\nf1 <- function(n=1e4) {\n  vec <- numeric(0)\n  for(i in 1:n) vec <- c(vec, i)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# With pre-allocation\nf2 <- function(n=1e4) {\n  \n  # Pre-allocate the memory\n  vec <- numeric(n)\n  \n  for(i in 1:n) vec[i] <- i\n}\n```\n:::\n\n::: {.cell .column-body-outset-right}\n\n```{.r .cell-code}\nbench::mark(`Without pre-allocation` = f1(),\n            `With pre-allocation` = f2(),\n            iterations = 1e4) %>%\n  mutate(expression = as.character(expression)) %>%\n  unnest_longer(time) %>%\n  mutate(time = as.numeric(time) * 1000) %>%\n  ggplot() +\n  aes(x=time) +\n  geom_histogram(bins=100, color=\"black\", fill=\"lightgray\") +\n  scale_x_log10() +\n  facet_wrap(~expression, nrow = 2) +\n  labs(x = \"Time (ms)\",\n       y = \"Trials\")\n```\n\n::: {.cell-output-display}\n![](chapter_5_files/figure-html/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "chapter_5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}