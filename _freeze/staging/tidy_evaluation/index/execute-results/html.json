{
  "hash": "e84b9a557af3b6201c1b4724946a3220",
  "result": {
    "markdown": "---\ntitle: Tidy evaluation and metaprogramming\ndescription: Exploring metaprogramming in R with examples in data analysis\nauthor: Max Rohde\ndate: 10/02/2022\n# image: preview.png\ncode-fold: false\n---\n\n\n# Introduction to metaprogramming in R\n\nMetaprogramming is a powerful tool in R that is used to an extent not found in many other programming languages. The Wikipedia definition of metaprogramming describes the concept as^[<https://en.wikipedia.org/wiki/Metaprogramming>]:\n\n> Metaprogramming is a programming technique in which computer programs have the ability to treat other programs as their data. It means that a program can be designed to read, generate, analyze or transform other programs, and even modify itself while running.\n\nLet's dive right in with showing how to do this in R. \n\nWhile this sounds rather esoteric, you likely encounter metaprogramming every time you use R. Let's examine the `library()` function -- possibly the most commonly used R function. You may have observed that the package name can be specified either as is, or enclosed in quotes to pass it in as a character vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Both of these work\nlibrary(ggplot2)\nlibrary(\"ggplot2\")\n```\n:::\n\n\nWe generally use the version without quotes because it works and it's faster to type. You may have noticed this ability to use unquoted names in tidyverse functions like `dplyr::select()` and base R functions like `subset()`.\n\nHow is this metaprogramming? When you pass in `\"ggplot2\"`, you are passing in an R object. Like other R objects, I save it to a variable and manipulate it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- \"ggplot2\"\nstringr::str_to_upper(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"GGPLOT2\"\n```\n:::\n:::\n\n\nWhat about when I pass in `ggplot2`? Is `ggplot2` an object? Let's try.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- ggplot2\n```\n:::\n\n\n```\nError: object 'ggplot2' not found\n```\n\nIt seems not. R is trying to evaluate what `ggplot2` is, but it isn't in the namespace. By this logic, why doesn't `library()` raise an error when an undefined variable is passed to it? We will explore this idea in detail later in the post, but the short answer is that R captures the code you typed into the function and turned it into an object. As the Wikipedia definition of metaprogramming stated, `library()` treated your code like data, which it was then able to manipulate and use.\n\nThere's a surprising amount of detail behind something as simple as using unquoted string in function calls!\n\n# Another metaprogramming example\n\nBefore we proceed with the rest of this blog post, let's load some libraries. We also load the Palmer Penguins dataset, which we'll use for illustration.\n\n## Load example data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(rlang)\nlibrary(lobstr)\nlibrary(palmerpenguins)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the palmer penguins data and drop all rows with missing data\ndf <- \n  penguins |>\n  drop_na()\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 333 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 5 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 6 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 7 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 8 Adelie  Torgersen           41.1          17.6        182    3200 fema…  2007\n 9 Adelie  Torgersen           38.6          21.2        191    3800 male   2007\n10 Adelie  Torgersen           34.6          21.1        198    4400 male   2007\n# … with 323 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n```\n:::\n:::\n\n\n## Metaprogramming when subsetting data\n\nSubsetting data is a common task in R, and many functions used for subsetting incorporate metaprogramming. First however, let's look at an example without metaprogramming.\n\n### Example 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_filt_base1 <- df[df[[\"bill_length_mm\"]] > 20, ]\n```\n:::\n\n\nJust like in the `library()` example, we can put a character vector like `\"bill_length_mm\"` into the square brackets in order to specify the data column we are talking about.\n\nNotice how the `\"bill_length_mm\"` is used along with the data frame object `df` to determine the object representing the data column. This may be more clear if we write the `[[` function in prefix form so we can clearly see its arguments^[All function in R can be written in prefix form. See here for more details: <https://adv-r.hadley.nz/functions.html#function-forms>]. Instead of `df[[\"bill_length_mm\"]]` we use the corresponding prefix form `` `[[`(df, \"bill_length_mm\") ``.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_filt_bracket <- df[`[[`(df, \"bill_length_mm\") > 20, ]\n```\n:::\n\n\nNow we see that the `[[` function takes as arguments two objects, the data frame and a character vector specifying a column. The important point to note is that `\"bill_length_mm\"` exists independently of the data frame. It's just a character vector that can be evaluated whenever we want:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"bill_length_mm\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"bill_length_mm\"\n```\n:::\n:::\n\n\nThe same is not true for `bill_length_mm`. Running the same code without the quotation marks doesn't work:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_filt_bracket <- df[`[[`(df, bill_length_mm) > 20, ]\n```\n:::\n\n\n```\nError in tbl_subset2(x, j = i, j_arg = substitute(i)) : \nobject 'bill_length_mm' not found\n```\n\n### Example 2\n\nNow we will look at approaches that do allow you to pass in unquoted arguments. The most basic uses the `$` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_filt_dollar <- df[df$bill_length_mm > 20, ]\n\n# Equivalent command in prefix form for the `$` operator\ndf_filt_dollar_prefix <- df[`$`(df, bill_length_mm) > 20, ]\n```\n:::\n\n\n### Example 3\n\nAnother example from base R is the `subset()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_filt_subset <- subset(df, bill_length_mm > 20)\n```\n:::\n\n\n### Example 4\n\nThe `filter()` function from `dplyr` and many tidyverse functions like `select()` and `mutate()` also allow the use of unquoted arguments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_filt_filter <- filter(df, bill_length_mm > 20)\n```\n:::\n\n\n### Example 5\n\nFinally, there is the `with()` function that allows data columns to be unquoted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_filt_with <- with(df, df[bill_length_mm > 20, ])\n```\n:::\n\n\n### So what?\n\nWe can see below that all these methods give identical results.\n\n\n::: {.cell}\n\n:::\n\n\nSo, is the conclusion that function that don't require quoting should always be used, since it's easier to type their arguments? Not so fast. The cost of convenience has a downside. While these functions may be easier to use interactively, they use of metaprogramming makes programming with them more difficult.\n\n:::{.callout-note}\n## Note\n\nWhile we have mainly discussed metaprogramming in the context of using unquoted names, this is not the entirety of it. We will see more applications soon.\n:::\n\n## Difficulties with functions that use metaprogramming\n\n\n\n\n\n\n# What you can do with metaprogramming\n\nMost people run into the issues described above when they try to program with a function like `subset()` or `filter`.\n\n\n\n\nShow how we can create the `with` function in R with two lines of code.\n\nWhen you capture an expression you can **inspect** and **modify** the code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_expression <- expr(if(TRUE) 1 else 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\neval(my_expression)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_expression[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n`if`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:length(my_expression)) {\n  print(my_expression[[i]])\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n`if`\n[1] TRUE\n[1] 1\n[1] 2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_expression[[2]] <- FALSE\nmy_expression[[4]] <- 999\n\nprint(my_expression)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nif (FALSE) 1 else 999\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\neval(my_expression)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 999\n```\n:::\n:::\n\n\nLooking at abtract syntax trees with multiple levels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nast(1+2*3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n█─`+` \n├─1 \n└─█─`*` \n  ├─2 \n  └─3 \n```\n:::\n:::\n\n\nThe tree has three main branches:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_expr <- expr(1+2*3)\n\nmy_expr[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n`+`\n```\n:::\n\n```{.r .cell-code}\nmy_expr[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nmy_expr[[3]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2 * 3\n```\n:::\n:::\n\n\nThe third branch has three branches extending from it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_expr[[3]][[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n`*`\n```\n:::\n\n```{.r .cell-code}\nmy_expr[[3]][[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nmy_expr[[3]][[3]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n# Additional Resources\n\n| Description                                                                                | Link                                                                 |\n|-----------------------------|-------------------------------------------|\n| How to use `dplyr` in functions                                                            | https://dplyr.tidyverse.org/articles/programming.html                |\n| Understanding data masking                                                                 | https://rlang.r-lib.org/reference/topic-data-mask.html               |\n| Programming with data masking                                                              | https://rlang.r-lib.org/reference/topic-data-mask-programming.html   |\n| Programming with `ggplot2` functions                                                       | https://ggplot2.tidyverse.org/articles/ggplot2-in-packages.html      |\n| R metaprogramming video tutorials                                                          | https://youtube.com/playlist?list=PLZ_9sY7D2wDCy6MbYx8E21nz2XYbx00qQ |\n| Introduction to metaprogramming in R with comparisons to Python                            | https://youtu.be/BXv0iVOiCrw                                         |\n| Authoritative resource on metaprogramming and other R programming topics by Hadley Wickham | https://adv-r.hadley.nz/                                             |\n| Metaprogramming overview from the Advanced R book club                                     | https://youtu.be/FSm2_TJmhm0                                         |\n| Interesting discussion of metaprogramming from the viewpoint of LISP                       | https://youtu.be/dw-y3vNDRWk                                         |\n| Tidy evaluation in 5 minutes from Hadley Wickham                                           | https://youtu.be/nERXS3ssntw                                         |\n| Metaprogramming using `dplyr::select` as an example                                        | https://youtu.be/WoBbQ5gsbgU                                         |\n| Overview of the tidy eval framework                                                        | https://youtu.be/SW_TUkPXSmA                                         |\n| Basics and motivation behind the tidy eval framework                                       | https://youtu.be/2BXPLnLMTYo                                         |\n| Introducing to metaprogramming in R with a real-world data analysis application            | https://youtu.be/52R8fNbccx4                                         |\n|                                                                                            |                                                                      |\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}