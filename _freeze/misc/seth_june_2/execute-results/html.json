{
  "hash": "5bec42769c15d41ef37feed4ed3a63fd",
  "result": {
    "markdown": "---\ntitle: \"Seth June 2nd\"\nauthor: \"Max Rohde\"\ndate: \"2022-06-08\"\ntoc: true\ntoc-depth: 4\ntoc-location: left\ncache: false\nformat:\n  html:\n    code-tools: true\n    code-fold: show\n    code-link: true\n    code-block-bg: \"#f1f3f5\"\n    code-block-border-left: \"#31BAE9\"\n    mainfont: Source Sans Pro\n    theme: journal\n    fontsize: 16px\n    fig-format: retina\n    fig-cap-location: margin\n    tbl-cap-location: top\n    reference-location: margin\n    citation-location: margin\n    fig-width: 8\n    fig-height: 6\n  \nexecute:\n  warning: false\n  message: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# Set default ggplot theme\n# Set global ggplot theme\ntheme_set(cowplot::theme_cowplot(font_size=12))\n```\n:::\n\n\n## Question\n\n> The data: `df <- tibble(pay = c(0,0,0,2,1,3,3,3,4,5,6))` I want to make a histogram with the following features. Each bar has a $2 width , starting at 0. So the tick marks are 0-2, 2-4 , 4-6 , left-bound exclusive , right bound inclusive. I also want a bar that counts the number of “0” observations. Remember that the bounds above in 1. are left-bound exclusive.\n\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(pay = c(0,0,0,2,1,3,3,3,4,5,6))\n```\n:::\n\n\nFirst we define a vector of cutpoints that define the bins for our plot. We include a small negative number, `-0.1`, as a hack in order to capture zero by itself as an interval. This won't be a problem with this data, because all the values are positive, but you may need to adjust if you have negative values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define cutpoints\ncuts <- c(-0.1, seq(0, max(df$pay), by=2))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# View the cutpoints\ncuts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.1  0.0  2.0  4.0  6.0\n```\n:::\n:::\n\n\nThe `cut` function by default is open on the left and closed on the right.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Categorize the data by the cutpoints\ndf$pay_categorized <- cut(df$pay, breaks = cuts) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# View the categorized data\ndf$pay_categorized\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] (-0.1,0] (-0.1,0] (-0.1,0] (0,2]    (0,2]    (2,4]    (2,4]    (2,4]   \n [9] (2,4]    (4,6]    (4,6]   \nLevels: (-0.1,0] (0,2] (2,4] (4,6]\n```\n:::\n:::\n\n\nWe would like to rename the `(-0.1,0]` category to just be `0`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rename the zero category\ndf$pay_categorized <-\n  df$pay_categorized %>%\n  fct_recode(`0` = \"(-0.1,0]\")\n```\n:::\n\n\nNow we can use `ggplot` with `geom_bar()`. Note that `geom_bar()` automatically maps the y values to counts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  ggplot() +\n  aes(x=pay_categorized) +\n  geom_bar() +\n  labs(x = \"Payment\",\n       y = \"Count\",\n       title = \"Distribution of payment\",\n       subtitles = \"Zero values are included as a seperate column\",\n       caption = \"xoxo, Max\")\n```\n\n::: {.cell-output-display}\n![](seth_june_2_files/figure-html/unnamed-chunk-8-1.png){width=768}\n:::\n:::\n",
    "supporting": [
      "seth_june_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}