---
title: "Seth June 2nd"
author: "Max Rohde"
date: "`r Sys.Date()`"
toc: true
toc-depth: 4
toc-location: left
cache: false
format:
  html:
    code-tools: true
    code-fold: show
    code-link: true
    self-contained: true
    code-block-bg: "#f1f3f5"
    code-block-border-left: "#31BAE9"
    mainfont: Source Sans Pro
    theme: journal
    fontsize: 16px
    fig-format: retina
    fig-cap-location: margin
    tbl-cap-location: top
    reference-location: margin
    citation-location: margin
    fig-width: 8
    fig-height: 6
  
execute:
  warning: false
  message: false
---

```{r}
library(tidyverse)

# Set default ggplot theme
# Set global ggplot theme
theme_set(cowplot::theme_cowplot(font_size=12))
```

## Question

> The data: `df <- tibble(pay = c(0,0,0,2,1,3,3,3,4,5,6))` I want to make a histogram with the following features. Each bar has a $2 width , starting at 0. So the tick marks are 0-2, 2-4 , 4-6 , left-bound exclusive , right bound inclusive. I also want a bar that counts the number of “0” observations. Remember that the bounds above in 1. are left-bound exclusive.

## Solution

```{r}
df <- tibble(pay = c(0,0,0,2,1,3,3,3,4,5,6))
```

First we define a vector of cutpoints that define the bins for our plot. We include a small negative number, `-0.1`, as a hack in order to capture zero by itself as an interval. This won't be a problem with this data, because all the values are positive, but you may need to adjust if you have negative values.

```{r}
# Define cutpoints
cuts <- c(-0.1, seq(0, max(df$pay), by=2))
```

```{r}
# View the cutpoints
cuts
```

The `cut` function by default is open on the left and closed on the right.

```{r}
# Categorize the data by the cutpoints
df$pay_categorized <- cut(df$pay, breaks = cuts) 
```

```{r}
# View the categorized data
df$pay_categorized
```

We would like to rename the `(-0.1,0]` category to just be `0`.

```{r}
# Rename the zero category
df$pay_categorized <-
  df$pay_categorized %>%
  fct_recode(`0` = "(-0.1,0]")
```

Now we can use `ggplot` with `geom_bar()`. Note that `geom_bar()` automatically maps the y values to counts.

```{r}
df %>%
  ggplot() +
  aes(x=pay_categorized) +
  geom_bar() +
  labs(x = "Payment",
       y = "Count",
       title = "Distribution of payment",
       subtitles = "Zero values are included as a seperate column",
       caption = "xoxo, Max")
```


