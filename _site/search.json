[
  {
    "objectID": "posts/logistic-regresstion-by-hand/index.html",
    "href": "posts/logistic-regresstion-by-hand/index.html",
    "title": "Logistic regression (by hand)",
    "section": "",
    "text": "Code# Load packages\nlibrary(tidyverse)\nlibrary(gganimate)\n\nlibrary(Hmisc)\n\nlibrary(palmerpenguins)\n\nlibrary(patchwork)\nlibrary(kableExtra)\nlibrary(glue)\n\n# Set global ggplot theme\ntheme_set(cowplot::theme_cowplot(font_size=14,\n                                 font_family = \"Source Sans Pro\"))"
  },
  {
    "objectID": "posts/logistic-regresstion-by-hand/index.html#exploratory-data-analysis",
    "href": "posts/logistic-regresstion-by-hand/index.html#exploratory-data-analysis",
    "title": "Logistic regression (by hand)",
    "section": "Exploratory data analysis",
    "text": "Exploratory data analysis\nYou can explore the raw data below.\n\n\n\n\n\n species \n    adelie \n    bill_length_mm \n    bill_depth_mm \n    flipper_length_mm \n    body_mass_g \n  \n\n\n Adelie \n    1 \n    39.1 \n    18.7 \n    181 \n    3750 \n  \n\n Adelie \n    1 \n    39.5 \n    17.4 \n    186 \n    3800 \n  \n\n Adelie \n    1 \n    40.3 \n    18.0 \n    195 \n    3250 \n  \n\n Adelie \n    1 \n    36.7 \n    19.3 \n    193 \n    3450 \n  \n\n Adelie \n    1 \n    39.3 \n    20.6 \n    190 \n    3650 \n  \n\n Adelie \n    1 \n    38.9 \n    17.8 \n    181 \n    3625 \n  \n\n Adelie \n    1 \n    39.2 \n    19.6 \n    195 \n    4675 \n  \n\n Adelie \n    1 \n    34.1 \n    18.1 \n    193 \n    3475 \n  \n\n Adelie \n    1 \n    42.0 \n    20.2 \n    190 \n    4250 \n  \n\n Adelie \n    1 \n    37.8 \n    17.1 \n    186 \n    3300 \n  \n\n Adelie \n    1 \n    37.8 \n    17.3 \n    180 \n    3700 \n  \n\n Adelie \n    1 \n    41.1 \n    17.6 \n    182 \n    3200 \n  \n\n Adelie \n    1 \n    38.6 \n    21.2 \n    191 \n    3800 \n  \n\n Adelie \n    1 \n    34.6 \n    21.1 \n    198 \n    4400 \n  \n\n Adelie \n    1 \n    36.6 \n    17.8 \n    185 \n    3700 \n  \n\n Adelie \n    1 \n    38.7 \n    19.0 \n    195 \n    3450 \n  \n\n Adelie \n    1 \n    42.5 \n    20.7 \n    197 \n    4500 \n  \n\n Adelie \n    1 \n    34.4 \n    18.4 \n    184 \n    3325 \n  \n\n Adelie \n    1 \n    46.0 \n    21.5 \n    194 \n    4200 \n  \n\n Adelie \n    1 \n    37.8 \n    18.3 \n    174 \n    3400 \n  \n\n Adelie \n    1 \n    37.7 \n    18.7 \n    180 \n    3600 \n  \n\n Adelie \n    1 \n    35.9 \n    19.2 \n    189 \n    3800 \n  \n\n Adelie \n    1 \n    38.2 \n    18.1 \n    185 \n    3950 \n  \n\n Adelie \n    1 \n    38.8 \n    17.2 \n    180 \n    3800 \n  \n\n Adelie \n    1 \n    35.3 \n    18.9 \n    187 \n    3800 \n  \n\n Adelie \n    1 \n    40.6 \n    18.6 \n    183 \n    3550 \n  \n\n Adelie \n    1 \n    40.5 \n    17.9 \n    187 \n    3200 \n  \n\n Adelie \n    1 \n    37.9 \n    18.6 \n    172 \n    3150 \n  \n\n Adelie \n    1 \n    40.5 \n    18.9 \n    180 \n    3950 \n  \n\n Adelie \n    1 \n    39.5 \n    16.7 \n    178 \n    3250 \n  \n\n Adelie \n    1 \n    37.2 \n    18.1 \n    178 \n    3900 \n  \n\n Adelie \n    1 \n    39.5 \n    17.8 \n    188 \n    3300 \n  \n\n Adelie \n    1 \n    40.9 \n    18.9 \n    184 \n    3900 \n  \n\n Adelie \n    1 \n    36.4 \n    17.0 \n    195 \n    3325 \n  \n\n Adelie \n    1 \n    39.2 \n    21.1 \n    196 \n    4150 \n  \n\n Adelie \n    1 \n    38.8 \n    20.0 \n    190 \n    3950 \n  \n\n Adelie \n    1 \n    42.2 \n    18.5 \n    180 \n    3550 \n  \n\n Adelie \n    1 \n    37.6 \n    19.3 \n    181 \n    3300 \n  \n\n Adelie \n    1 \n    39.8 \n    19.1 \n    184 \n    4650 \n  \n\n Adelie \n    1 \n    36.5 \n    18.0 \n    182 \n    3150 \n  \n\n Adelie \n    1 \n    40.8 \n    18.4 \n    195 \n    3900 \n  \n\n Adelie \n    1 \n    36.0 \n    18.5 \n    186 \n    3100 \n  \n\n Adelie \n    1 \n    44.1 \n    19.7 \n    196 \n    4400 \n  \n\n Adelie \n    1 \n    37.0 \n    16.9 \n    185 \n    3000 \n  \n\n Adelie \n    1 \n    39.6 \n    18.8 \n    190 \n    4600 \n  \n\n Adelie \n    1 \n    41.1 \n    19.0 \n    182 \n    3425 \n  \n\n Adelie \n    1 \n    37.5 \n    18.9 \n    179 \n    2975 \n  \n\n Adelie \n    1 \n    36.0 \n    17.9 \n    190 \n    3450 \n  \n\n Adelie \n    1 \n    42.3 \n    21.2 \n    191 \n    4150 \n  \n\n Adelie \n    1 \n    39.6 \n    17.7 \n    186 \n    3500 \n  \n\n Adelie \n    1 \n    40.1 \n    18.9 \n    188 \n    4300 \n  \n\n Adelie \n    1 \n    35.0 \n    17.9 \n    190 \n    3450 \n  \n\n Adelie \n    1 \n    42.0 \n    19.5 \n    200 \n    4050 \n  \n\n Adelie \n    1 \n    34.5 \n    18.1 \n    187 \n    2900 \n  \n\n Adelie \n    1 \n    41.4 \n    18.6 \n    191 \n    3700 \n  \n\n Adelie \n    1 \n    39.0 \n    17.5 \n    186 \n    3550 \n  \n\n Adelie \n    1 \n    40.6 \n    18.8 \n    193 \n    3800 \n  \n\n Adelie \n    1 \n    36.5 \n    16.6 \n    181 \n    2850 \n  \n\n Adelie \n    1 \n    37.6 \n    19.1 \n    194 \n    3750 \n  \n\n Adelie \n    1 \n    35.7 \n    16.9 \n    185 \n    3150 \n  \n\n Adelie \n    1 \n    41.3 \n    21.1 \n    195 \n    4400 \n  \n\n Adelie \n    1 \n    37.6 \n    17.0 \n    185 \n    3600 \n  \n\n Adelie \n    1 \n    41.1 \n    18.2 \n    192 \n    4050 \n  \n\n Adelie \n    1 \n    36.4 \n    17.1 \n    184 \n    2850 \n  \n\n Adelie \n    1 \n    41.6 \n    18.0 \n    192 \n    3950 \n  \n\n Adelie \n    1 \n    35.5 \n    16.2 \n    195 \n    3350 \n  \n\n Adelie \n    1 \n    41.1 \n    19.1 \n    188 \n    4100 \n  \n\n Adelie \n    1 \n    35.9 \n    16.6 \n    190 \n    3050 \n  \n\n Adelie \n    1 \n    41.8 \n    19.4 \n    198 \n    4450 \n  \n\n Adelie \n    1 \n    33.5 \n    19.0 \n    190 \n    3600 \n  \n\n Adelie \n    1 \n    39.7 \n    18.4 \n    190 \n    3900 \n  \n\n Adelie \n    1 \n    39.6 \n    17.2 \n    196 \n    3550 \n  \n\n Adelie \n    1 \n    45.8 \n    18.9 \n    197 \n    4150 \n  \n\n Adelie \n    1 \n    35.5 \n    17.5 \n    190 \n    3700 \n  \n\n Adelie \n    1 \n    42.8 \n    18.5 \n    195 \n    4250 \n  \n\n Adelie \n    1 \n    40.9 \n    16.8 \n    191 \n    3700 \n  \n\n Adelie \n    1 \n    37.2 \n    19.4 \n    184 \n    3900 \n  \n\n Adelie \n    1 \n    36.2 \n    16.1 \n    187 \n    3550 \n  \n\n Adelie \n    1 \n    42.1 \n    19.1 \n    195 \n    4000 \n  \n\n Adelie \n    1 \n    34.6 \n    17.2 \n    189 \n    3200 \n  \n\n Adelie \n    1 \n    42.9 \n    17.6 \n    196 \n    4700 \n  \n\n Adelie \n    1 \n    36.7 \n    18.8 \n    187 \n    3800 \n  \n\n Adelie \n    1 \n    35.1 \n    19.4 \n    193 \n    4200 \n  \n\n Adelie \n    1 \n    37.3 \n    17.8 \n    191 \n    3350 \n  \n\n Adelie \n    1 \n    41.3 \n    20.3 \n    194 \n    3550 \n  \n\n Adelie \n    1 \n    36.3 \n    19.5 \n    190 \n    3800 \n  \n\n Adelie \n    1 \n    36.9 \n    18.6 \n    189 \n    3500 \n  \n\n Adelie \n    1 \n    38.3 \n    19.2 \n    189 \n    3950 \n  \n\n Adelie \n    1 \n    38.9 \n    18.8 \n    190 \n    3600 \n  \n\n Adelie \n    1 \n    35.7 \n    18.0 \n    202 \n    3550 \n  \n\n Adelie \n    1 \n    41.1 \n    18.1 \n    205 \n    4300 \n  \n\n Adelie \n    1 \n    34.0 \n    17.1 \n    185 \n    3400 \n  \n\n Adelie \n    1 \n    39.6 \n    18.1 \n    186 \n    4450 \n  \n\n Adelie \n    1 \n    36.2 \n    17.3 \n    187 \n    3300 \n  \n\n Adelie \n    1 \n    40.8 \n    18.9 \n    208 \n    4300 \n  \n\n Adelie \n    1 \n    38.1 \n    18.6 \n    190 \n    3700 \n  \n\n Adelie \n    1 \n    40.3 \n    18.5 \n    196 \n    4350 \n  \n\n Adelie \n    1 \n    33.1 \n    16.1 \n    178 \n    2900 \n  \n\n Adelie \n    1 \n    43.2 \n    18.5 \n    192 \n    4100 \n  \n\n Adelie \n    1 \n    35.0 \n    17.9 \n    192 \n    3725 \n  \n\n Adelie \n    1 \n    41.0 \n    20.0 \n    203 \n    4725 \n  \n\n Adelie \n    1 \n    37.7 \n    16.0 \n    183 \n    3075 \n  \n\n Adelie \n    1 \n    37.8 \n    20.0 \n    190 \n    4250 \n  \n\n Adelie \n    1 \n    37.9 \n    18.6 \n    193 \n    2925 \n  \n\n Adelie \n    1 \n    39.7 \n    18.9 \n    184 \n    3550 \n  \n\n Adelie \n    1 \n    38.6 \n    17.2 \n    199 \n    3750 \n  \n\n Adelie \n    1 \n    38.2 \n    20.0 \n    190 \n    3900 \n  \n\n Adelie \n    1 \n    38.1 \n    17.0 \n    181 \n    3175 \n  \n\n Adelie \n    1 \n    43.2 \n    19.0 \n    197 \n    4775 \n  \n\n Adelie \n    1 \n    38.1 \n    16.5 \n    198 \n    3825 \n  \n\n Adelie \n    1 \n    45.6 \n    20.3 \n    191 \n    4600 \n  \n\n Adelie \n    1 \n    39.7 \n    17.7 \n    193 \n    3200 \n  \n\n Adelie \n    1 \n    42.2 \n    19.5 \n    197 \n    4275 \n  \n\n Adelie \n    1 \n    39.6 \n    20.7 \n    191 \n    3900 \n  \n\n Adelie \n    1 \n    42.7 \n    18.3 \n    196 \n    4075 \n  \n\n Adelie \n    1 \n    38.6 \n    17.0 \n    188 \n    2900 \n  \n\n Adelie \n    1 \n    37.3 \n    20.5 \n    199 \n    3775 \n  \n\n Adelie \n    1 \n    35.7 \n    17.0 \n    189 \n    3350 \n  \n\n Adelie \n    1 \n    41.1 \n    18.6 \n    189 \n    3325 \n  \n\n Adelie \n    1 \n    36.2 \n    17.2 \n    187 \n    3150 \n  \n\n Adelie \n    1 \n    37.7 \n    19.8 \n    198 \n    3500 \n  \n\n Adelie \n    1 \n    40.2 \n    17.0 \n    176 \n    3450 \n  \n\n Adelie \n    1 \n    41.4 \n    18.5 \n    202 \n    3875 \n  \n\n Adelie \n    1 \n    35.2 \n    15.9 \n    186 \n    3050 \n  \n\n Adelie \n    1 \n    40.6 \n    19.0 \n    199 \n    4000 \n  \n\n Adelie \n    1 \n    38.8 \n    17.6 \n    191 \n    3275 \n  \n\n Adelie \n    1 \n    41.5 \n    18.3 \n    195 \n    4300 \n  \n\n Adelie \n    1 \n    39.0 \n    17.1 \n    191 \n    3050 \n  \n\n Adelie \n    1 \n    44.1 \n    18.0 \n    210 \n    4000 \n  \n\n Adelie \n    1 \n    38.5 \n    17.9 \n    190 \n    3325 \n  \n\n Adelie \n    1 \n    43.1 \n    19.2 \n    197 \n    3500 \n  \n\n Adelie \n    1 \n    36.8 \n    18.5 \n    193 \n    3500 \n  \n\n Adelie \n    1 \n    37.5 \n    18.5 \n    199 \n    4475 \n  \n\n Adelie \n    1 \n    38.1 \n    17.6 \n    187 \n    3425 \n  \n\n Adelie \n    1 \n    41.1 \n    17.5 \n    190 \n    3900 \n  \n\n Adelie \n    1 \n    35.6 \n    17.5 \n    191 \n    3175 \n  \n\n Adelie \n    1 \n    40.2 \n    20.1 \n    200 \n    3975 \n  \n\n Adelie \n    1 \n    37.0 \n    16.5 \n    185 \n    3400 \n  \n\n Adelie \n    1 \n    39.7 \n    17.9 \n    193 \n    4250 \n  \n\n Adelie \n    1 \n    40.2 \n    17.1 \n    193 \n    3400 \n  \n\n Adelie \n    1 \n    40.6 \n    17.2 \n    187 \n    3475 \n  \n\n Adelie \n    1 \n    32.1 \n    15.5 \n    188 \n    3050 \n  \n\n Adelie \n    1 \n    40.7 \n    17.0 \n    190 \n    3725 \n  \n\n Adelie \n    1 \n    37.3 \n    16.8 \n    192 \n    3000 \n  \n\n Adelie \n    1 \n    39.0 \n    18.7 \n    185 \n    3650 \n  \n\n Adelie \n    1 \n    39.2 \n    18.6 \n    190 \n    4250 \n  \n\n Adelie \n    1 \n    36.6 \n    18.4 \n    184 \n    3475 \n  \n\n Adelie \n    1 \n    36.0 \n    17.8 \n    195 \n    3450 \n  \n\n Adelie \n    1 \n    37.8 \n    18.1 \n    193 \n    3750 \n  \n\n Adelie \n    1 \n    36.0 \n    17.1 \n    187 \n    3700 \n  \n\n Adelie \n    1 \n    41.5 \n    18.5 \n    201 \n    4000 \n  \n\n Gentoo \n    0 \n    46.1 \n    13.2 \n    211 \n    4500 \n  \n\n Gentoo \n    0 \n    50.0 \n    16.3 \n    230 \n    5700 \n  \n\n Gentoo \n    0 \n    48.7 \n    14.1 \n    210 \n    4450 \n  \n\n Gentoo \n    0 \n    50.0 \n    15.2 \n    218 \n    5700 \n  \n\n Gentoo \n    0 \n    47.6 \n    14.5 \n    215 \n    5400 \n  \n\n Gentoo \n    0 \n    46.5 \n    13.5 \n    210 \n    4550 \n  \n\n Gentoo \n    0 \n    45.4 \n    14.6 \n    211 \n    4800 \n  \n\n Gentoo \n    0 \n    46.7 \n    15.3 \n    219 \n    5200 \n  \n\n Gentoo \n    0 \n    43.3 \n    13.4 \n    209 \n    4400 \n  \n\n Gentoo \n    0 \n    46.8 \n    15.4 \n    215 \n    5150 \n  \n\n Gentoo \n    0 \n    40.9 \n    13.7 \n    214 \n    4650 \n  \n\n Gentoo \n    0 \n    49.0 \n    16.1 \n    216 \n    5550 \n  \n\n Gentoo \n    0 \n    45.5 \n    13.7 \n    214 \n    4650 \n  \n\n Gentoo \n    0 \n    48.4 \n    14.6 \n    213 \n    5850 \n  \n\n Gentoo \n    0 \n    45.8 \n    14.6 \n    210 \n    4200 \n  \n\n Gentoo \n    0 \n    49.3 \n    15.7 \n    217 \n    5850 \n  \n\n Gentoo \n    0 \n    42.0 \n    13.5 \n    210 \n    4150 \n  \n\n Gentoo \n    0 \n    49.2 \n    15.2 \n    221 \n    6300 \n  \n\n Gentoo \n    0 \n    46.2 \n    14.5 \n    209 \n    4800 \n  \n\n Gentoo \n    0 \n    48.7 \n    15.1 \n    222 \n    5350 \n  \n\n Gentoo \n    0 \n    50.2 \n    14.3 \n    218 \n    5700 \n  \n\n Gentoo \n    0 \n    45.1 \n    14.5 \n    215 \n    5000 \n  \n\n Gentoo \n    0 \n    46.5 \n    14.5 \n    213 \n    4400 \n  \n\n Gentoo \n    0 \n    46.3 \n    15.8 \n    215 \n    5050 \n  \n\n Gentoo \n    0 \n    42.9 \n    13.1 \n    215 \n    5000 \n  \n\n Gentoo \n    0 \n    46.1 \n    15.1 \n    215 \n    5100 \n  \n\n Gentoo \n    0 \n    44.5 \n    14.3 \n    216 \n    4100 \n  \n\n Gentoo \n    0 \n    47.8 \n    15.0 \n    215 \n    5650 \n  \n\n Gentoo \n    0 \n    48.2 \n    14.3 \n    210 \n    4600 \n  \n\n Gentoo \n    0 \n    50.0 \n    15.3 \n    220 \n    5550 \n  \n\n Gentoo \n    0 \n    47.3 \n    15.3 \n    222 \n    5250 \n  \n\n Gentoo \n    0 \n    42.8 \n    14.2 \n    209 \n    4700 \n  \n\n Gentoo \n    0 \n    45.1 \n    14.5 \n    207 \n    5050 \n  \n\n Gentoo \n    0 \n    59.6 \n    17.0 \n    230 \n    6050 \n  \n\n Gentoo \n    0 \n    49.1 \n    14.8 \n    220 \n    5150 \n  \n\n Gentoo \n    0 \n    48.4 \n    16.3 \n    220 \n    5400 \n  \n\n Gentoo \n    0 \n    42.6 \n    13.7 \n    213 \n    4950 \n  \n\n Gentoo \n    0 \n    44.4 \n    17.3 \n    219 \n    5250 \n  \n\n Gentoo \n    0 \n    44.0 \n    13.6 \n    208 \n    4350 \n  \n\n Gentoo \n    0 \n    48.7 \n    15.7 \n    208 \n    5350 \n  \n\n Gentoo \n    0 \n    42.7 \n    13.7 \n    208 \n    3950 \n  \n\n Gentoo \n    0 \n    49.6 \n    16.0 \n    225 \n    5700 \n  \n\n Gentoo \n    0 \n    45.3 \n    13.7 \n    210 \n    4300 \n  \n\n Gentoo \n    0 \n    49.6 \n    15.0 \n    216 \n    4750 \n  \n\n Gentoo \n    0 \n    50.5 \n    15.9 \n    222 \n    5550 \n  \n\n Gentoo \n    0 \n    43.6 \n    13.9 \n    217 \n    4900 \n  \n\n Gentoo \n    0 \n    45.5 \n    13.9 \n    210 \n    4200 \n  \n\n Gentoo \n    0 \n    50.5 \n    15.9 \n    225 \n    5400 \n  \n\n Gentoo \n    0 \n    44.9 \n    13.3 \n    213 \n    5100 \n  \n\n Gentoo \n    0 \n    45.2 \n    15.8 \n    215 \n    5300 \n  \n\n Gentoo \n    0 \n    46.6 \n    14.2 \n    210 \n    4850 \n  \n\n Gentoo \n    0 \n    48.5 \n    14.1 \n    220 \n    5300 \n  \n\n Gentoo \n    0 \n    45.1 \n    14.4 \n    210 \n    4400 \n  \n\n Gentoo \n    0 \n    50.1 \n    15.0 \n    225 \n    5000 \n  \n\n Gentoo \n    0 \n    46.5 \n    14.4 \n    217 \n    4900 \n  \n\n Gentoo \n    0 \n    45.0 \n    15.4 \n    220 \n    5050 \n  \n\n Gentoo \n    0 \n    43.8 \n    13.9 \n    208 \n    4300 \n  \n\n Gentoo \n    0 \n    45.5 \n    15.0 \n    220 \n    5000 \n  \n\n Gentoo \n    0 \n    43.2 \n    14.5 \n    208 \n    4450 \n  \n\n Gentoo \n    0 \n    50.4 \n    15.3 \n    224 \n    5550 \n  \n\n Gentoo \n    0 \n    45.3 \n    13.8 \n    208 \n    4200 \n  \n\n Gentoo \n    0 \n    46.2 \n    14.9 \n    221 \n    5300 \n  \n\n Gentoo \n    0 \n    45.7 \n    13.9 \n    214 \n    4400 \n  \n\n Gentoo \n    0 \n    54.3 \n    15.7 \n    231 \n    5650 \n  \n\n Gentoo \n    0 \n    45.8 \n    14.2 \n    219 \n    4700 \n  \n\n Gentoo \n    0 \n    49.8 \n    16.8 \n    230 \n    5700 \n  \n\n Gentoo \n    0 \n    46.2 \n    14.4 \n    214 \n    4650 \n  \n\n Gentoo \n    0 \n    49.5 \n    16.2 \n    229 \n    5800 \n  \n\n Gentoo \n    0 \n    43.5 \n    14.2 \n    220 \n    4700 \n  \n\n Gentoo \n    0 \n    50.7 \n    15.0 \n    223 \n    5550 \n  \n\n Gentoo \n    0 \n    47.7 \n    15.0 \n    216 \n    4750 \n  \n\n Gentoo \n    0 \n    46.4 \n    15.6 \n    221 \n    5000 \n  \n\n Gentoo \n    0 \n    48.2 \n    15.6 \n    221 \n    5100 \n  \n\n Gentoo \n    0 \n    46.5 \n    14.8 \n    217 \n    5200 \n  \n\n Gentoo \n    0 \n    46.4 \n    15.0 \n    216 \n    4700 \n  \n\n Gentoo \n    0 \n    48.6 \n    16.0 \n    230 \n    5800 \n  \n\n Gentoo \n    0 \n    47.5 \n    14.2 \n    209 \n    4600 \n  \n\n Gentoo \n    0 \n    51.1 \n    16.3 \n    220 \n    6000 \n  \n\n Gentoo \n    0 \n    45.2 \n    13.8 \n    215 \n    4750 \n  \n\n Gentoo \n    0 \n    45.2 \n    16.4 \n    223 \n    5950 \n  \n\n Gentoo \n    0 \n    49.1 \n    14.5 \n    212 \n    4625 \n  \n\n Gentoo \n    0 \n    52.5 \n    15.6 \n    221 \n    5450 \n  \n\n Gentoo \n    0 \n    47.4 \n    14.6 \n    212 \n    4725 \n  \n\n Gentoo \n    0 \n    50.0 \n    15.9 \n    224 \n    5350 \n  \n\n Gentoo \n    0 \n    44.9 \n    13.8 \n    212 \n    4750 \n  \n\n Gentoo \n    0 \n    50.8 \n    17.3 \n    228 \n    5600 \n  \n\n Gentoo \n    0 \n    43.4 \n    14.4 \n    218 \n    4600 \n  \n\n Gentoo \n    0 \n    51.3 \n    14.2 \n    218 \n    5300 \n  \n\n Gentoo \n    0 \n    47.5 \n    14.0 \n    212 \n    4875 \n  \n\n Gentoo \n    0 \n    52.1 \n    17.0 \n    230 \n    5550 \n  \n\n Gentoo \n    0 \n    47.5 \n    15.0 \n    218 \n    4950 \n  \n\n Gentoo \n    0 \n    52.2 \n    17.1 \n    228 \n    5400 \n  \n\n Gentoo \n    0 \n    45.5 \n    14.5 \n    212 \n    4750 \n  \n\n Gentoo \n    0 \n    49.5 \n    16.1 \n    224 \n    5650 \n  \n\n Gentoo \n    0 \n    44.5 \n    14.7 \n    214 \n    4850 \n  \n\n Gentoo \n    0 \n    50.8 \n    15.7 \n    226 \n    5200 \n  \n\n Gentoo \n    0 \n    49.4 \n    15.8 \n    216 \n    4925 \n  \n\n Gentoo \n    0 \n    46.9 \n    14.6 \n    222 \n    4875 \n  \n\n Gentoo \n    0 \n    48.4 \n    14.4 \n    203 \n    4625 \n  \n\n Gentoo \n    0 \n    51.1 \n    16.5 \n    225 \n    5250 \n  \n\n Gentoo \n    0 \n    48.5 \n    15.0 \n    219 \n    4850 \n  \n\n Gentoo \n    0 \n    55.9 \n    17.0 \n    228 \n    5600 \n  \n\n Gentoo \n    0 \n    47.2 \n    15.5 \n    215 \n    4975 \n  \n\n Gentoo \n    0 \n    49.1 \n    15.0 \n    228 \n    5500 \n  \n\n Gentoo \n    0 \n    47.3 \n    13.8 \n    216 \n    4725 \n  \n\n Gentoo \n    0 \n    46.8 \n    16.1 \n    215 \n    5500 \n  \n\n Gentoo \n    0 \n    41.7 \n    14.7 \n    210 \n    4700 \n  \n\n Gentoo \n    0 \n    53.4 \n    15.8 \n    219 \n    5500 \n  \n\n Gentoo \n    0 \n    43.3 \n    14.0 \n    208 \n    4575 \n  \n\n Gentoo \n    0 \n    48.1 \n    15.1 \n    209 \n    5500 \n  \n\n Gentoo \n    0 \n    50.5 \n    15.2 \n    216 \n    5000 \n  \n\n Gentoo \n    0 \n    49.8 \n    15.9 \n    229 \n    5950 \n  \n\n Gentoo \n    0 \n    43.5 \n    15.2 \n    213 \n    4650 \n  \n\n Gentoo \n    0 \n    51.5 \n    16.3 \n    230 \n    5500 \n  \n\n Gentoo \n    0 \n    46.2 \n    14.1 \n    217 \n    4375 \n  \n\n Gentoo \n    0 \n    55.1 \n    16.0 \n    230 \n    5850 \n  \n\n Gentoo \n    0 \n    44.5 \n    15.7 \n    217 \n    4875 \n  \n\n Gentoo \n    0 \n    48.8 \n    16.2 \n    222 \n    6000 \n  \n\n Gentoo \n    0 \n    47.2 \n    13.7 \n    214 \n    4925 \n  \n\n Gentoo \n    0 \n    46.8 \n    14.3 \n    215 \n    4850 \n  \n\n Gentoo \n    0 \n    50.4 \n    15.7 \n    222 \n    5750 \n  \n\n Gentoo \n    0 \n    45.2 \n    14.8 \n    212 \n    5200 \n  \n\n Gentoo \n    0 \n    49.9 \n    16.1 \n    213 \n    5400 \n  \n\n\n\n\n\nThe Hmisc::describe() function can give us a quick summary of the data.\n\n\n\n\n\n\nExpand to view detailed summary statistics for each variable\n\n\n\n\n\n\nCodehtml(describe(df))\n\n\n\n\ndf Descriptives\ndf  6  Variables   274  Observations \nspecies \n\n\nn\nmissing\ndistinct\n\n\n274\n0\n2\n\n\n Value      Adelie Gentoo\n Frequency     151    123\n Proportion  0.551  0.449\n \n \nadelie \n\n\nn\nmissing\ndistinct\nInfo\nSum\nMean\nGmd\n\n\n274\n0\n2\n0.742\n151\n0.5511\n0.4966\n\n\n\nbill_length_mm \n\n\nn\nmissing\ndistinct\nInfo\nMean\nGmd\n.05\n.10\n.25\n.50\n.75\n.90\n.95\n\n\n274\n0\n146\n1\n42.7\n5.944\n35.43\n36.20\n38.35\n42.00\n46.68\n49.80\n50.73\n\n\nlowest : 32.1 33.1 33.5 34.0 34.1 ,  highest: 53.4 54.3 55.1 55.9 59.6 \nbill_depth_mm \n\n\nn\nmissing\ndistinct\nInfo\nMean\nGmd\n.05\n.10\n.25\n.50\n.75\n.90\n.95\n\n\n274\n0\n78\n1\n16.84\n2.317\n13.80\n14.20\n15.00\n17.00\n18.50\n19.30\n20.03\n\n\nlowest : 13.1 13.2 13.3 13.4 13.5 ,  highest: 20.6 20.7 21.1 21.2 21.5 \nflipper_length_mm \n\n\nn\nmissing\ndistinct\nInfo\nMean\nGmd\n.05\n.10\n.25\n.50\n.75\n.90\n.95\n\n\n274\n0\n54\n0.999\n202.2\n17.23\n181.0\n184.0\n190.0\n198.0\n215.0\n222.0\n226.7\n\n\nlowest : 172 174 176 178 179 ,  highest: 226 228 229 230 231 \nbody_mass_g \n\n\nn\nmissing\ndistinct\nInfo\nMean\nGmd\n.05\n.10\n.25\n.50\n.75\n.90\n.95\n\n\n274\n0\n89\n1\n4318\n962.3\n3091\n3282\n3600\n4262\n4950\n5535\n5700\n\n\nlowest : 2850 2900 2925 2975 3000 ,  highest: 5850 5950 6000 6050 6300 \n\n\n\n\n\nThe below plot informs us that Adelie and Gentoo penguins are likely to be easily distinguishable based on the measured features, since there is little overlap between the two species. Because we want to have a bit of a challenge (and because logistic regression doesn’t converge if the classes are perfectly separable), we will predict species based on bill length and body mass.\n\nCodedf %>%\n  GGally::ggpairs(mapping = aes(color=species),\n                  columns = c(\"bill_length_mm\",\n                              \"bill_depth_mm\",\n                              \"flipper_length_mm\",\n                              \"body_mass_g\"),\n                  title = \"Can these features distinguish Adelie and Gentoo penguins?\") +\n  scale_color_brewer(palette=\"Dark2\") +\n  scale_fill_brewer(palette=\"Dark2\")\n\n\n\n\nIn order to help our algorithms converge, we will put our variables on a more common scale by converting bill length to cm and body mass to kg.\n\nCodedf$bill_length_cm <- df$bill_length_mm / 10\ndf$body_mass_kg <- df$body_mass_g / 1000\n\n\n\nCode# Look at distribution of bill length in cm and body mass in kg\nqplot(df$bill_length_cm,bins=50) + qplot(df$body_mass_kg, bins=50)"
  },
  {
    "objectID": "posts/robust-estimators/index.html",
    "href": "posts/robust-estimators/index.html",
    "title": "Statistical simulation of robust estimators with tidyverse tools",
    "section": "",
    "text": "Code# Load packages\nlibrary(tidyverse)\n\n# ggplot2 themes\nlibrary(cowplot)\n\n# Formatting of HTML tables\nlibrary(kableExtra)\n\nset.seed(7)\nThe sample mean and sample median are commonly used estimators for the center of distribution. There is no such thing as a “best estimator” in all circumstances. However, estimators can definitely outperform other estimators in terms of desirable properties (e.g., unbiasedness, low variance, consistency) given a particular circumstance. We can use simulation and mathematical theory to evaluate to performance of estimators given a set of assumptions. Here we focus on using simulation, with the help of tools from the tidyverse."
  },
  {
    "objectID": "posts/robust-estimators/index.html#scenario-1",
    "href": "posts/robust-estimators/index.html#scenario-1",
    "title": "Statistical simulation of robust estimators with tidyverse tools",
    "section": "Scenario 1",
    "text": "Scenario 1\nWe begin with a simple example. The true data generating process is\n\\[ X_1, X_2, \\ldots X_n \\stackrel{iid}{\\sim} N(3,1) \\]\nHow will the mean and median perform as estimators of center? Let’s use simulation to find out.\nWe will use a tibble to store all of our simulation results. First, let’s decide what sample sizes to simulate, and how many trials to run. The more trials we run, the more accurate our simulation results will be – the only cost being increased time to run the simulations.\n\nCodesize <- c(5,10,20,50,100,200)\ntrial <- 1:1e5\n\n\nNow we use crossing() to generate a tibble that contains every combination of the vectors size and trial. So for every sample size, we are repeating it 100,000 times.\n\nCodedf <- crossing(trial, size)\n\n\n\n\n\n\n\n\n\ntrial\n\n\nsize\n\n\n\n\n\n1\n\n\n5\n\n\n\n\n1\n\n\n10\n\n\n\n\n1\n\n\n20\n\n\n\n\n1\n\n\n50\n\n\n\n\n1\n\n\n100\n\n\n\n\n1\n\n\n200\n\n\n\n\n2\n\n\n5\n\n\n\n\n2\n\n\n10\n\n\n\n\n2\n\n\n20\n\n\n\n\n2\n\n\n50\n\n\n\n\n2\n\n\n100\n\n\n\n\n2\n\n\n200\n\n\n\n\n3\n\n\n5\n\n\n\n\n3\n\n\n10\n\n\n\n\n3\n\n\n20\n\n\n\n\n3\n\n\n50\n\n\n\n\n3\n\n\n100\n\n\n\n\n3\n\n\n200\n\n\n\n\n4\n\n\n5\n\n\n\n\n4\n\n\n10\n\n\n\n\n4\n\n\n20\n\n\n\n\n4\n\n\n50\n\n\n\n\n4\n\n\n100\n\n\n\n\n4\n\n\n200\n\n\n\n\n5\n\n\n5\n\n\n\n\n5\n\n\n10\n\n\n\n\n5\n\n\n20\n\n\n\n\n5\n\n\n50\n\n\n\n\n5\n\n\n100\n\n\n\n\n5\n\n\n200\n\n\n\n\n6\n\n\n5\n\n\n\n\n6\n\n\n10\n\n\n\n\n6\n\n\n20\n\n\n\n\n6\n\n\n50\n\n\n\n\n6\n\n\n100\n\n\n\n\n6\n\n\n200\n\n\n\n\n7\n\n\n5\n\n\n\n\n7\n\n\n10\n\n\n\n\n7\n\n\n20\n\n\n\n\n7\n\n\n50\n\n\n\n\n7\n\n\n100\n\n\n\n\n7\n\n\n200\n\n\n\n\n8\n\n\n5\n\n\n\n\n8\n\n\n10\n\n\n\n\n8\n\n\n20\n\n\n\n\n8\n\n\n50\n\n\n\n\n8\n\n\n100\n\n\n\n\n8\n\n\n200\n\n\n\n\n9\n\n\n5\n\n\n\n\n9\n\n\n10\n\n\n\n\n\n\n\nNow in each row, we want a unique sample of data with the sample size given by that row. We will use purrr::map() to do this.\n\nCodedf$data <- map(df$size, ~rnorm(n=.x, mean = 3, sd=1))\n\n\nThe first argument to map is the vector to iterate over, and the second argument is the function to apply. We use .x as a dummy variable to refer to the value in the current iteration. In words, we are mapping each sample size to a random sample of size \\(n\\) from a normal distribution.\nThe new column, data, is a vector of lists, where each list contains a unique sample of data. Let’s see what this looks like.\n\n\n\n\n\n\n\ntrial\n\n\nsize\n\n\ndata\n\n\n\n\n\n1\n\n\n5\n\n\n5.287247, 1.803228, 2.305707, 2.587707, 2.029327\n\n\n\n\n1\n\n\n10\n\n\n2.052720, 3.748139, 2.883045, 3.152658, 5.189978, 3.356986, 5.716752, 5.281452, 3.324021, 4.896067\n\n\n\n\n1\n\n\n20\n\n\n3.467681, 2.106199, 2.692672, 2.995178, 3.988164, 3.839750, 3.705342, 4.305965, 1.612004, 4.272917, 3.184193, 3.752280, 3.591745, 2.016947, 2.723936, 2.129149, 3.718711, 3.110653, 2.921533, 2.579510\n\n\n\n\n1\n\n\n50\n\n\n2.437874, 3.997513, 1.894870, 2.857712, 3.314995, 4.218551, 2.300683, 2.714567, 1.688447, 2.608988, 2.598473, 4.350518, 3.591190, 3.100525, 3.931072, 2.737258, 2.992332, 3.367153, 4.707163, 3.723740, 3.481036, 1.432132, 3.318250, 3.165991, 2.100092, 3.076371, 3.159155, 3.543674, 3.704807, 3.318969, 4.109250, 3.769154, 4.153474, 4.260684, 3.700624, 3.432627, 2.077398, 2.384416, 2.133340, 1.360483, 1.674161, 2.110963, 2.442398, 2.937598, 5.422693, 3.342585, 3.004248, 3.029220, 2.606577, 2.207295\n\n\n\n\n1\n\n\n100\n\n\n2.6882981, 2.6539314, 2.6953924, 1.2141065, 3.5872747, 4.6357944, 2.3545765, 3.6189922, 3.2363936, 3.8465009, 2.4263543, 4.1179932, 1.4599989, 2.5618761, 2.8493270, 3.5190584, 3.5875397, 2.9206669, 1.8256390, 3.3087221, 1.3961215, 3.9912896, 4.0232204, 3.8401454, 3.1200786, 2.5737449, 3.4589262, 3.6450479, 3.6115305, 2.1107887, 4.5438923, 1.7582364, 4.1034473, 3.9827724, 3.3043272, 1.4452818, 4.5698908, 3.6884497, 2.8223963, 3.7292013, 4.5332509, 3.5065784, 3.0333277, 1.5324493, 4.0191577, 2.4066607, 3.8124099, 3.8661678, 3.3683083, 4.1348191, 2.2429007, 3.4452206, 3.9159329, 3.2697587, 4.0075404, 1.5385667, 2.1252144, 3.1652289, 3.2072070, 3.4823619, 2.9283416, 2.1110716, 3.4859436, 3.3404968, 1.9020758, 2.6443056, 4.0973004, 2.0933080, 2.7925434, 3.6788614, 2.2022123, 1.4084611, 4.1803481, 4.2225693, 2.9890908, 3.3455225, 3.0941892, 3.0067934, 3.7426229, 4.0421865, 2.6806629, 3.3226434, 3.6850530, 3.3202428, 1.0850620, 0.6600371, 3.4828643, 4.1785300, 1.7072230, 3.6157731, 3.2560421, 3.7278390, 4.3241109, 3.1471585, 2.4014606, 5.1925299, 5.3271128, 4.1348696, 2.8091154, 3.4748446\n\n\n\n\n1\n\n\n200\n\n\n2.45452506, 4.05564854, 3.42902183, 1.18004359, 2.30802391, 1.06817175, 4.20967201, 2.72099995, 1.90421677, 2.89781396, 3.35702296, 2.11769743, 2.94335221, 2.41898105, 3.64408819, 5.02334405, 3.86249250, 2.97509051, 3.60063495, 4.21648074, 1.82346845, 2.39065997, 3.38726257, 1.60085986, 4.23249185, 3.01550750, 1.37904095, 2.33453534, 2.42515949, 2.09810702, 4.49159937, 2.86272068, 3.10828170, 1.96478490, 2.55525608, 2.80395073, 1.73063551, 3.95352118, 3.47254665, 2.44122190, 4.24206456, 2.98474153, 2.20821161, 2.59838126, 1.10329871, 3.97197493, 2.48604514, 3.01456167, 2.73906443, 4.52235839, 1.52663025, 2.98344199, 3.02454061, 2.99874301, 2.56606729, 2.59444094, 3.15523332, 2.02761818, 4.54817493, 2.62987667, 4.96152526, 2.39000442, 2.92257124, 1.17114074, 3.80592424, 1.52240822, 0.02674429, 1.66023786, 2.73415797, 2.61600659, 2.39705767, 2.34847596, 4.75767151, 2.98096513, 3.15528461, 2.23915356, 1.45027309, 5.75016501, 4.04742325, 3.91799247, 3.47010951, 2.38262791, 3.04210627, 2.09810110, 4.33958321, 3.80385435, 3.31847865, 2.80954669, 1.91273331, 3.14539973, 5.46280025, 3.92361969, 3.74187669, 4.41602179, 4.25166337, 5.10890569, 3.71031260, 1.52481799, 2.41027352, 3.13970325, 2.48827577, 3.15093735, 3.44203940, 2.83760088, 3.97183854, 2.32873452, 4.63839716, 1.93172732, 2.98858788, 1.13471866, 3.01825086, 2.75297945, 2.08057489, 0.82683557, 2.35062295, 3.52526155, 2.72427269, 3.05470977, 2.61175039, 2.58297695, 1.83582483, 4.73786414, 2.74592265, 2.02628138, 4.11119895, 3.97349906, 4.25712868, 4.77628758, 0.31683148, 3.65986308, 4.17944967, 3.39351378, 1.81014133, 2.64347263, 1.53449196, 1.90926985, 2.34274578, 5.26294100, 3.08769003, 3.76752300, 2.38684254, 3.15250297, 2.40829255, 2.03929503, 2.41504201, 3.65667289, 2.70975041, 3.90409773, 3.19902022, 2.94842519, 2.09179482, 1.85752166, 3.99032494, 3.11227328, 4.14963167, 2.08950468, 1.89618028, 1.36513269, 1.38361751, 2.16326299, 4.09299912, 4.23509818, 3.17206660, 3.12049317, 3.55753267, 3.49138316, 2.93098738, 1.64920369, 3.79935757, 2.67990592, 2.64304881, 2.48927206, 1.12111992, 2.04815491, 5.27315661, 3.20268763, 0.69144530, 2.94336434, 3.06284384, 3.71022814, 2.40769260, 3.29852463, 3.64253563, 5.11279510, 3.91777963, 1.42714525, 3.99264173, 3.47952087, 2.70341944, 3.81584023, 2.00022839, 3.54921029, 3.27977120, 3.91663589, 1.26874274, 1.52041893, 5.22981103, 3.38649895, 3.66026569, 2.72376479\n\n\n\n\n2\n\n\n5\n\n\n3.2759330, 0.7257688, 3.9080857, 1.9137469, 2.7844733\n\n\n\n\n2\n\n\n10\n\n\n2.266573, 3.212118, 2.060858, 2.380806, 3.244011, 3.371743, 3.627208, 1.926886, 2.291307, 3.907132\n\n\n\n\n2\n\n\n20\n\n\n2.6802944, 4.1650659, 2.3782895, 4.2482132, 4.4404015, 3.7619934, 3.5593712, 4.5992638, 2.9015423, 1.5504462, 2.7423387, 0.9669287, 3.5869642, 3.1605865, 3.1131529, 3.5716906, 2.0344703, 3.3180012, 2.8264924, 2.0873888\n\n\n\n\n2\n\n\n50\n\n\n1.153105, 3.669518, 2.891213, 4.566575, 2.155155, 4.097649, 3.300880, 2.223034, 2.961566, 4.109490, 3.536325, 2.636652, 2.894499, 3.333875, 3.810231, 1.316305, 3.665728, 2.207612, 4.527723, 1.513308, 2.328851, 4.675177, 3.611932, 2.767794, 3.605293, 1.840894, 1.835571, 2.130075, 2.738894, 2.505804, 1.694177, 5.023413, 2.244351, 2.758405, 4.097159, 2.053387, 1.866040, 2.116616, 3.516413, 2.662045, 2.977548, 2.897949, 3.300409, 3.806620, 2.962794, 1.543524, 2.376109, 2.830402, 4.276123, 2.744086\n\n\n\n\n2\n\n\n100\n\n\n2.8346317, 2.5726789, 2.9431273, 1.5546164, 4.8828070, 3.1168900, 3.4211327, 4.5774044, 2.7486115, 2.9443757, 2.9774681, 5.3309610, 2.9011697, 3.1664316, 2.7303646, 3.8444736, 4.4087677, 1.4337638, 3.1690382, 1.4943208, 3.9949329, 4.2439084, 2.9637432, 2.5887441, 4.2841490, 1.8821923, 2.1649303, 4.5008117, 3.8991509, 2.5435879, 2.7939842, 2.4121564, 2.3145471, 4.0048242, 2.2273509, 1.0062663, 2.0907455, 2.4368439, 1.7821444, 1.1796821, 2.6003707, 5.1183683, 4.4151575, 3.5647651, 1.9187028, 2.0580239, 2.7558166, 4.0854886, 3.5583438, 0.8237716, 3.8773012, 3.8425353, 2.9484160, 2.3098786, 1.1610172, 3.2830379, 0.7474099, 3.7343502, 3.1458057, 2.3505714, 2.4387756, 3.3347920, 3.0320184, 4.2369172, 3.0564134, 2.8545673, 2.4076504, 1.7392870, 2.3163942, 2.8365628, 2.5615265, 2.4212970, 4.5810904, 4.5406613, 3.7029810, 2.9362514, 2.2593760, 1.9660528, 2.7039363, 1.5570503, 2.9728083, 4.5613930, 2.0089218, 3.0041940, 2.9551952, 2.3113463, 2.8697454, 3.1550928, 4.2773416, 4.0535482, 2.6282835, 2.8968675, 5.4980736, 2.2227391, 3.7573846, 3.0225450, 1.3499685, 2.1108838, 2.3916303, 2.7869371\n\n\n\n\n2\n\n\n200\n\n\n4.4712113, 3.4663885, 4.8183584, 4.9233962, 2.4609964, 2.6137212, 2.1381923, 2.5979934, 3.5989628, 3.0818373, 3.3310258, 2.5387531, 3.3590392, 2.4842088, 3.5872762, 4.6196110, 3.4452312, 4.2552612, 2.4250934, 3.3160895, 0.8121294, 5.3721013, 3.9765799, 3.6144518, 2.6847373, 3.2310379, 5.0754801, 3.6526849, 2.9626037, 2.2936085, 1.7721683, 3.1341585, 2.6267665, 3.0390604, 3.1431243, 3.1049473, 3.6021957, 2.8816045, 3.5591695, 3.0418614, 3.0636211, 4.4662037, 2.5273691, 3.1634745, 3.3063502, 3.7925762, 2.0509232, 3.9047870, 2.6598896, 4.5310075, 3.3894034, 3.4959820, 3.6448587, 2.9562352, 1.6431313, 3.5914394, 1.0117028, 3.9186111, 2.2712175, 2.7793923, 3.3043540, 3.9926521, 2.9267322, 2.9882560, 4.0048726, 3.2533434, 2.0013965, 2.1985930, 4.1808544, 3.8229147, 3.9488901, 1.7478035, 1.4130252, 2.9784231, 1.8325981, 2.4516226, 1.9588791, 3.0147900, 1.4106007, 1.8228845, 3.7860374, 4.8980149, 2.5862019, 3.6776653, 2.1427547, 2.8789413, 2.2828294, 2.5392775, 2.9459693, 4.8482138, 3.5799736, 3.0891623, 3.9692474, 4.0389265, 2.3749993, 2.9423099, 2.1560368, 3.1875532, 2.5682157, 1.1942029, 2.8283227, 2.2625034, 2.9965397, 2.9206258, 2.8040684, 1.3295267, 2.0698512, 2.2467431, 2.8882962, 2.5293070, 2.1340760, 1.4287556, 3.5310695, 2.6139270, 1.5563502, 4.0796788, 3.3756376, 2.0071300, 4.0982031, 2.3521521, 2.9948101, 2.8644936, 4.2993083, 1.0984440, 4.2119189, 2.4081217, 3.3380150, 4.4366194, 3.4033307, 2.2535110, 4.3431232, 2.8146054, 3.9726011, 3.9211635, 2.9477696, 1.5649822, 4.0510527, 5.2405947, 3.7003835, 1.8269189, 2.5049930, 3.2786766, 3.7157131, 0.8367070, 2.5479963, 2.0247102, 2.4633039, 3.3083875, 3.4217938, 3.4386619, 2.0136053, 2.3334876, 3.2542884, 2.1949325, 3.3629507, 3.7519038, 2.0610404, 2.6878049, 2.9188225, 3.6210392, 3.3736386, 2.5762633, 2.7108783, 2.6170364, 3.9187120, 4.0170490, 3.6795118, 4.3614973, 2.7761955, 3.6014453, 2.8579245, 3.6139005, 4.0570122, 5.9614931, 3.6459387, 3.3482272, 1.9481373, 3.4999391, 2.8656461, 1.7816658, 4.9838025, 1.2559068, 3.3220384, 1.0206524, 3.7251298, 2.6158280, 2.9391138, 1.5464312, 3.1089980, 2.8583717, 4.5959384, 4.4549930, 2.9315214, 2.6788520, 2.9814002, 1.6783025, 2.7422002, 3.4730513, 3.9221774, 2.1461390\n\n\n\n\n3\n\n\n5\n\n\n1.0747243, 4.5615640, 1.9949502, 2.5591799, 0.8516282\n\n\n\n\n3\n\n\n10\n\n\n3.048287, 2.778905, 2.673316, 3.400211, 1.967065, 1.463854, 4.601259, 3.387260, 3.895125, 3.499271\n\n\n\n\n3\n\n\n20\n\n\n2.4285227, 2.3395377, 2.7488436, 3.2524397, 3.2276578, 3.2738653, 4.0710747, 2.7178398, 0.6195107, 3.5952696, 2.9578908, 3.6323426, 4.1449626, 1.9183443, 3.0223513, 3.1286965, 2.4501342, 1.6139560, 2.8583713, 2.0375426\n\n\n\n\n3\n\n\n50\n\n\n3.8046061, 1.7389417, 2.4324046, 2.4069112, 2.3684307, 3.9753758, 3.7230437, 3.7287052, 4.6498268, 3.6135468, 4.0717187, 3.9209338, 2.6941869, 2.9706652, 2.9164413, 2.8974315, 1.9216091, 3.9951739, 3.8619505, 2.3248371, 2.6893307, 2.3994889, 1.9630793, 4.1066661, 3.1823144, 3.0297148, 3.4639882, 2.7645436, 2.5417248, 1.5961892, 3.0482292, 2.5052983, 3.1519455, 2.7919992, 3.0458618, 4.9481276, 2.8886585, 2.0411453, 2.2232450, 3.0789227, 1.5290028, 2.6367495, 1.9999055, 3.5540651, 4.9393684, 2.5539007, 3.6313644, 0.3785456, 3.2908147, 1.9487786\n\n\n\n\n3\n\n\n100\n\n\n4.0267448, 2.4347065, 3.0706354, 1.8619552, 2.1051051, 2.4159778, 2.2276860, 3.2198606, 4.2963880, 4.1106416, 2.3727025, 4.6175100, 3.7231870, 3.3952936, 1.9038731, 3.9842807, 2.1291319, 0.7617531, 3.9220697, 2.2509084, 3.6855175, 5.0565703, 1.9029950, 2.5308079, 3.1848184, 1.6005643, 3.0330627, 3.0296827, 2.1690749, 3.0171374, 2.3909994, 1.4421590, 2.8371608, 2.7534749, 2.8547618, 3.5765834, 0.5694954, 1.1923891, 2.7431577, 2.1169319, 1.9697289, 1.4216196, 2.9587375, 4.5703574, 1.2041289, 1.9937968, 2.9218875, 1.5531351, 3.1154095, 1.7936482, 4.9214755, 2.8949295, 2.5121010, 1.7239873, 1.7129663, 1.6588592, 3.3965378, 3.5308406, 2.1060778, 4.0638238, 2.9288794, 1.0274889, 3.8229956, 2.9489243, 4.6103621, 2.8593775, 3.5027458, 2.3368797, 3.9059765, 3.3097038, 2.9642133, 4.1090774, 3.3954192, 2.1599487, 4.1834967, 3.1524552, 4.5397408, 3.5094389, 3.0603497, 2.7083975, 4.3067560, 3.0184312, 2.4475454, 2.7512634, 3.5456570, 3.2623655, 3.1965461, 4.4158751, 2.4468998, 3.4643230, 2.4960860, 3.2934396, 2.2344831, 5.9669187, 2.5541070, 2.6097323, 2.8106454, 3.9297801, 1.5020411, 2.7621832\n\n\n\n\n3\n\n\n200\n\n\n3.3379816, 3.0467376, 3.5856568, 4.6881144, 2.9882412, 3.8726926, 4.9507921, 2.2179698, 3.1656292, 3.0616127, 2.9423149, 2.0744901, 2.6901850, 2.9727262, 4.0697656, 2.6710079, 1.8654389, 2.8375546, 1.8670523, 3.3272469, 1.8216279, 4.0887857, 3.7945111, 3.2769436, 4.1882102, 2.0985893, 4.1767634, 2.3121987, 2.9017401, 0.6995816, 2.6310833, 2.1461711, 2.5735019, 2.6055313, 2.3392725, 3.5565659, 4.2165840, 2.4282726, 1.3777620, 3.9605101, 3.3559599, 2.7266119, 4.4954292, 1.1048459, 4.3405233, 4.2465863, 2.2344911, 3.2161769, 2.6356327, 2.1793273, 3.5823607, 1.7455905, 1.4644593, 2.3608079, 3.9028003, 1.0813524, 2.9920942, 3.7360488, 3.8347558, 4.2006599, 2.0251797, 3.1578320, 3.6828930, 3.4354898, 3.6446918, 4.2536940, 3.4351071, 3.6951262, 3.3481487, 3.4263386, 3.9004165, 2.7830213, 3.4770821, 4.4557338, 2.3610055, 2.0883887, 2.1229056, 3.4073771, 1.2205407, 3.7718883, 2.9473680, 1.9577641, 2.6836830, 1.9353318, 2.7912719, 2.4061728, 1.4001696, 4.7920980, 2.7025164, 2.0886113, 3.5193641, 3.4665924, 3.7529639, 3.3625808, 3.6445837, 4.8089620, 2.5149883, 4.7129001, 2.6400966, 2.7897778, 3.8286028, 2.2471501, 3.1699194, 2.4675223, 1.2139572, 2.0048085, 4.2639231, 3.3735465, 2.8712022, 1.3690783, 1.2301025, 1.8408825, 2.4633109, 2.5279638, 2.2077192, 3.3804254, 2.2987340, 0.9632190, 2.0159687, 3.5687473, 2.4107160, 2.6069591, 2.3379330, 2.2647634, 4.7508700, 2.1508180, 4.8035604, 2.9215948, 1.8838999, 2.9627230, 1.3184766, 3.0004679, 2.7376545, 3.8483555, 3.1799709, 2.9088631, 2.8585798, 3.4850146, 2.7303344, 2.0311355, 1.8765016, 6.1393687, 2.0304541, 1.1624620, 1.7204242, 5.1641666, 5.4209916, 5.2109649, 3.9116650, 3.8978615, 2.2806115, 2.2426713, 1.1898476, 2.3905190, 2.7221135, 2.5300610, 3.6211107, 4.5201590, 3.9518112, 2.4877154, 3.9611690, 1.5032409, 2.7716587, 2.0895720, 3.9192839, 3.8641317, 2.6356586, 3.5662045, 2.1490408, 3.2971417, 3.2662161, 1.7114598, 3.7481715, 2.5776729, 1.2499376, 3.9234398, 2.1178963, 3.5202904, 2.6368864, 3.5266851, 4.3277226, 4.1275526, 3.9812273, 2.9276576, 5.0384100, 2.7966574, 1.7282428, 2.5984431, 2.6102377, 2.5112881, 2.4589464, 2.0001536, 3.1825102, 3.4826075, 3.9767062, 2.3317354, 2.8121231, 4.6023773, 3.8168615, 1.9140217\n\n\n\n\n4\n\n\n5\n\n\n2.577562, 1.123664, 3.495275, 2.719760, 4.720884\n\n\n\n\n4\n\n\n10\n\n\n2.702431, 4.166489, 2.750906, 4.090724, 2.774019, 2.651594, 3.167391, 1.799999, 2.749191, 3.163844\n\n\n\n\n4\n\n\n20\n\n\n2.8900482, 3.4663823, 2.3946123, 1.1266935, 3.3379802, 4.0589477, 4.2738963, 3.5974829, 5.8015042, 3.4725719, 1.6463334, 2.9543077, 2.1672539, 3.2862271, 4.4010676, 0.9028631, 3.1765408, 3.5989289, 2.2799673, 3.1030414\n\n\n\n\n4\n\n\n50\n\n\n2.5417992, 2.7712643, 3.2603008, 1.5902826, 2.4041137, 2.6021900, 2.1068297, 4.2283983, 1.3692486, 2.9955652, 3.4650244, 3.1077124, 2.5326740, 5.6138886, 3.0343272, 4.3560290, 1.9652125, 3.0990213, 1.5725810, 1.5456695, 1.6319697, 2.3603026, 1.2883407, 3.5445709, 3.2687218, 0.8946275, 3.0903373, 2.5934762, 2.5560058, 3.7752356, 3.4707229, 2.5997251, 3.3855622, 3.8563913, 3.3555159, 3.0903885, 4.5548858, 1.8718650, 2.3247428, 3.0633230, 2.3958766, 3.5463976, 3.2704150, 2.0239806, 2.8522347, 1.7801888, 2.9331158, 3.5143356, 3.1246447, 1.8767593\n\n\n\n\n4\n\n\n100\n\n\n3.0181795, 3.1820159, 2.8390711, 3.9013929, 2.9089998, 2.3781238, 2.9665397, 2.0201009, 3.0919985, 3.8296835, 2.3138039, 4.3592009, 3.5122567, 1.2843327, 0.8425531, 3.6482090, 1.1299042, 3.2927918, 3.1919376, 3.6177099, 3.6207109, 5.0441964, 2.0670874, 2.5374294, 3.2004210, 1.6477960, 2.1863851, 2.4497617, 3.6312731, 3.6447851, 0.6144123, 3.4086673, 3.1185903, 3.6694021, 1.7242021, 2.6752880, 5.1434517, 3.0748484, 2.9999282, 4.5485503, 2.9316575, 3.3015455, 4.2693085, 1.6217036, 2.4394224, 4.2841995, 3.8561266, 2.8120557, 5.8017036, 3.3899501, 3.3749675, 3.6431217, 1.0892514, 3.6225169, 2.8967333, 4.3033562, 3.5743987, 3.4982402, 3.1149025, 2.3937729, 4.3760731, 4.7448725, 2.1975521, 3.5528219, 2.1416862, 3.2485131, 4.4099829, 2.7861281, 2.5234690, 3.4944403, 1.8494273, 2.8579902, 2.9158367, 2.1895905, 3.5870681, 3.0879314, 4.0345519, 2.0506254, 4.8413177, 2.7391807, 2.5804362, 2.6821090, 3.3549040, 4.5469212, 1.9058571, 3.6630682, 1.8668980, 1.7935556, 3.0096299, 2.1824717, 2.3973071, 1.9284134, 2.5119362, 2.8627759, 1.2537074, 4.7452578, 1.6890902, 4.7486918, 3.2425947, 4.2115684\n\n\n\n\n4\n\n\n200\n\n\n1.7163342, 3.3961512, 3.3508282, 2.5039774, 4.6840417, 1.7388718, 2.4119315, 2.8617928, 2.0973344, 2.1290068, 3.0838036, 1.9595181, 2.4239329, 2.2075452, 2.5775338, 3.3921317, 0.3204456, 3.4629006, 3.3416441, 2.6480426, 2.3242814, 2.3658204, 2.1976661, 3.0677451, 2.6734496, 2.9459689, 3.2758985, 2.5727472, 5.6979733, 4.4121483, 3.0515411, 3.5657808, 2.2442798, 2.8411756, 2.1189565, 1.9452891, 4.0218776, 5.2161058, 3.9068794, 2.0692046, 3.7466105, 0.9048727, 3.0184510, 4.7313734, 3.8866503, 1.3898996, 4.2114470, 3.1818671, 3.6175192, 3.0604298, 2.1619366, 0.9402405, 3.6955505, 3.0629654, 2.3677511, 1.1087315, 4.3015642, 3.9787920, 4.7858164, 3.3748548, 3.9135828, 3.6184084, 4.1628526, 4.6338721, 2.4531146, 3.8241168, 1.8725589, 1.7221809, 1.7535746, 0.9253364, 3.6569145, 3.4339670, 3.5715451, 4.6249207, 4.6819166, 4.2661941, 1.2672861, 1.9829952, 2.3027015, 2.2311619, 3.1796823, 3.0096723, 2.7324376, 2.4350636, 3.3580408, 2.3852859, 4.2023372, 4.2472032, 3.9590326, 2.5610634, 3.1149327, 3.8371374, 3.2669376, 1.7471463, 5.1862870, 1.9557388, 2.1586536, 2.4014890, 4.2447406, 3.3300805, 1.9529079, 3.8841227, 3.5972757, 3.2476957, 2.6679333, 4.2667915, 3.2644636, 1.3508051, 2.6746331, 2.9296305, 2.1811953, 2.3909156, 2.6666524, 1.3167173, 1.7220197, 4.0457457, 2.8216641, 3.9428210, 3.2624007, 4.6230240, 3.2122163, 2.3820006, 2.0584235, 2.3835105, 2.0552709, 1.8885412, 1.8576204, 3.4357655, 3.1843560, 2.8095216, 2.8899896, 5.7854697, 3.5817640, 1.0424798, 3.8083765, 2.1554346, 4.2815605, 4.4691496, 3.0988933, 0.8793161, 1.6357474, 2.0181340, 3.3496876, 3.5091329, 1.3825665, 3.7306101, 3.6229595, 4.9544289, 3.4510336, 2.1901128, 3.5817777, 2.5769730, 2.3174844, 2.7497388, 3.5184649, 4.5784404, 1.6337282, 4.4608322, 3.4271655, 3.4710742, 2.2471736, 2.7938811, 2.7958883, 2.3072717, 3.4583664, -0.1945934, 1.6988172, 4.0357038, 1.6414525, 3.5970889, 4.2535352, 3.2422433, 1.6789045, 3.1877825, 4.6130923, 4.3407352, 5.3869467, 2.2066576, 3.4598220, 2.7061118, 1.1128346, 2.8470241, 2.5815477, 5.0300598, 3.1588658, 3.6022633, 3.7555937, 2.0517514, 2.2354213, 4.0315750, 3.2004044, 5.0633260, 2.8667188, 4.1450519, 3.4346506, 2.4464445, 3.2140254, 3.4815925, 2.8929998, 3.3238329\n\n\n\n\n5\n\n\n5\n\n\n3.514865, 2.496826, 2.801990, 3.761042, 2.422648\n\n\n\n\n5\n\n\n10\n\n\n3.756337, 1.923437, 3.789760, 3.183596, 2.608614, 2.016464, 3.184548, 3.021970, 1.259288, 1.951281\n\n\n\n\n5\n\n\n20\n\n\n2.9097301, 3.0219521, 4.7241506, 0.9865961, 3.4510194, 4.3233036, 2.0723322, 3.2131797, 2.9451123, 3.4573549, 3.4901806, 3.1804193, 4.4008089, 3.9546714, 3.8411374, 2.4584639, 2.7913580, 1.9523230, 2.3558973, 1.2346920\n\n\n\n\n5\n\n\n50\n\n\n1.8693174, 1.3874648, 2.4247317, 3.4950936, 3.3662180, 3.2931491, 1.0974698, 2.3823370, 2.5463785, 2.4985596, 2.6719120, 1.5921060, 2.4032878, 2.8700023, 1.8612895, 3.4592015, 3.2726076, 4.1352622, 3.7015904, 4.8641803, 5.2862061, 3.5934848, 0.8537222, 3.1169678, 2.5454646, 4.8389320, 1.7696851, 1.0894155, 3.1326362, 3.6771295, 3.0446510, 4.1009060, 1.6938610, 3.1493007, 2.9353110, 3.9367239, 2.1000665, 3.9920757, 3.8064688, 3.3679839, 2.0282479, 4.0487172, 4.5154800, 3.9712420, 3.4977031, 2.4862756, 3.1832053, 3.0918959, 3.5357808, 1.3586022\n\n\n\n\n5\n\n\n100\n\n\n3.5424784, 2.0505024, 1.8633141, 3.0459469, 3.8863753, 3.8110386, 2.4724735, 4.7324698, 4.3112077, 3.6825551, 4.0815016, 3.3063481, 2.4136442, 0.7581959, 4.8549243, 5.0943299, 2.7013019, 3.9355892, 2.7912487, 2.9668488, 4.1837299, 3.6562594, 2.6428732, 3.7113550, 3.7843589, 1.4346608, 4.3218130, 3.7581246, 2.0149076, 4.5247611, 3.6655657, 4.6137878, 4.4868591, 3.1043702, 2.9634153, 1.4831930, 3.3426438, 3.8861776, 2.1428865, 2.9647870, 2.8190044, 3.8773118, 3.1905786, 3.1496487, 3.0526628, 4.0249087, 4.5536669, 4.2838408, 3.1792383, 1.7031621, 3.4835810, 2.9739982, 2.9276736, 5.2791639, 3.0489454, 1.3798501, 4.1954034, 5.6661265, 2.0271300, 3.7062196, 3.2020413, 4.6488792, 3.4152248, 1.0550391, 3.4885526, 3.5886434, 0.6166773, 1.9883347, 1.9547028, 4.2378245, 1.7442482, 3.2433926, 2.8784131, 3.4218840, 2.3546276, 1.6379401, 3.8878428, 2.3668499, 2.4401547, 3.2486133, 2.5946249, 2.8803422, 1.1745238, 2.4222402, 5.7571769, 4.0906538, 3.0743054, 2.4457229, 1.1607396, 1.9188096, 3.3181694, 2.1005772, 3.5603829, 2.3327544, 3.0513151, 3.2026628, 1.1171509, 2.6334994, 2.3845380, 2.8517136\n\n\n\n\n5\n\n\n200\n\n\n2.3691409, 3.4615946, 1.7034097, 3.8446770, 3.3788525, 2.5161311, 3.0601320, 2.6740266, 3.4011137, 3.2903042, 3.2208011, 2.6912329, 2.8030961, 3.9755343, 2.2583128, 3.3659178, 1.6021431, 2.3799385, 4.3964791, 3.4188935, 2.6022612, 5.0251028, 2.5178152, 2.4181548, 2.2068815, 2.9168703, 3.4858629, 1.9074054, 1.5857885, 1.9761283, 4.2175867, 1.9600418, 0.6046258, 4.8618001, 3.4691953, 2.3503606, 4.1447430, 5.7604490, 2.9300919, 3.2584400, 2.9584763, 2.4588975, 4.7161840, 3.7600893, 1.8619573, 5.4472258, 1.7400079, 2.0191090, 3.0246035, 2.1033006, 4.6466718, 2.5521770, 4.2960654, 3.4080009, 3.3533659, 2.8535206, 3.4385118, 4.0051471, 3.6213592, 3.4094595, 2.7294048, 3.6628972, 1.9368317, 3.5092563, 4.5947008, 3.9618350, 2.1556249, 4.3007900, 2.8813826, 1.8816738, 1.3386454, 6.3746072, 1.6590831, 4.4208116, 3.5253409, 2.8741180, 2.5143414, 4.9964187, 4.0583367, 1.4428591, 1.5203614, 3.4129872, 3.0954934, 2.3484448, 3.3086262, 1.4415215, 3.3522097, 2.6828391, 3.4159518, 2.6343277, 2.8466694, 3.2500697, 3.1326945, 3.4400181, 3.1703828, 3.0501787, 1.8949111, 2.7663220, 4.0244025, 1.7474825, 2.7420869, 1.6420272, 1.8689042, 1.3411184, 2.0706502, 2.7942048, 3.6074724, 3.2685829, 3.8684910, 2.9417292, 3.0966923, 2.8299410, 2.7796743, 5.0701974, 2.4673680, 4.0838314, 3.3772170, 3.6957740, 4.0460294, 3.0329907, 3.5152334, 2.5278588, 2.3032073, 3.3088646, 3.6086187, 1.9449031, 1.4157414, 3.4262543, 3.5989979, 2.4981296, 1.7890128, 2.5558775, 3.1916534, 1.7464104, 1.8832654, 1.8176307, 2.2890291, 3.5064925, 2.8573236, 2.7160779, 3.5948585, 2.0893778, 2.8218961, 2.6022226, 3.6518425, 1.0204207, 3.3041408, 3.4402804, 2.1370093, 2.5823706, 2.8565004, 3.3906351, 3.1892806, 5.5506602, 2.6788334, 3.6253295, 3.5511321, 4.2413080, 0.7796717, 3.3006978, 3.1480750, 2.6231278, 4.2488419, 2.7868702, 4.1495839, 1.8637552, 5.2001700, 3.5546161, 1.7720770, 5.3480437, 3.9494513, 3.2701568, 3.4696585, 1.3766217, 2.3362123, 1.8086222, 2.2765193, 2.8778630, 2.5693908, 3.8506205, 1.9431600, 2.7628165, 1.9862709, 0.9097608, 2.1427446, 2.9710050, 3.1817432, 3.4420271, 3.5908294, 3.5504166, 3.0735125, 3.5175857, 4.4743472, 3.3671130, 1.6079031, 3.5726268, 1.5246917, 4.8732109, 3.3546180, 3.8230656\n\n\n\n\n6\n\n\n5\n\n\n3.857373, 2.135439, 2.549427, 3.124880, 3.923581\n\n\n\n\n6\n\n\n10\n\n\n3.555057, 2.391047, 2.101682, 3.550571, 3.830792, 2.925424, 2.152222, 1.900046, 3.167900, 1.282918\n\n\n\n\n6\n\n\n20\n\n\n3.041673, 3.708679, 2.381326, 2.585394, 3.673748, 1.110732, 4.434646, 4.392041, 4.760111, 3.742157, 4.011191, 2.169924, 6.496940, 3.118313, 3.804739, 3.412177, 4.373924, 4.067338, 2.187535, 3.476876\n\n\n\n\n6\n\n\n50\n\n\n2.5507814, 2.6063936, 1.9032402, 4.2744637, 3.2747231, 3.8835118, 4.5999724, 3.2905748, 1.4572807, 3.9056976, 2.4495930, 3.1111760, 2.9284150, 2.9267990, 4.0788316, 3.2560531, 2.9131466, 4.2787633, 1.2036267, 5.3668441, 3.0635793, 2.6414494, 2.8589586, 1.1310532, 1.1869943, 3.6448590, 4.5758476, 3.2058853, 3.3991010, 2.4822593, 3.4123530, 2.5828400, 2.6104294, 4.7817712, 2.0663930, 3.4439450, 3.9798415, 3.2494025, 4.1117989, 2.4338673, 4.4147485, 0.8966689, 1.9163127, 2.6296617, 3.7557620, 3.1780450, 2.4464562, 3.2271041, 2.7577385, 2.5863799\n\n\n\n\n6\n\n\n100\n\n\n1.88036700, 3.18995020, 2.33567147, 4.56672842, 5.19368825, 2.74883812, 1.77813018, 2.90380790, 2.84134585, 2.71707709, 4.31642096, 3.79102943, 3.87306285, 2.49468390, 2.41043714, 3.72222256, 3.21424043, 3.55826858, 2.81380430, 2.15266543, 2.92101825, 2.65847972, 4.77441108, 3.18740687, 3.55116916, 2.73364600, 2.17379976, 2.52746495, 3.33945925, 3.18619578, 2.08134671, 2.39989650, 3.10689523, 2.97211557, 3.80512905, 2.47755793, 2.97351029, 3.84192196, 3.04488051, 2.34798681, 1.68988550, 1.75210264, 2.79047888, 2.40423433, 5.69600943, 2.72813956, 4.63693884, 3.00496511, 4.23260031, 1.98329434, 3.02372716, 5.78390206, 3.33907851, 3.90692718, 3.34391587, 3.50614930, 3.44067939, 2.53789933, 2.56546891, 1.03713060, 1.43841424, 2.73361850, 4.34557457, 2.28573575, 2.67216023, 2.80083419, 2.69108069, 3.59733902, 2.33784719, 4.47821478, 4.31051453, 3.27727002, 3.19013359, 3.79863407, 2.24020070, 3.08047949, 3.44211882, 1.76077295, 3.87350055, 1.72994952, 3.22493598, 5.74926815, 2.31161776, 3.21744615, 0.60950803, 2.14040439, 0.09879768, 2.69490906, 1.05943355, 2.31556712, 3.59230792, 2.19066034, 3.84950618, 2.80766425, 4.10376975, 2.28061753, 2.27684385, 3.47012960, 2.70449904, 2.58926283\n\n\n\n\n6\n\n\n200\n\n\n3.73393329, 4.68196047, 3.64325675, 3.38147222, 2.51971566, 2.36701571, 2.71963295, 1.15672614, 2.17739123, 2.14946534, 3.97350957, 2.98711065, 2.73079874, 1.82297369, 4.35013905, 3.60816632, 4.55619993, 1.78702322, 2.22092560, 0.43270367, 2.98802401, 3.11237069, 2.23664950, 2.74652381, 3.41524924, 2.38601039, 2.97091854, 4.35370083, 4.09870622, 1.74659366, 3.04344846, 2.01006233, 2.53259370, 3.22792113, 4.37762086, 2.56183660, 3.01990414, 2.60548567, 2.96478221, 3.34433772, 1.85243003, 3.43334990, 1.84067901, 3.61316438, 4.37424823, 4.18144289, 3.96137430, 2.74981234, 2.78974238, 2.63399257, 3.22923034, 3.05290728, 4.91081981, 3.10937495, 1.82106407, 3.91344770, 1.02027853, 3.72813495, 2.87567883, 4.72912786, 3.45886701, 1.99363258, 4.40655133, 2.30079335, 3.62468616, 2.57851175, 3.60042348, 2.03007923, 1.75979193, 2.98490262, 1.29805931, 4.53300389, 2.82521406, 3.53397548, 5.32988324, 3.65968743, 2.03139726, 3.26467763, 1.96499055, 2.83128222, 3.54680969, 1.39305789, 5.23215675, 3.02787641, 3.94303841, 3.21542923, 1.89890499, 4.11185116, 1.85174474, 3.80790487, 2.62606129, 4.33940552, 3.81346139, 4.39377419, 3.02015856, 4.44280058, 4.13330739, 1.46962213, 3.98108916, 1.88317315, 3.41367576, 2.95271163, 2.65869230, 3.27657763, 3.99003778, 2.08371230, 1.95819902, 2.35579112, 3.44209611, 2.55864563, 3.53627879, 2.62675394, 3.93140188, 2.64470865, 3.02819799, 2.60983467, 2.90294980, 1.70860190, 0.13900450, 2.89737081, 2.68349411, 2.34608860, 1.87396303, 0.56338643, 2.60797501, 4.67863694, 2.53089725, 1.48783173, 2.20996177, 1.70537898, 1.82158893, 0.21932804, 4.86740343, 3.28165845, 2.22419358, 5.10198865, 3.38164896, 4.49053601, 3.35728354, 5.06007863, 3.60383910, 3.70706370, 3.83450625, 3.83582815, 1.92917204, 3.15368483, 3.74788808, 3.39659320, 2.67780991, 0.79726743, 3.19241453, 3.15041461, 3.65420665, 3.05019117, 1.88303933, 2.64342340, 1.56478318, 3.57935339, 2.61036033, 2.04544074, 3.02541011, 2.48550983, 3.93567809, 3.31990557, 1.94808952, 4.59650913, 5.48889291, 2.64809477, 3.27752415, 4.76266995, 3.17105275, 2.75527776, 2.54738982, 4.20886579, 3.19294879, 2.17824609, 2.72281982, 4.06718120, 4.07408325, 0.08067596, 4.04741184, 2.69277374, 2.61910689, 3.98210490, 2.59207901, 1.79527185, 2.69231860, 3.22060487, 2.51963125, 1.45218253, 3.23496708, 1.43878066, 2.75476689, 2.71199756, 4.51966528, 4.57833378, 2.58049385, 4.21498055, 1.09504235, 1.13872264\n\n\n\n\n7\n\n\n5\n\n\n1.784439, 3.425535, 2.607335, 2.290123, 3.700212\n\n\n\n\n7\n\n\n10\n\n\n2.281392, 4.148653, 3.270487, 3.337361, 2.654422, 3.692596, 2.109511, 1.995323, 3.338848, 3.269357\n\n\n\n\n7\n\n\n20\n\n\n1.8538786, 3.3201825, 1.5001087, 3.1003889, 1.7052349, 0.7408349, 3.9399591, 3.2533202, 2.3022738, 3.4578910, 4.8238340, 3.7144290, 3.9670851, 1.2297934, 1.8101826, 2.1634817, 2.4122741, 2.4489576, 3.4778975, 3.7623009\n\n\n\n\n7\n\n\n50\n\n\n2.274531, 1.012113, 4.158104, 2.941542, 3.725134, 1.706992, 3.821471, 4.820068, 3.497656, 2.449385, 1.649862, 3.405322, 2.374651, 3.315736, 2.388509, 2.974580, 1.411078, 3.124356, 3.231405, 3.118886, 3.193474, 3.239365, 1.234845, 4.723001, 2.161363, 3.833976, 2.109167, 2.491098, 3.345267, 3.895823, 2.914802, 3.054682, 3.371297, 2.850672, 2.912230, 3.074439, 3.188087, 3.692086, 1.912902, 2.764625, 2.987699, 2.594962, 3.112898, 3.762646, 3.543479, 3.670860, 3.107984, 1.649068, 3.144848, 4.697430\n\n\n\n\n7\n\n\n100\n\n\n2.6815533, 4.5553995, 2.9717382, 4.3238734, 0.9177539, 3.1547203, 2.4644775, 2.0413514, 4.1958137, 2.7723466, 4.5121933, 2.7179832, 2.2150723, 2.3375132, 0.5325480, 5.4723348, 3.6104933, 3.7027587, 3.3242890, 4.4716504, 3.3487155, 2.7000826, 1.7707555, 2.2652691, 3.3547820, 2.9780414, 4.0629846, 3.2797300, 2.0127410, 2.8648111, 2.9592843, 3.9684700, 3.3496193, 3.3114045, 2.7583088, 2.2310100, 2.2540417, 4.8417704, 3.0492012, 2.8494407, 4.1653644, 3.8157019, 3.6837652, 1.8991152, 3.9288021, 3.6607297, 4.3828736, 2.9162287, 2.1809123, 4.6346291, 3.4808300, 3.1424640, 0.9080187, 2.6660833, 1.0264960, 2.5813904, 2.8263098, 3.8828336, 3.0852200, 2.2999384, 3.7738867, 3.4649387, 2.1735458, 3.6290068, 4.3639401, 3.5808685, 3.5629061, 3.3783165, 2.7223252, 4.0064456, 2.8510026, 2.9174683, 2.4313076, 3.5379147, 3.1651505, 2.0945570, 3.2369231, 1.9567597, 2.0365881, 3.3317287, 1.9940546, 2.1652808, 3.9603432, 3.2968671, 3.0883340, 3.0787816, 1.8077141, 3.2311619, 3.4467849, 4.7744130, 2.9727681, 2.7436558, 3.3729647, 2.1524756, 2.6638488, 3.7540602, 1.6245216, 1.7810988, 3.5558631, 2.3896518\n\n\n\n\n7\n\n\n200\n\n\n2.6684953, 2.7449668, 2.5450476, 2.0814302, 2.1549271, 3.2600193, 1.7477039, 1.6907008, 4.6951846, 2.4885283, 1.8385929, 2.3362895, 2.1820037, 3.9393350, 1.8648712, 2.5582323, 3.2061223, 4.0463628, 2.0575801, 2.6600847, 4.9495710, 2.8005334, 3.5099790, 3.0243812, 2.7817274, 3.6016753, 2.0083182, 4.2052181, 3.1339434, 4.0379753, 2.9782949, 3.3893521, 3.0000630, 1.8342067, 2.4390181, 2.3933467, 2.1721250, 2.5566816, 2.3131930, 2.9886462, 3.2628833, 3.7395630, 2.2403084, 3.5811021, 3.0638420, 3.3843320, 3.4057564, 3.6032605, 2.8958945, 3.0401522, 3.2984778, 1.7825456, 3.3223627, 3.5641642, 3.4877967, 2.1283637, 3.2705308, 3.7952305, 3.4926742, 3.9737311, 1.6776325, 1.9138826, 1.4330920, 3.9498198, 2.5905205, 4.5449403, 2.9841710, 2.1137398, 0.7894195, 1.3665774, 2.8015911, 2.9901314, 3.1076983, 3.1724568, 3.4064384, 1.6652265, 5.0849698, 2.9748161, 3.2488559, 2.7561271, 4.6524786, 3.5468039, 1.6284471, 3.4587270, 3.6315341, 2.3352255, 2.8695663, 2.8720178, 2.7766775, 2.4209318, 2.1723557, 1.5387116, 2.7233221, 3.6227457, 2.9937857, 1.6252613, 3.4464239, 4.5358761, 4.3874595, 1.5190020, 1.9774374, 1.1710354, 3.1463447, 2.6844014, 3.4486288, 4.5383567, 4.5610453, 3.8958300, 2.3091666, 3.0757045, 1.7339341, 2.5214528, 2.3807543, 3.0285214, 2.8019795, 2.8734932, 3.2851845, 1.3224775, 1.3837000, 3.3151321, 3.6178192, 3.1441947, 2.4429099, 1.0245032, 0.8017219, 1.1827863, 3.9605172, 3.4734985, 3.6641105, 3.6634675, 4.7129905, 2.6684156, 2.8274764, 3.8612166, 1.4487904, 1.0461252, 5.9260342, 4.3330259, 3.2510725, 2.0684906, 3.7228017, 4.2789173, 1.9742356, 2.6145690, 2.2296175, 2.1497264, 2.4805859, 2.6700157, 3.0012938, 3.0849785, 1.7077626, 2.0107813, 4.5610816, 2.8267583, 3.6983025, 2.2654446, 2.1541095, 3.7888566, 1.8267106, 3.0329989, 2.9349640, 2.7215525, 3.3138910, 3.3141232, 3.4033115, 1.7955512, 1.5538503, 2.7477803, 3.5944438, 3.0137799, 5.2973521, 3.3305509, 3.5469440, 5.0998098, 3.4326358, 4.9299922, 3.7682293, 2.5585261, 3.8446698, 2.2481016, 3.4085634, 4.0270367, 4.7861955, 2.0266725, 1.3400736, 2.4337767, 3.9175061, 3.4573577, 1.5484192, 2.1485302, 5.0461990, 3.2341182, 3.2508127, 1.8810627, 2.9418827, 1.9365790, 2.8452876, 2.6624319, 2.0043633, 3.5281593\n\n\n\n\n8\n\n\n5\n\n\n2.004934, 3.689313, 3.389629, 2.947193, 4.429955\n\n\n\n\n8\n\n\n10\n\n\n1.624963, 3.075205, 3.557014, 3.943199, 3.040518, 2.900226, 3.721206, 3.025835, 4.533266, 2.815536\n\n\n\n\n8\n\n\n20\n\n\n4.076140, 3.865134, 1.419946, 4.336642, 1.820648, 3.659239, 3.281850, 3.333089, 3.577051, 1.636255, 3.168620, 3.520283, 1.520136, 2.902149, 2.418033, 3.749285, 2.623743, 3.884402, 2.625476, 3.067929\n\n\n\n\n8\n\n\n50\n\n\n3.3485143, 2.4330262, 4.7596979, 2.7687801, 2.6925846, 5.7234599, 3.5689054, 3.9397138, 3.2673769, 1.9667307, 1.8314404, 2.4299243, 2.8534856, 2.1112887, 2.2857371, 3.7407354, 2.2548861, 2.4291010, 3.7841166, 4.1271331, 2.6284570, 2.1896332, 3.8820717, 4.2668340, 5.0518011, 3.2859405, 3.7037961, 2.2645543, 2.0122164, 1.8629817, 1.6614845, 2.9456847, 2.7546619, 4.0361726, 2.6447761, 2.7645141, -0.5113484, 2.6762678, 2.1695174, 2.5512186, 3.3191037, 1.3662882, 2.5171693, 1.8241169, 4.2463000, 1.9264563, 2.4332524, 4.1478352, 2.8239746, 1.5738880\n\n\n\n\n8\n\n\n100\n\n\n3.41894937, 3.67395189, 3.05987283, 2.54336315, 4.71816219, -0.18867570, 2.66616545, 2.75888957, 3.47518847, 1.79218040, 2.30905258, 2.16365649, 2.85234043, 4.69466028, 3.26289188, 3.59715411, 3.23483272, 3.11905761, 2.57897996, 3.94383070, 3.11375190, 2.62982158, 2.54476848, 1.59926016, 0.09613864, 3.45562866, 3.11429993, 1.62398545, 3.02091800, 4.08115663, 3.14155335, 3.33593289, 2.52658813, 2.85116181, 2.81800709, 4.19061897, 2.50524409, 2.34258290, 3.39719425, 3.40408406, 1.97444586, 3.90554184, 2.84203542, 1.26890339, 2.72787575, 2.05229073, 3.88423623, 3.16893922, 4.31642602, 4.97403171, 4.55008797, 5.28719867, 2.31453762, 2.37380172, 2.00152285, 4.59846097, 3.05947191, 2.98924933, 2.58554895, 3.09194462, 4.14980710, 3.63193297, 3.29311727, 3.60234598, 5.08779503, 4.20167939, 2.28564782, 2.92728676, 2.46366702, 2.67784434, 2.40774487, 3.47571987, 3.12039114, 3.81535398, 2.08110349, 3.11585143, 3.91924153, 3.82368349, 2.12928558, 4.94568193, 3.33846183, 4.49426228, 3.51220702, 2.46029952, 3.95101271, 3.31656835, 2.45236682, 1.59336594, 3.20692881, 0.65082393, 1.82400380, 2.63037230, 3.50932725, 2.16121699, 2.60985603, 4.65552459, 3.35800597, 2.61420448, 2.42765106, 3.42361832\n\n\n\n\n8\n\n\n200\n\n\n3.4222120, 2.4994149, 2.0769448, 3.0383510, 1.3148609, 2.3364638, 3.9981314, 3.9718259, 5.2873863, 2.6580312, 3.5865771, 2.7988283, 3.3726440, 3.2124754, 3.3600393, 4.3050056, 3.0598209, 3.4867205, 2.6031015, 3.8577485, 4.9316891, 4.7682692, 2.2309121, 2.9151645, 2.5087444, 2.1761907, 4.0635784, 2.4648309, 3.5291880, 2.7835631, 1.9737979, 2.9989440, 2.5393561, 2.9453421, 2.0497875, 0.7558778, 2.4068619, 2.9983305, 4.4268377, 2.9520616, 3.3379465, 5.2809400, 1.4308765, 3.7631378, 3.5250826, 3.8224378, 3.2630117, 2.6336988, 3.3048362, 1.8354025, 2.4343674, 3.7734258, 5.0064385, 3.0168254, 2.7678844, 3.2392344, 4.3901194, 3.5743711, 4.9073614, 2.2860365, 3.6755673, 3.1561874, 2.3925843, 1.6816518, 3.7209405, 4.8064796, 0.2519978, 3.0828001, 3.5295908, 4.4120975, 0.7197038, 3.4262093, 3.0102900, 4.7998269, 3.1767298, 2.0982753, 2.9356396, 3.8838514, 4.5841698, 2.2439889, 2.7159778, 2.1659432, 2.7004782, 1.3320379, 4.9935558, 3.3057765, 3.4963488, 3.4564450, 2.7865863, 4.3894716, 3.5816682, 3.5060812, 5.0397004, 3.5936918, 2.3485897, 2.7561850, 3.1382654, 4.4627557, 4.4292138, 3.9321844, 2.8093103, 1.7664323, 2.9128434, 1.7696614, 3.9309460, 3.3978318, 1.5504353, 2.4522592, 3.0556474, 1.3989993, 4.5928231, 1.8580498, 3.3653705, 3.5250610, 3.4074559, 4.3781845, 2.6911791, 2.5118876, 2.7220431, 3.9959931, 4.2021348, 1.9373845, 2.3111750, 1.1426125, 5.1881843, 3.2684239, 3.8651656, 2.6638030, 4.3369656, 0.4332538, 4.4407203, 3.1209195, 2.5088825, 3.2472727, 3.5025505, 1.2676631, 3.0677601, 4.1871768, 3.2495318, 3.0270054, 4.7182483, 3.2988675, 2.5521919, 0.5097017, 2.6504411, 1.6771459, 3.5243807, 4.2131331, 2.6705844, 3.2459036, 2.3014929, 1.3598107, 3.3909625, 3.1946703, 2.6224372, 3.8846187, 1.5104592, 3.7280737, 4.2747149, 1.2559937, 4.0432335, 1.5020244, 3.1444217, 2.7906503, 4.1267153, 4.1705354, 4.2547696, 3.1719823, 2.6179487, 3.7745569, 2.2220051, 3.1284500, 2.7411785, 2.9324279, 4.2059585, 3.0659243, 2.3056847, 2.4420556, 3.2420412, 3.2812275, 3.0746571, 1.7711069, 3.2558792, 2.1476272, 2.1187299, 2.9643940, 3.7521140, 3.3991569, 1.4458222, 3.8856686, 2.7603192, 4.2941620, 4.4042632, 3.3036852, 3.2449231, 3.8776553, 2.8033350, 3.7470676, 2.5336997, 4.6773749\n\n\n\n\n9\n\n\n5\n\n\n2.947122, 4.009749, 4.207931, 2.702934, 3.526765\n\n\n\n\n9\n\n\n10\n\n\n1.416448, 2.750774, 3.296206, 1.364698, 2.900794, 3.248246, 1.203691, 2.548896, 2.898212, 4.196909\n\n\n\n\n\n\n\nNow that we have our data, we can compute the mean and median for each sample.\n\nCodedf$mean <- map_dbl(df$data, ~mean(.x))\ndf$median <- map_dbl(df$data, ~median(.x))\n\n\n\n\n\n\n\n\n\ntrial\n\n\nsize\n\n\ndata\n\n\nmean\n\n\nmedian\n\n\n\n\n\n1\n\n\n5\n\n\n5.287247, 1.803228, 2.305707, 2.587707, 2.029327\n\n\n2.802643\n\n\n2.305708\n\n\n\n\n1\n\n\n10\n\n\n2.052720, 3.748139, 2.883045, 3.152658, 5.189978, 3.356986, 5.716752, 5.281452, 3.324021, 4.896067\n\n\n3.960182\n\n\n3.552563\n\n\n\n\n1\n\n\n20\n\n\n3.467681, 2.106199, 2.692672, 2.995178, 3.988164, 3.839750, 3.705342, 4.305965, 1.612004, 4.272917, 3.184193, 3.752280, 3.591745, 2.016947, 2.723936, 2.129149, 3.718711, 3.110653, 2.921533, 2.579510\n\n\n3.135726\n\n\n3.147423\n\n\n\n\n1\n\n\n50\n\n\n2.437874, 3.997513, 1.894870, 2.857712, 3.314995, 4.218551, 2.300683, 2.714567, 1.688447, 2.608988, 2.598473, 4.350518, 3.591190, 3.100525, 3.931072, 2.737258, 2.992332, 3.367153, 4.707163, 3.723740, 3.481036, 1.432132, 3.318250, 3.165991, 2.100092, 3.076371, 3.159155, 3.543674, 3.704807, 3.318969, 4.109250, 3.769154, 4.153474, 4.260684, 3.700624, 3.432627, 2.077398, 2.384416, 2.133340, 1.360483, 1.674161, 2.110963, 2.442398, 2.937598, 5.422693, 3.342585, 3.004248, 3.029220, 2.606577, 2.207295\n\n\n3.071866\n\n\n3.088449\n\n\n\n\n1\n\n\n100\n\n\n2.6882981, 2.6539314, 2.6953924, 1.2141065, 3.5872747, 4.6357944, 2.3545765, 3.6189922, 3.2363936, 3.8465009, 2.4263543, 4.1179932, 1.4599989, 2.5618761, 2.8493270, 3.5190584, 3.5875397, 2.9206669, 1.8256390, 3.3087221, 1.3961215, 3.9912896, 4.0232204, 3.8401454, 3.1200786, 2.5737449, 3.4589262, 3.6450479, 3.6115305, 2.1107887, 4.5438923, 1.7582364, 4.1034473, 3.9827724, 3.3043272, 1.4452818, 4.5698908, 3.6884497, 2.8223963, 3.7292013, 4.5332509, 3.5065784, 3.0333277, 1.5324493, 4.0191577, 2.4066607, 3.8124099, 3.8661678, 3.3683083, 4.1348191, 2.2429007, 3.4452206, 3.9159329, 3.2697587, 4.0075404, 1.5385667, 2.1252144, 3.1652289, 3.2072070, 3.4823619, 2.9283416, 2.1110716, 3.4859436, 3.3404968, 1.9020758, 2.6443056, 4.0973004, 2.0933080, 2.7925434, 3.6788614, 2.2022123, 1.4084611, 4.1803481, 4.2225693, 2.9890908, 3.3455225, 3.0941892, 3.0067934, 3.7426229, 4.0421865, 2.6806629, 3.3226434, 3.6850530, 3.3202428, 1.0850620, 0.6600371, 3.4828643, 4.1785300, 1.7072230, 3.6157731, 3.2560421, 3.7278390, 4.3241109, 3.1471585, 2.4014606, 5.1925299, 5.3271128, 4.1348696, 2.8091154, 3.4748446\n\n\n3.162817\n\n\n3.321443\n\n\n\n\n1\n\n\n200\n\n\n2.45452506, 4.05564854, 3.42902183, 1.18004359, 2.30802391, 1.06817175, 4.20967201, 2.72099995, 1.90421677, 2.89781396, 3.35702296, 2.11769743, 2.94335221, 2.41898105, 3.64408819, 5.02334405, 3.86249250, 2.97509051, 3.60063495, 4.21648074, 1.82346845, 2.39065997, 3.38726257, 1.60085986, 4.23249185, 3.01550750, 1.37904095, 2.33453534, 2.42515949, 2.09810702, 4.49159937, 2.86272068, 3.10828170, 1.96478490, 2.55525608, 2.80395073, 1.73063551, 3.95352118, 3.47254665, 2.44122190, 4.24206456, 2.98474153, 2.20821161, 2.59838126, 1.10329871, 3.97197493, 2.48604514, 3.01456167, 2.73906443, 4.52235839, 1.52663025, 2.98344199, 3.02454061, 2.99874301, 2.56606729, 2.59444094, 3.15523332, 2.02761818, 4.54817493, 2.62987667, 4.96152526, 2.39000442, 2.92257124, 1.17114074, 3.80592424, 1.52240822, 0.02674429, 1.66023786, 2.73415797, 2.61600659, 2.39705767, 2.34847596, 4.75767151, 2.98096513, 3.15528461, 2.23915356, 1.45027309, 5.75016501, 4.04742325, 3.91799247, 3.47010951, 2.38262791, 3.04210627, 2.09810110, 4.33958321, 3.80385435, 3.31847865, 2.80954669, 1.91273331, 3.14539973, 5.46280025, 3.92361969, 3.74187669, 4.41602179, 4.25166337, 5.10890569, 3.71031260, 1.52481799, 2.41027352, 3.13970325, 2.48827577, 3.15093735, 3.44203940, 2.83760088, 3.97183854, 2.32873452, 4.63839716, 1.93172732, 2.98858788, 1.13471866, 3.01825086, 2.75297945, 2.08057489, 0.82683557, 2.35062295, 3.52526155, 2.72427269, 3.05470977, 2.61175039, 2.58297695, 1.83582483, 4.73786414, 2.74592265, 2.02628138, 4.11119895, 3.97349906, 4.25712868, 4.77628758, 0.31683148, 3.65986308, 4.17944967, 3.39351378, 1.81014133, 2.64347263, 1.53449196, 1.90926985, 2.34274578, 5.26294100, 3.08769003, 3.76752300, 2.38684254, 3.15250297, 2.40829255, 2.03929503, 2.41504201, 3.65667289, 2.70975041, 3.90409773, 3.19902022, 2.94842519, 2.09179482, 1.85752166, 3.99032494, 3.11227328, 4.14963167, 2.08950468, 1.89618028, 1.36513269, 1.38361751, 2.16326299, 4.09299912, 4.23509818, 3.17206660, 3.12049317, 3.55753267, 3.49138316, 2.93098738, 1.64920369, 3.79935757, 2.67990592, 2.64304881, 2.48927206, 1.12111992, 2.04815491, 5.27315661, 3.20268763, 0.69144530, 2.94336434, 3.06284384, 3.71022814, 2.40769260, 3.29852463, 3.64253563, 5.11279510, 3.91777963, 1.42714525, 3.99264173, 3.47952087, 2.70341944, 3.81584023, 2.00022839, 3.54921029, 3.27977120, 3.91663589, 1.26874274, 1.52041893, 5.22981103, 3.38649895, 3.66026569, 2.72376479\n\n\n2.956160\n\n\n2.945895\n\n\n\n\n2\n\n\n5\n\n\n3.2759330, 0.7257688, 3.9080857, 1.9137469, 2.7844733\n\n\n2.521602\n\n\n2.784473\n\n\n\n\n2\n\n\n10\n\n\n2.266573, 3.212118, 2.060858, 2.380806, 3.244011, 3.371743, 3.627208, 1.926886, 2.291307, 3.907132\n\n\n2.828864\n\n\n2.796462\n\n\n\n\n2\n\n\n20\n\n\n2.6802944, 4.1650659, 2.3782895, 4.2482132, 4.4404015, 3.7619934, 3.5593712, 4.5992638, 2.9015423, 1.5504462, 2.7423387, 0.9669287, 3.5869642, 3.1605865, 3.1131529, 3.5716906, 2.0344703, 3.3180012, 2.8264924, 2.0873888\n\n\n3.084645\n\n\n3.136870\n\n\n\n\n2\n\n\n50\n\n\n1.153105, 3.669518, 2.891213, 4.566575, 2.155155, 4.097649, 3.300880, 2.223034, 2.961566, 4.109490, 3.536325, 2.636652, 2.894499, 3.333875, 3.810231, 1.316305, 3.665728, 2.207612, 4.527723, 1.513308, 2.328851, 4.675177, 3.611932, 2.767794, 3.605293, 1.840894, 1.835571, 2.130075, 2.738894, 2.505804, 1.694177, 5.023413, 2.244351, 2.758405, 4.097159, 2.053387, 1.866040, 2.116616, 3.516413, 2.662045, 2.977548, 2.897949, 3.300409, 3.806620, 2.962794, 1.543524, 2.376109, 2.830402, 4.276123, 2.744086\n\n\n2.927166\n\n\n2.860808\n\n\n\n\n2\n\n\n100\n\n\n2.8346317, 2.5726789, 2.9431273, 1.5546164, 4.8828070, 3.1168900, 3.4211327, 4.5774044, 2.7486115, 2.9443757, 2.9774681, 5.3309610, 2.9011697, 3.1664316, 2.7303646, 3.8444736, 4.4087677, 1.4337638, 3.1690382, 1.4943208, 3.9949329, 4.2439084, 2.9637432, 2.5887441, 4.2841490, 1.8821923, 2.1649303, 4.5008117, 3.8991509, 2.5435879, 2.7939842, 2.4121564, 2.3145471, 4.0048242, 2.2273509, 1.0062663, 2.0907455, 2.4368439, 1.7821444, 1.1796821, 2.6003707, 5.1183683, 4.4151575, 3.5647651, 1.9187028, 2.0580239, 2.7558166, 4.0854886, 3.5583438, 0.8237716, 3.8773012, 3.8425353, 2.9484160, 2.3098786, 1.1610172, 3.2830379, 0.7474099, 3.7343502, 3.1458057, 2.3505714, 2.4387756, 3.3347920, 3.0320184, 4.2369172, 3.0564134, 2.8545673, 2.4076504, 1.7392870, 2.3163942, 2.8365628, 2.5615265, 2.4212970, 4.5810904, 4.5406613, 3.7029810, 2.9362514, 2.2593760, 1.9660528, 2.7039363, 1.5570503, 2.9728083, 4.5613930, 2.0089218, 3.0041940, 2.9551952, 2.3113463, 2.8697454, 3.1550928, 4.2773416, 4.0535482, 2.6282835, 2.8968675, 5.4980736, 2.2227391, 3.7573846, 3.0225450, 1.3499685, 2.1108838, 2.3916303, 2.7869371\n\n\n2.949854\n\n\n2.883306\n\n\n\n\n2\n\n\n200\n\n\n4.4712113, 3.4663885, 4.8183584, 4.9233962, 2.4609964, 2.6137212, 2.1381923, 2.5979934, 3.5989628, 3.0818373, 3.3310258, 2.5387531, 3.3590392, 2.4842088, 3.5872762, 4.6196110, 3.4452312, 4.2552612, 2.4250934, 3.3160895, 0.8121294, 5.3721013, 3.9765799, 3.6144518, 2.6847373, 3.2310379, 5.0754801, 3.6526849, 2.9626037, 2.2936085, 1.7721683, 3.1341585, 2.6267665, 3.0390604, 3.1431243, 3.1049473, 3.6021957, 2.8816045, 3.5591695, 3.0418614, 3.0636211, 4.4662037, 2.5273691, 3.1634745, 3.3063502, 3.7925762, 2.0509232, 3.9047870, 2.6598896, 4.5310075, 3.3894034, 3.4959820, 3.6448587, 2.9562352, 1.6431313, 3.5914394, 1.0117028, 3.9186111, 2.2712175, 2.7793923, 3.3043540, 3.9926521, 2.9267322, 2.9882560, 4.0048726, 3.2533434, 2.0013965, 2.1985930, 4.1808544, 3.8229147, 3.9488901, 1.7478035, 1.4130252, 2.9784231, 1.8325981, 2.4516226, 1.9588791, 3.0147900, 1.4106007, 1.8228845, 3.7860374, 4.8980149, 2.5862019, 3.6776653, 2.1427547, 2.8789413, 2.2828294, 2.5392775, 2.9459693, 4.8482138, 3.5799736, 3.0891623, 3.9692474, 4.0389265, 2.3749993, 2.9423099, 2.1560368, 3.1875532, 2.5682157, 1.1942029, 2.8283227, 2.2625034, 2.9965397, 2.9206258, 2.8040684, 1.3295267, 2.0698512, 2.2467431, 2.8882962, 2.5293070, 2.1340760, 1.4287556, 3.5310695, 2.6139270, 1.5563502, 4.0796788, 3.3756376, 2.0071300, 4.0982031, 2.3521521, 2.9948101, 2.8644936, 4.2993083, 1.0984440, 4.2119189, 2.4081217, 3.3380150, 4.4366194, 3.4033307, 2.2535110, 4.3431232, 2.8146054, 3.9726011, 3.9211635, 2.9477696, 1.5649822, 4.0510527, 5.2405947, 3.7003835, 1.8269189, 2.5049930, 3.2786766, 3.7157131, 0.8367070, 2.5479963, 2.0247102, 2.4633039, 3.3083875, 3.4217938, 3.4386619, 2.0136053, 2.3334876, 3.2542884, 2.1949325, 3.3629507, 3.7519038, 2.0610404, 2.6878049, 2.9188225, 3.6210392, 3.3736386, 2.5762633, 2.7108783, 2.6170364, 3.9187120, 4.0170490, 3.6795118, 4.3614973, 2.7761955, 3.6014453, 2.8579245, 3.6139005, 4.0570122, 5.9614931, 3.6459387, 3.3482272, 1.9481373, 3.4999391, 2.8656461, 1.7816658, 4.9838025, 1.2559068, 3.3220384, 1.0206524, 3.7251298, 2.6158280, 2.9391138, 1.5464312, 3.1089980, 2.8583717, 4.5959384, 4.4549930, 2.9315214, 2.6788520, 2.9814002, 1.6783025, 2.7422002, 3.4730513, 3.9221774, 2.1461390\n\n\n3.049498\n\n\n2.995675\n\n\n\n\n3\n\n\n5\n\n\n1.0747243, 4.5615640, 1.9949502, 2.5591799, 0.8516282\n\n\n2.208409\n\n\n1.994950\n\n\n\n\n3\n\n\n10\n\n\n3.048287, 2.778905, 2.673316, 3.400211, 1.967065, 1.463854, 4.601259, 3.387260, 3.895125, 3.499271\n\n\n3.071455\n\n\n3.217773\n\n\n\n\n3\n\n\n20\n\n\n2.4285227, 2.3395377, 2.7488436, 3.2524397, 3.2276578, 3.2738653, 4.0710747, 2.7178398, 0.6195107, 3.5952696, 2.9578908, 3.6323426, 4.1449626, 1.9183443, 3.0223513, 3.1286965, 2.4501342, 1.6139560, 2.8583713, 2.0375426\n\n\n2.801958\n\n\n2.908131\n\n\n\n\n3\n\n\n50\n\n\n3.8046061, 1.7389417, 2.4324046, 2.4069112, 2.3684307, 3.9753758, 3.7230437, 3.7287052, 4.6498268, 3.6135468, 4.0717187, 3.9209338, 2.6941869, 2.9706652, 2.9164413, 2.8974315, 1.9216091, 3.9951739, 3.8619505, 2.3248371, 2.6893307, 2.3994889, 1.9630793, 4.1066661, 3.1823144, 3.0297148, 3.4639882, 2.7645436, 2.5417248, 1.5961892, 3.0482292, 2.5052983, 3.1519455, 2.7919992, 3.0458618, 4.9481276, 2.8886585, 2.0411453, 2.2232450, 3.0789227, 1.5290028, 2.6367495, 1.9999055, 3.5540651, 4.9393684, 2.5539007, 3.6313644, 0.3785456, 3.2908147, 1.9487786\n\n\n2.958794\n\n\n2.906936\n\n\n\n\n3\n\n\n100\n\n\n4.0267448, 2.4347065, 3.0706354, 1.8619552, 2.1051051, 2.4159778, 2.2276860, 3.2198606, 4.2963880, 4.1106416, 2.3727025, 4.6175100, 3.7231870, 3.3952936, 1.9038731, 3.9842807, 2.1291319, 0.7617531, 3.9220697, 2.2509084, 3.6855175, 5.0565703, 1.9029950, 2.5308079, 3.1848184, 1.6005643, 3.0330627, 3.0296827, 2.1690749, 3.0171374, 2.3909994, 1.4421590, 2.8371608, 2.7534749, 2.8547618, 3.5765834, 0.5694954, 1.1923891, 2.7431577, 2.1169319, 1.9697289, 1.4216196, 2.9587375, 4.5703574, 1.2041289, 1.9937968, 2.9218875, 1.5531351, 3.1154095, 1.7936482, 4.9214755, 2.8949295, 2.5121010, 1.7239873, 1.7129663, 1.6588592, 3.3965378, 3.5308406, 2.1060778, 4.0638238, 2.9288794, 1.0274889, 3.8229956, 2.9489243, 4.6103621, 2.8593775, 3.5027458, 2.3368797, 3.9059765, 3.3097038, 2.9642133, 4.1090774, 3.3954192, 2.1599487, 4.1834967, 3.1524552, 4.5397408, 3.5094389, 3.0603497, 2.7083975, 4.3067560, 3.0184312, 2.4475454, 2.7512634, 3.5456570, 3.2623655, 3.1965461, 4.4158751, 2.4468998, 3.4643230, 2.4960860, 3.2934396, 2.2344831, 5.9669187, 2.5541070, 2.6097323, 2.8106454, 3.9297801, 1.5020411, 2.7621832\n\n\n2.905928\n\n\n2.908409\n\n\n\n\n3\n\n\n200\n\n\n3.3379816, 3.0467376, 3.5856568, 4.6881144, 2.9882412, 3.8726926, 4.9507921, 2.2179698, 3.1656292, 3.0616127, 2.9423149, 2.0744901, 2.6901850, 2.9727262, 4.0697656, 2.6710079, 1.8654389, 2.8375546, 1.8670523, 3.3272469, 1.8216279, 4.0887857, 3.7945111, 3.2769436, 4.1882102, 2.0985893, 4.1767634, 2.3121987, 2.9017401, 0.6995816, 2.6310833, 2.1461711, 2.5735019, 2.6055313, 2.3392725, 3.5565659, 4.2165840, 2.4282726, 1.3777620, 3.9605101, 3.3559599, 2.7266119, 4.4954292, 1.1048459, 4.3405233, 4.2465863, 2.2344911, 3.2161769, 2.6356327, 2.1793273, 3.5823607, 1.7455905, 1.4644593, 2.3608079, 3.9028003, 1.0813524, 2.9920942, 3.7360488, 3.8347558, 4.2006599, 2.0251797, 3.1578320, 3.6828930, 3.4354898, 3.6446918, 4.2536940, 3.4351071, 3.6951262, 3.3481487, 3.4263386, 3.9004165, 2.7830213, 3.4770821, 4.4557338, 2.3610055, 2.0883887, 2.1229056, 3.4073771, 1.2205407, 3.7718883, 2.9473680, 1.9577641, 2.6836830, 1.9353318, 2.7912719, 2.4061728, 1.4001696, 4.7920980, 2.7025164, 2.0886113, 3.5193641, 3.4665924, 3.7529639, 3.3625808, 3.6445837, 4.8089620, 2.5149883, 4.7129001, 2.6400966, 2.7897778, 3.8286028, 2.2471501, 3.1699194, 2.4675223, 1.2139572, 2.0048085, 4.2639231, 3.3735465, 2.8712022, 1.3690783, 1.2301025, 1.8408825, 2.4633109, 2.5279638, 2.2077192, 3.3804254, 2.2987340, 0.9632190, 2.0159687, 3.5687473, 2.4107160, 2.6069591, 2.3379330, 2.2647634, 4.7508700, 2.1508180, 4.8035604, 2.9215948, 1.8838999, 2.9627230, 1.3184766, 3.0004679, 2.7376545, 3.8483555, 3.1799709, 2.9088631, 2.8585798, 3.4850146, 2.7303344, 2.0311355, 1.8765016, 6.1393687, 2.0304541, 1.1624620, 1.7204242, 5.1641666, 5.4209916, 5.2109649, 3.9116650, 3.8978615, 2.2806115, 2.2426713, 1.1898476, 2.3905190, 2.7221135, 2.5300610, 3.6211107, 4.5201590, 3.9518112, 2.4877154, 3.9611690, 1.5032409, 2.7716587, 2.0895720, 3.9192839, 3.8641317, 2.6356586, 3.5662045, 2.1490408, 3.2971417, 3.2662161, 1.7114598, 3.7481715, 2.5776729, 1.2499376, 3.9234398, 2.1178963, 3.5202904, 2.6368864, 3.5266851, 4.3277226, 4.1275526, 3.9812273, 2.9276576, 5.0384100, 2.7966574, 1.7282428, 2.5984431, 2.6102377, 2.5112881, 2.4589464, 2.0001536, 3.1825102, 3.4826075, 3.9767062, 2.3317354, 2.8121231, 4.6023773, 3.8168615, 1.9140217\n\n\n2.978534\n\n\n2.886471\n\n\n\n\n4\n\n\n5\n\n\n2.577562, 1.123664, 3.495275, 2.719760, 4.720884\n\n\n2.927429\n\n\n2.719760\n\n\n\n\n4\n\n\n10\n\n\n2.702431, 4.166489, 2.750906, 4.090724, 2.774019, 2.651594, 3.167391, 1.799999, 2.749191, 3.163844\n\n\n3.001659\n\n\n2.762463\n\n\n\n\n4\n\n\n20\n\n\n2.8900482, 3.4663823, 2.3946123, 1.1266935, 3.3379802, 4.0589477, 4.2738963, 3.5974829, 5.8015042, 3.4725719, 1.6463334, 2.9543077, 2.1672539, 3.2862271, 4.4010676, 0.9028631, 3.1765408, 3.5989289, 2.2799673, 3.1030414\n\n\n3.096833\n\n\n3.231384\n\n\n\n\n4\n\n\n50\n\n\n2.5417992, 2.7712643, 3.2603008, 1.5902826, 2.4041137, 2.6021900, 2.1068297, 4.2283983, 1.3692486, 2.9955652, 3.4650244, 3.1077124, 2.5326740, 5.6138886, 3.0343272, 4.3560290, 1.9652125, 3.0990213, 1.5725810, 1.5456695, 1.6319697, 2.3603026, 1.2883407, 3.5445709, 3.2687218, 0.8946275, 3.0903373, 2.5934762, 2.5560058, 3.7752356, 3.4707229, 2.5997251, 3.3855622, 3.8563913, 3.3555159, 3.0903885, 4.5548858, 1.8718650, 2.3247428, 3.0633230, 2.3958766, 3.5463976, 3.2704150, 2.0239806, 2.8522347, 1.7801888, 2.9331158, 3.5143356, 3.1246447, 1.8767593\n\n\n2.801136\n\n\n2.892675\n\n\n\n\n4\n\n\n100\n\n\n3.0181795, 3.1820159, 2.8390711, 3.9013929, 2.9089998, 2.3781238, 2.9665397, 2.0201009, 3.0919985, 3.8296835, 2.3138039, 4.3592009, 3.5122567, 1.2843327, 0.8425531, 3.6482090, 1.1299042, 3.2927918, 3.1919376, 3.6177099, 3.6207109, 5.0441964, 2.0670874, 2.5374294, 3.2004210, 1.6477960, 2.1863851, 2.4497617, 3.6312731, 3.6447851, 0.6144123, 3.4086673, 3.1185903, 3.6694021, 1.7242021, 2.6752880, 5.1434517, 3.0748484, 2.9999282, 4.5485503, 2.9316575, 3.3015455, 4.2693085, 1.6217036, 2.4394224, 4.2841995, 3.8561266, 2.8120557, 5.8017036, 3.3899501, 3.3749675, 3.6431217, 1.0892514, 3.6225169, 2.8967333, 4.3033562, 3.5743987, 3.4982402, 3.1149025, 2.3937729, 4.3760731, 4.7448725, 2.1975521, 3.5528219, 2.1416862, 3.2485131, 4.4099829, 2.7861281, 2.5234690, 3.4944403, 1.8494273, 2.8579902, 2.9158367, 2.1895905, 3.5870681, 3.0879314, 4.0345519, 2.0506254, 4.8413177, 2.7391807, 2.5804362, 2.6821090, 3.3549040, 4.5469212, 1.9058571, 3.6630682, 1.8668980, 1.7935556, 3.0096299, 2.1824717, 2.3973071, 1.9284134, 2.5119362, 2.8627759, 1.2537074, 4.7452578, 1.6890902, 4.7486918, 3.2425947, 4.2115684\n\n\n3.053612\n\n\n3.081390\n\n\n\n\n4\n\n\n200\n\n\n1.7163342, 3.3961512, 3.3508282, 2.5039774, 4.6840417, 1.7388718, 2.4119315, 2.8617928, 2.0973344, 2.1290068, 3.0838036, 1.9595181, 2.4239329, 2.2075452, 2.5775338, 3.3921317, 0.3204456, 3.4629006, 3.3416441, 2.6480426, 2.3242814, 2.3658204, 2.1976661, 3.0677451, 2.6734496, 2.9459689, 3.2758985, 2.5727472, 5.6979733, 4.4121483, 3.0515411, 3.5657808, 2.2442798, 2.8411756, 2.1189565, 1.9452891, 4.0218776, 5.2161058, 3.9068794, 2.0692046, 3.7466105, 0.9048727, 3.0184510, 4.7313734, 3.8866503, 1.3898996, 4.2114470, 3.1818671, 3.6175192, 3.0604298, 2.1619366, 0.9402405, 3.6955505, 3.0629654, 2.3677511, 1.1087315, 4.3015642, 3.9787920, 4.7858164, 3.3748548, 3.9135828, 3.6184084, 4.1628526, 4.6338721, 2.4531146, 3.8241168, 1.8725589, 1.7221809, 1.7535746, 0.9253364, 3.6569145, 3.4339670, 3.5715451, 4.6249207, 4.6819166, 4.2661941, 1.2672861, 1.9829952, 2.3027015, 2.2311619, 3.1796823, 3.0096723, 2.7324376, 2.4350636, 3.3580408, 2.3852859, 4.2023372, 4.2472032, 3.9590326, 2.5610634, 3.1149327, 3.8371374, 3.2669376, 1.7471463, 5.1862870, 1.9557388, 2.1586536, 2.4014890, 4.2447406, 3.3300805, 1.9529079, 3.8841227, 3.5972757, 3.2476957, 2.6679333, 4.2667915, 3.2644636, 1.3508051, 2.6746331, 2.9296305, 2.1811953, 2.3909156, 2.6666524, 1.3167173, 1.7220197, 4.0457457, 2.8216641, 3.9428210, 3.2624007, 4.6230240, 3.2122163, 2.3820006, 2.0584235, 2.3835105, 2.0552709, 1.8885412, 1.8576204, 3.4357655, 3.1843560, 2.8095216, 2.8899896, 5.7854697, 3.5817640, 1.0424798, 3.8083765, 2.1554346, 4.2815605, 4.4691496, 3.0988933, 0.8793161, 1.6357474, 2.0181340, 3.3496876, 3.5091329, 1.3825665, 3.7306101, 3.6229595, 4.9544289, 3.4510336, 2.1901128, 3.5817777, 2.5769730, 2.3174844, 2.7497388, 3.5184649, 4.5784404, 1.6337282, 4.4608322, 3.4271655, 3.4710742, 2.2471736, 2.7938811, 2.7958883, 2.3072717, 3.4583664, -0.1945934, 1.6988172, 4.0357038, 1.6414525, 3.5970889, 4.2535352, 3.2422433, 1.6789045, 3.1877825, 4.6130923, 4.3407352, 5.3869467, 2.2066576, 3.4598220, 2.7061118, 1.1128346, 2.8470241, 2.5815477, 5.0300598, 3.1588658, 3.6022633, 3.7555937, 2.0517514, 2.2354213, 4.0315750, 3.2004044, 5.0633260, 2.8667188, 4.1450519, 3.4346506, 2.4464445, 3.2140254, 3.4815925, 2.8929998, 3.3238329\n\n\n3.013620\n\n\n3.065355\n\n\n\n\n5\n\n\n5\n\n\n3.514865, 2.496826, 2.801990, 3.761042, 2.422648\n\n\n2.999474\n\n\n2.801990\n\n\n\n\n5\n\n\n10\n\n\n3.756337, 1.923437, 3.789760, 3.183596, 2.608614, 2.016464, 3.184548, 3.021970, 1.259288, 1.951281\n\n\n2.669530\n\n\n2.815292\n\n\n\n\n5\n\n\n20\n\n\n2.9097301, 3.0219521, 4.7241506, 0.9865961, 3.4510194, 4.3233036, 2.0723322, 3.2131797, 2.9451123, 3.4573549, 3.4901806, 3.1804193, 4.4008089, 3.9546714, 3.8411374, 2.4584639, 2.7913580, 1.9523230, 2.3558973, 1.2346920\n\n\n3.038234\n\n\n3.101186\n\n\n\n\n5\n\n\n50\n\n\n1.8693174, 1.3874648, 2.4247317, 3.4950936, 3.3662180, 3.2931491, 1.0974698, 2.3823370, 2.5463785, 2.4985596, 2.6719120, 1.5921060, 2.4032878, 2.8700023, 1.8612895, 3.4592015, 3.2726076, 4.1352622, 3.7015904, 4.8641803, 5.2862061, 3.5934848, 0.8537222, 3.1169678, 2.5454646, 4.8389320, 1.7696851, 1.0894155, 3.1326362, 3.6771295, 3.0446510, 4.1009060, 1.6938610, 3.1493007, 2.9353110, 3.9367239, 2.1000665, 3.9920757, 3.8064688, 3.3679839, 2.0282479, 4.0487172, 4.5154800, 3.9712420, 3.4977031, 2.4862756, 3.1832053, 3.0918959, 3.5357808, 1.3586022\n\n\n2.978806\n\n\n3.124802\n\n\n\n\n5\n\n\n100\n\n\n3.5424784, 2.0505024, 1.8633141, 3.0459469, 3.8863753, 3.8110386, 2.4724735, 4.7324698, 4.3112077, 3.6825551, 4.0815016, 3.3063481, 2.4136442, 0.7581959, 4.8549243, 5.0943299, 2.7013019, 3.9355892, 2.7912487, 2.9668488, 4.1837299, 3.6562594, 2.6428732, 3.7113550, 3.7843589, 1.4346608, 4.3218130, 3.7581246, 2.0149076, 4.5247611, 3.6655657, 4.6137878, 4.4868591, 3.1043702, 2.9634153, 1.4831930, 3.3426438, 3.8861776, 2.1428865, 2.9647870, 2.8190044, 3.8773118, 3.1905786, 3.1496487, 3.0526628, 4.0249087, 4.5536669, 4.2838408, 3.1792383, 1.7031621, 3.4835810, 2.9739982, 2.9276736, 5.2791639, 3.0489454, 1.3798501, 4.1954034, 5.6661265, 2.0271300, 3.7062196, 3.2020413, 4.6488792, 3.4152248, 1.0550391, 3.4885526, 3.5886434, 0.6166773, 1.9883347, 1.9547028, 4.2378245, 1.7442482, 3.2433926, 2.8784131, 3.4218840, 2.3546276, 1.6379401, 3.8878428, 2.3668499, 2.4401547, 3.2486133, 2.5946249, 2.8803422, 1.1745238, 2.4222402, 5.7571769, 4.0906538, 3.0743054, 2.4457229, 1.1607396, 1.9188096, 3.3181694, 2.1005772, 3.5603829, 2.3327544, 3.0513151, 3.2026628, 1.1171509, 2.6334994, 2.3845380, 2.8517136\n\n\n3.110027\n\n\n3.127010\n\n\n\n\n5\n\n\n200\n\n\n2.3691409, 3.4615946, 1.7034097, 3.8446770, 3.3788525, 2.5161311, 3.0601320, 2.6740266, 3.4011137, 3.2903042, 3.2208011, 2.6912329, 2.8030961, 3.9755343, 2.2583128, 3.3659178, 1.6021431, 2.3799385, 4.3964791, 3.4188935, 2.6022612, 5.0251028, 2.5178152, 2.4181548, 2.2068815, 2.9168703, 3.4858629, 1.9074054, 1.5857885, 1.9761283, 4.2175867, 1.9600418, 0.6046258, 4.8618001, 3.4691953, 2.3503606, 4.1447430, 5.7604490, 2.9300919, 3.2584400, 2.9584763, 2.4588975, 4.7161840, 3.7600893, 1.8619573, 5.4472258, 1.7400079, 2.0191090, 3.0246035, 2.1033006, 4.6466718, 2.5521770, 4.2960654, 3.4080009, 3.3533659, 2.8535206, 3.4385118, 4.0051471, 3.6213592, 3.4094595, 2.7294048, 3.6628972, 1.9368317, 3.5092563, 4.5947008, 3.9618350, 2.1556249, 4.3007900, 2.8813826, 1.8816738, 1.3386454, 6.3746072, 1.6590831, 4.4208116, 3.5253409, 2.8741180, 2.5143414, 4.9964187, 4.0583367, 1.4428591, 1.5203614, 3.4129872, 3.0954934, 2.3484448, 3.3086262, 1.4415215, 3.3522097, 2.6828391, 3.4159518, 2.6343277, 2.8466694, 3.2500697, 3.1326945, 3.4400181, 3.1703828, 3.0501787, 1.8949111, 2.7663220, 4.0244025, 1.7474825, 2.7420869, 1.6420272, 1.8689042, 1.3411184, 2.0706502, 2.7942048, 3.6074724, 3.2685829, 3.8684910, 2.9417292, 3.0966923, 2.8299410, 2.7796743, 5.0701974, 2.4673680, 4.0838314, 3.3772170, 3.6957740, 4.0460294, 3.0329907, 3.5152334, 2.5278588, 2.3032073, 3.3088646, 3.6086187, 1.9449031, 1.4157414, 3.4262543, 3.5989979, 2.4981296, 1.7890128, 2.5558775, 3.1916534, 1.7464104, 1.8832654, 1.8176307, 2.2890291, 3.5064925, 2.8573236, 2.7160779, 3.5948585, 2.0893778, 2.8218961, 2.6022226, 3.6518425, 1.0204207, 3.3041408, 3.4402804, 2.1370093, 2.5823706, 2.8565004, 3.3906351, 3.1892806, 5.5506602, 2.6788334, 3.6253295, 3.5511321, 4.2413080, 0.7796717, 3.3006978, 3.1480750, 2.6231278, 4.2488419, 2.7868702, 4.1495839, 1.8637552, 5.2001700, 3.5546161, 1.7720770, 5.3480437, 3.9494513, 3.2701568, 3.4696585, 1.3766217, 2.3362123, 1.8086222, 2.2765193, 2.8778630, 2.5693908, 3.8506205, 1.9431600, 2.7628165, 1.9862709, 0.9097608, 2.1427446, 2.9710050, 3.1817432, 3.4420271, 3.5908294, 3.5504166, 3.0735125, 3.5175857, 4.4743472, 3.3671130, 1.6079031, 3.5726268, 1.5246917, 4.8732109, 3.3546180, 3.8230656\n\n\n3.013620\n\n\n3.041585\n\n\n\n\n6\n\n\n5\n\n\n3.857373, 2.135439, 2.549427, 3.124880, 3.923581\n\n\n3.118140\n\n\n3.124880\n\n\n\n\n6\n\n\n10\n\n\n3.555057, 2.391047, 2.101682, 3.550571, 3.830792, 2.925424, 2.152222, 1.900046, 3.167900, 1.282918\n\n\n2.685766\n\n\n2.658236\n\n\n\n\n6\n\n\n20\n\n\n3.041673, 3.708679, 2.381326, 2.585394, 3.673748, 1.110732, 4.434646, 4.392041, 4.760111, 3.742157, 4.011191, 2.169924, 6.496940, 3.118313, 3.804739, 3.412177, 4.373924, 4.067338, 2.187535, 3.476876\n\n\n3.547473\n\n\n3.691213\n\n\n\n\n6\n\n\n50\n\n\n2.5507814, 2.6063936, 1.9032402, 4.2744637, 3.2747231, 3.8835118, 4.5999724, 3.2905748, 1.4572807, 3.9056976, 2.4495930, 3.1111760, 2.9284150, 2.9267990, 4.0788316, 3.2560531, 2.9131466, 4.2787633, 1.2036267, 5.3668441, 3.0635793, 2.6414494, 2.8589586, 1.1310532, 1.1869943, 3.6448590, 4.5758476, 3.2058853, 3.3991010, 2.4822593, 3.4123530, 2.5828400, 2.6104294, 4.7817712, 2.0663930, 3.4439450, 3.9798415, 3.2494025, 4.1117989, 2.4338673, 4.4147485, 0.8966689, 1.9163127, 2.6296617, 3.7557620, 3.1780450, 2.4464562, 3.2271041, 2.7577385, 2.5863799\n\n\n3.058628\n\n\n3.087378\n\n\n\n\n6\n\n\n100\n\n\n1.88036700, 3.18995020, 2.33567147, 4.56672842, 5.19368825, 2.74883812, 1.77813018, 2.90380790, 2.84134585, 2.71707709, 4.31642096, 3.79102943, 3.87306285, 2.49468390, 2.41043714, 3.72222256, 3.21424043, 3.55826858, 2.81380430, 2.15266543, 2.92101825, 2.65847972, 4.77441108, 3.18740687, 3.55116916, 2.73364600, 2.17379976, 2.52746495, 3.33945925, 3.18619578, 2.08134671, 2.39989650, 3.10689523, 2.97211557, 3.80512905, 2.47755793, 2.97351029, 3.84192196, 3.04488051, 2.34798681, 1.68988550, 1.75210264, 2.79047888, 2.40423433, 5.69600943, 2.72813956, 4.63693884, 3.00496511, 4.23260031, 1.98329434, 3.02372716, 5.78390206, 3.33907851, 3.90692718, 3.34391587, 3.50614930, 3.44067939, 2.53789933, 2.56546891, 1.03713060, 1.43841424, 2.73361850, 4.34557457, 2.28573575, 2.67216023, 2.80083419, 2.69108069, 3.59733902, 2.33784719, 4.47821478, 4.31051453, 3.27727002, 3.19013359, 3.79863407, 2.24020070, 3.08047949, 3.44211882, 1.76077295, 3.87350055, 1.72994952, 3.22493598, 5.74926815, 2.31161776, 3.21744615, 0.60950803, 2.14040439, 0.09879768, 2.69490906, 1.05943355, 2.31556712, 3.59230792, 2.19066034, 3.84950618, 2.80766425, 4.10376975, 2.28061753, 2.27684385, 3.47012960, 2.70449904, 2.58926283\n\n\n2.993818\n\n\n2.872577\n\n\n\n\n6\n\n\n200\n\n\n3.73393329, 4.68196047, 3.64325675, 3.38147222, 2.51971566, 2.36701571, 2.71963295, 1.15672614, 2.17739123, 2.14946534, 3.97350957, 2.98711065, 2.73079874, 1.82297369, 4.35013905, 3.60816632, 4.55619993, 1.78702322, 2.22092560, 0.43270367, 2.98802401, 3.11237069, 2.23664950, 2.74652381, 3.41524924, 2.38601039, 2.97091854, 4.35370083, 4.09870622, 1.74659366, 3.04344846, 2.01006233, 2.53259370, 3.22792113, 4.37762086, 2.56183660, 3.01990414, 2.60548567, 2.96478221, 3.34433772, 1.85243003, 3.43334990, 1.84067901, 3.61316438, 4.37424823, 4.18144289, 3.96137430, 2.74981234, 2.78974238, 2.63399257, 3.22923034, 3.05290728, 4.91081981, 3.10937495, 1.82106407, 3.91344770, 1.02027853, 3.72813495, 2.87567883, 4.72912786, 3.45886701, 1.99363258, 4.40655133, 2.30079335, 3.62468616, 2.57851175, 3.60042348, 2.03007923, 1.75979193, 2.98490262, 1.29805931, 4.53300389, 2.82521406, 3.53397548, 5.32988324, 3.65968743, 2.03139726, 3.26467763, 1.96499055, 2.83128222, 3.54680969, 1.39305789, 5.23215675, 3.02787641, 3.94303841, 3.21542923, 1.89890499, 4.11185116, 1.85174474, 3.80790487, 2.62606129, 4.33940552, 3.81346139, 4.39377419, 3.02015856, 4.44280058, 4.13330739, 1.46962213, 3.98108916, 1.88317315, 3.41367576, 2.95271163, 2.65869230, 3.27657763, 3.99003778, 2.08371230, 1.95819902, 2.35579112, 3.44209611, 2.55864563, 3.53627879, 2.62675394, 3.93140188, 2.64470865, 3.02819799, 2.60983467, 2.90294980, 1.70860190, 0.13900450, 2.89737081, 2.68349411, 2.34608860, 1.87396303, 0.56338643, 2.60797501, 4.67863694, 2.53089725, 1.48783173, 2.20996177, 1.70537898, 1.82158893, 0.21932804, 4.86740343, 3.28165845, 2.22419358, 5.10198865, 3.38164896, 4.49053601, 3.35728354, 5.06007863, 3.60383910, 3.70706370, 3.83450625, 3.83582815, 1.92917204, 3.15368483, 3.74788808, 3.39659320, 2.67780991, 0.79726743, 3.19241453, 3.15041461, 3.65420665, 3.05019117, 1.88303933, 2.64342340, 1.56478318, 3.57935339, 2.61036033, 2.04544074, 3.02541011, 2.48550983, 3.93567809, 3.31990557, 1.94808952, 4.59650913, 5.48889291, 2.64809477, 3.27752415, 4.76266995, 3.17105275, 2.75527776, 2.54738982, 4.20886579, 3.19294879, 2.17824609, 2.72281982, 4.06718120, 4.07408325, 0.08067596, 4.04741184, 2.69277374, 2.61910689, 3.98210490, 2.59207901, 1.79527185, 2.69231860, 3.22060487, 2.51963125, 1.45218253, 3.23496708, 1.43878066, 2.75476689, 2.71199756, 4.51966528, 4.57833378, 2.58049385, 4.21498055, 1.09504235, 1.13872264\n\n\n2.981695\n\n\n2.986007\n\n\n\n\n7\n\n\n5\n\n\n1.784439, 3.425535, 2.607335, 2.290123, 3.700212\n\n\n2.761529\n\n\n2.607335\n\n\n\n\n7\n\n\n10\n\n\n2.281392, 4.148653, 3.270487, 3.337361, 2.654422, 3.692596, 2.109511, 1.995323, 3.338848, 3.269357\n\n\n3.009795\n\n\n3.269922\n\n\n\n\n7\n\n\n20\n\n\n1.8538786, 3.3201825, 1.5001087, 3.1003889, 1.7052349, 0.7408349, 3.9399591, 3.2533202, 2.3022738, 3.4578910, 4.8238340, 3.7144290, 3.9670851, 1.2297934, 1.8101826, 2.1634817, 2.4122741, 2.4489576, 3.4778975, 3.7623009\n\n\n2.749215\n\n\n2.774673\n\n\n\n\n7\n\n\n50\n\n\n2.274531, 1.012113, 4.158104, 2.941542, 3.725134, 1.706992, 3.821471, 4.820068, 3.497656, 2.449385, 1.649862, 3.405322, 2.374651, 3.315736, 2.388509, 2.974580, 1.411078, 3.124356, 3.231405, 3.118886, 3.193474, 3.239365, 1.234845, 4.723001, 2.161363, 3.833976, 2.109167, 2.491098, 3.345267, 3.895823, 2.914802, 3.054682, 3.371297, 2.850672, 2.912230, 3.074439, 3.188087, 3.692086, 1.912902, 2.764625, 2.987699, 2.594962, 3.112898, 3.762646, 3.543479, 3.670860, 3.107984, 1.649068, 3.144848, 4.697430\n\n\n2.992729\n\n\n3.110441\n\n\n\n\n7\n\n\n100\n\n\n2.6815533, 4.5553995, 2.9717382, 4.3238734, 0.9177539, 3.1547203, 2.4644775, 2.0413514, 4.1958137, 2.7723466, 4.5121933, 2.7179832, 2.2150723, 2.3375132, 0.5325480, 5.4723348, 3.6104933, 3.7027587, 3.3242890, 4.4716504, 3.3487155, 2.7000826, 1.7707555, 2.2652691, 3.3547820, 2.9780414, 4.0629846, 3.2797300, 2.0127410, 2.8648111, 2.9592843, 3.9684700, 3.3496193, 3.3114045, 2.7583088, 2.2310100, 2.2540417, 4.8417704, 3.0492012, 2.8494407, 4.1653644, 3.8157019, 3.6837652, 1.8991152, 3.9288021, 3.6607297, 4.3828736, 2.9162287, 2.1809123, 4.6346291, 3.4808300, 3.1424640, 0.9080187, 2.6660833, 1.0264960, 2.5813904, 2.8263098, 3.8828336, 3.0852200, 2.2999384, 3.7738867, 3.4649387, 2.1735458, 3.6290068, 4.3639401, 3.5808685, 3.5629061, 3.3783165, 2.7223252, 4.0064456, 2.8510026, 2.9174683, 2.4313076, 3.5379147, 3.1651505, 2.0945570, 3.2369231, 1.9567597, 2.0365881, 3.3317287, 1.9940546, 2.1652808, 3.9603432, 3.2968671, 3.0883340, 3.0787816, 1.8077141, 3.2311619, 3.4467849, 4.7744130, 2.9727681, 2.7436558, 3.3729647, 2.1524756, 2.6638488, 3.7540602, 1.6245216, 1.7810988, 3.5558631, 2.3896518\n\n\n3.044243\n\n\n3.082001\n\n\n\n\n7\n\n\n200\n\n\n2.6684953, 2.7449668, 2.5450476, 2.0814302, 2.1549271, 3.2600193, 1.7477039, 1.6907008, 4.6951846, 2.4885283, 1.8385929, 2.3362895, 2.1820037, 3.9393350, 1.8648712, 2.5582323, 3.2061223, 4.0463628, 2.0575801, 2.6600847, 4.9495710, 2.8005334, 3.5099790, 3.0243812, 2.7817274, 3.6016753, 2.0083182, 4.2052181, 3.1339434, 4.0379753, 2.9782949, 3.3893521, 3.0000630, 1.8342067, 2.4390181, 2.3933467, 2.1721250, 2.5566816, 2.3131930, 2.9886462, 3.2628833, 3.7395630, 2.2403084, 3.5811021, 3.0638420, 3.3843320, 3.4057564, 3.6032605, 2.8958945, 3.0401522, 3.2984778, 1.7825456, 3.3223627, 3.5641642, 3.4877967, 2.1283637, 3.2705308, 3.7952305, 3.4926742, 3.9737311, 1.6776325, 1.9138826, 1.4330920, 3.9498198, 2.5905205, 4.5449403, 2.9841710, 2.1137398, 0.7894195, 1.3665774, 2.8015911, 2.9901314, 3.1076983, 3.1724568, 3.4064384, 1.6652265, 5.0849698, 2.9748161, 3.2488559, 2.7561271, 4.6524786, 3.5468039, 1.6284471, 3.4587270, 3.6315341, 2.3352255, 2.8695663, 2.8720178, 2.7766775, 2.4209318, 2.1723557, 1.5387116, 2.7233221, 3.6227457, 2.9937857, 1.6252613, 3.4464239, 4.5358761, 4.3874595, 1.5190020, 1.9774374, 1.1710354, 3.1463447, 2.6844014, 3.4486288, 4.5383567, 4.5610453, 3.8958300, 2.3091666, 3.0757045, 1.7339341, 2.5214528, 2.3807543, 3.0285214, 2.8019795, 2.8734932, 3.2851845, 1.3224775, 1.3837000, 3.3151321, 3.6178192, 3.1441947, 2.4429099, 1.0245032, 0.8017219, 1.1827863, 3.9605172, 3.4734985, 3.6641105, 3.6634675, 4.7129905, 2.6684156, 2.8274764, 3.8612166, 1.4487904, 1.0461252, 5.9260342, 4.3330259, 3.2510725, 2.0684906, 3.7228017, 4.2789173, 1.9742356, 2.6145690, 2.2296175, 2.1497264, 2.4805859, 2.6700157, 3.0012938, 3.0849785, 1.7077626, 2.0107813, 4.5610816, 2.8267583, 3.6983025, 2.2654446, 2.1541095, 3.7888566, 1.8267106, 3.0329989, 2.9349640, 2.7215525, 3.3138910, 3.3141232, 3.4033115, 1.7955512, 1.5538503, 2.7477803, 3.5944438, 3.0137799, 5.2973521, 3.3305509, 3.5469440, 5.0998098, 3.4326358, 4.9299922, 3.7682293, 2.5585261, 3.8446698, 2.2481016, 3.4085634, 4.0270367, 4.7861955, 2.0266725, 1.3400736, 2.4337767, 3.9175061, 3.4573577, 1.5484192, 2.1485302, 5.0461990, 3.2341182, 3.2508127, 1.8810627, 2.9418827, 1.9365790, 2.8452876, 2.6624319, 2.0043633, 3.5281593\n\n\n2.930378\n\n\n2.976555\n\n\n\n\n8\n\n\n5\n\n\n2.004934, 3.689313, 3.389629, 2.947193, 4.429955\n\n\n3.292205\n\n\n3.389629\n\n\n\n\n8\n\n\n10\n\n\n1.624963, 3.075205, 3.557014, 3.943199, 3.040518, 2.900226, 3.721206, 3.025835, 4.533266, 2.815536\n\n\n3.223697\n\n\n3.057862\n\n\n\n\n8\n\n\n20\n\n\n4.076140, 3.865134, 1.419946, 4.336642, 1.820648, 3.659239, 3.281850, 3.333089, 3.577051, 1.636255, 3.168620, 3.520283, 1.520136, 2.902149, 2.418033, 3.749285, 2.623743, 3.884402, 2.625476, 3.067929\n\n\n3.024302\n\n\n3.225235\n\n\n\n\n8\n\n\n50\n\n\n3.3485143, 2.4330262, 4.7596979, 2.7687801, 2.6925846, 5.7234599, 3.5689054, 3.9397138, 3.2673769, 1.9667307, 1.8314404, 2.4299243, 2.8534856, 2.1112887, 2.2857371, 3.7407354, 2.2548861, 2.4291010, 3.7841166, 4.1271331, 2.6284570, 2.1896332, 3.8820717, 4.2668340, 5.0518011, 3.2859405, 3.7037961, 2.2645543, 2.0122164, 1.8629817, 1.6614845, 2.9456847, 2.7546619, 4.0361726, 2.6447761, 2.7645141, -0.5113484, 2.6762678, 2.1695174, 2.5512186, 3.3191037, 1.3662882, 2.5171693, 1.8241169, 4.2463000, 1.9264563, 2.4332524, 4.1478352, 2.8239746, 1.5738880\n\n\n2.866725\n\n\n2.684426\n\n\n\n\n8\n\n\n100\n\n\n3.41894937, 3.67395189, 3.05987283, 2.54336315, 4.71816219, -0.18867570, 2.66616545, 2.75888957, 3.47518847, 1.79218040, 2.30905258, 2.16365649, 2.85234043, 4.69466028, 3.26289188, 3.59715411, 3.23483272, 3.11905761, 2.57897996, 3.94383070, 3.11375190, 2.62982158, 2.54476848, 1.59926016, 0.09613864, 3.45562866, 3.11429993, 1.62398545, 3.02091800, 4.08115663, 3.14155335, 3.33593289, 2.52658813, 2.85116181, 2.81800709, 4.19061897, 2.50524409, 2.34258290, 3.39719425, 3.40408406, 1.97444586, 3.90554184, 2.84203542, 1.26890339, 2.72787575, 2.05229073, 3.88423623, 3.16893922, 4.31642602, 4.97403171, 4.55008797, 5.28719867, 2.31453762, 2.37380172, 2.00152285, 4.59846097, 3.05947191, 2.98924933, 2.58554895, 3.09194462, 4.14980710, 3.63193297, 3.29311727, 3.60234598, 5.08779503, 4.20167939, 2.28564782, 2.92728676, 2.46366702, 2.67784434, 2.40774487, 3.47571987, 3.12039114, 3.81535398, 2.08110349, 3.11585143, 3.91924153, 3.82368349, 2.12928558, 4.94568193, 3.33846183, 4.49426228, 3.51220702, 2.46029952, 3.95101271, 3.31656835, 2.45236682, 1.59336594, 3.20692881, 0.65082393, 1.82400380, 2.63037230, 3.50932725, 2.16121699, 2.60985603, 4.65552459, 3.35800597, 2.61420448, 2.42765106, 3.42361832\n\n\n3.047790\n\n\n3.102848\n\n\n\n\n8\n\n\n200\n\n\n3.4222120, 2.4994149, 2.0769448, 3.0383510, 1.3148609, 2.3364638, 3.9981314, 3.9718259, 5.2873863, 2.6580312, 3.5865771, 2.7988283, 3.3726440, 3.2124754, 3.3600393, 4.3050056, 3.0598209, 3.4867205, 2.6031015, 3.8577485, 4.9316891, 4.7682692, 2.2309121, 2.9151645, 2.5087444, 2.1761907, 4.0635784, 2.4648309, 3.5291880, 2.7835631, 1.9737979, 2.9989440, 2.5393561, 2.9453421, 2.0497875, 0.7558778, 2.4068619, 2.9983305, 4.4268377, 2.9520616, 3.3379465, 5.2809400, 1.4308765, 3.7631378, 3.5250826, 3.8224378, 3.2630117, 2.6336988, 3.3048362, 1.8354025, 2.4343674, 3.7734258, 5.0064385, 3.0168254, 2.7678844, 3.2392344, 4.3901194, 3.5743711, 4.9073614, 2.2860365, 3.6755673, 3.1561874, 2.3925843, 1.6816518, 3.7209405, 4.8064796, 0.2519978, 3.0828001, 3.5295908, 4.4120975, 0.7197038, 3.4262093, 3.0102900, 4.7998269, 3.1767298, 2.0982753, 2.9356396, 3.8838514, 4.5841698, 2.2439889, 2.7159778, 2.1659432, 2.7004782, 1.3320379, 4.9935558, 3.3057765, 3.4963488, 3.4564450, 2.7865863, 4.3894716, 3.5816682, 3.5060812, 5.0397004, 3.5936918, 2.3485897, 2.7561850, 3.1382654, 4.4627557, 4.4292138, 3.9321844, 2.8093103, 1.7664323, 2.9128434, 1.7696614, 3.9309460, 3.3978318, 1.5504353, 2.4522592, 3.0556474, 1.3989993, 4.5928231, 1.8580498, 3.3653705, 3.5250610, 3.4074559, 4.3781845, 2.6911791, 2.5118876, 2.7220431, 3.9959931, 4.2021348, 1.9373845, 2.3111750, 1.1426125, 5.1881843, 3.2684239, 3.8651656, 2.6638030, 4.3369656, 0.4332538, 4.4407203, 3.1209195, 2.5088825, 3.2472727, 3.5025505, 1.2676631, 3.0677601, 4.1871768, 3.2495318, 3.0270054, 4.7182483, 3.2988675, 2.5521919, 0.5097017, 2.6504411, 1.6771459, 3.5243807, 4.2131331, 2.6705844, 3.2459036, 2.3014929, 1.3598107, 3.3909625, 3.1946703, 2.6224372, 3.8846187, 1.5104592, 3.7280737, 4.2747149, 1.2559937, 4.0432335, 1.5020244, 3.1444217, 2.7906503, 4.1267153, 4.1705354, 4.2547696, 3.1719823, 2.6179487, 3.7745569, 2.2220051, 3.1284500, 2.7411785, 2.9324279, 4.2059585, 3.0659243, 2.3056847, 2.4420556, 3.2420412, 3.2812275, 3.0746571, 1.7711069, 3.2558792, 2.1476272, 2.1187299, 2.9643940, 3.7521140, 3.3991569, 1.4458222, 3.8856686, 2.7603192, 4.2941620, 4.4042632, 3.3036852, 3.2449231, 3.8776553, 2.8033350, 3.7470676, 2.5336997, 4.6773749\n\n\n3.111246\n\n\n3.150305\n\n\n\n\n9\n\n\n5\n\n\n2.947122, 4.009749, 4.207931, 2.702934, 3.526765\n\n\n3.478900\n\n\n3.526765\n\n\n\n\n9\n\n\n10\n\n\n1.416448, 2.750774, 3.296206, 1.364698, 2.900794, 3.248246, 1.203691, 2.548896, 2.898212, 4.196909\n\n\n2.582487\n\n\n2.824493\n\n\n\n\n\n\n\nThe mean and median of each sample are now in separate columns. However, to get the data into tidy format, also known as long format, we want them in separate rows. Having the data in tidy format allows us to use ggplot2 and other tidyverse functions more effectively. We use pivot_longer to do this.\n\nCodedf <- pivot_longer(df, cols=mean:median, names_to=\"Estimator\", values_to=\"Estimate\")\n\n\n\n\n\n\n\n\n\ntrial\n\n\nsize\n\n\ndata\n\n\nEstimator\n\n\nEstimate\n\n\n\n\n\n1\n\n\n5\n\n\n5.287247, 1.803228, 2.305707, 2.587707, 2.029327\n\n\nmean\n\n\n2.802643\n\n\n\n\n1\n\n\n5\n\n\n5.287247, 1.803228, 2.305707, 2.587707, 2.029327\n\n\nmedian\n\n\n2.305708\n\n\n\n\n1\n\n\n10\n\n\n2.052720, 3.748139, 2.883045, 3.152658, 5.189978, 3.356986, 5.716752, 5.281452, 3.324021, 4.896067\n\n\nmean\n\n\n3.960182\n\n\n\n\n1\n\n\n10\n\n\n2.052720, 3.748139, 2.883045, 3.152658, 5.189978, 3.356986, 5.716752, 5.281452, 3.324021, 4.896067\n\n\nmedian\n\n\n3.552563\n\n\n\n\n1\n\n\n20\n\n\n3.467681, 2.106199, 2.692672, 2.995178, 3.988164, 3.839750, 3.705342, 4.305965, 1.612004, 4.272917, 3.184193, 3.752280, 3.591745, 2.016947, 2.723936, 2.129149, 3.718711, 3.110653, 2.921533, 2.579510\n\n\nmean\n\n\n3.135726\n\n\n\n\n1\n\n\n20\n\n\n3.467681, 2.106199, 2.692672, 2.995178, 3.988164, 3.839750, 3.705342, 4.305965, 1.612004, 4.272917, 3.184193, 3.752280, 3.591745, 2.016947, 2.723936, 2.129149, 3.718711, 3.110653, 2.921533, 2.579510\n\n\nmedian\n\n\n3.147423\n\n\n\n\n1\n\n\n50\n\n\n2.437874, 3.997513, 1.894870, 2.857712, 3.314995, 4.218551, 2.300683, 2.714567, 1.688447, 2.608988, 2.598473, 4.350518, 3.591190, 3.100525, 3.931072, 2.737258, 2.992332, 3.367153, 4.707163, 3.723740, 3.481036, 1.432132, 3.318250, 3.165991, 2.100092, 3.076371, 3.159155, 3.543674, 3.704807, 3.318969, 4.109250, 3.769154, 4.153474, 4.260684, 3.700624, 3.432627, 2.077398, 2.384416, 2.133340, 1.360483, 1.674161, 2.110963, 2.442398, 2.937598, 5.422693, 3.342585, 3.004248, 3.029220, 2.606577, 2.207295\n\n\nmean\n\n\n3.071866\n\n\n\n\n1\n\n\n50\n\n\n2.437874, 3.997513, 1.894870, 2.857712, 3.314995, 4.218551, 2.300683, 2.714567, 1.688447, 2.608988, 2.598473, 4.350518, 3.591190, 3.100525, 3.931072, 2.737258, 2.992332, 3.367153, 4.707163, 3.723740, 3.481036, 1.432132, 3.318250, 3.165991, 2.100092, 3.076371, 3.159155, 3.543674, 3.704807, 3.318969, 4.109250, 3.769154, 4.153474, 4.260684, 3.700624, 3.432627, 2.077398, 2.384416, 2.133340, 1.360483, 1.674161, 2.110963, 2.442398, 2.937598, 5.422693, 3.342585, 3.004248, 3.029220, 2.606577, 2.207295\n\n\nmedian\n\n\n3.088449\n\n\n\n\n1\n\n\n100\n\n\n2.6882981, 2.6539314, 2.6953924, 1.2141065, 3.5872747, 4.6357944, 2.3545765, 3.6189922, 3.2363936, 3.8465009, 2.4263543, 4.1179932, 1.4599989, 2.5618761, 2.8493270, 3.5190584, 3.5875397, 2.9206669, 1.8256390, 3.3087221, 1.3961215, 3.9912896, 4.0232204, 3.8401454, 3.1200786, 2.5737449, 3.4589262, 3.6450479, 3.6115305, 2.1107887, 4.5438923, 1.7582364, 4.1034473, 3.9827724, 3.3043272, 1.4452818, 4.5698908, 3.6884497, 2.8223963, 3.7292013, 4.5332509, 3.5065784, 3.0333277, 1.5324493, 4.0191577, 2.4066607, 3.8124099, 3.8661678, 3.3683083, 4.1348191, 2.2429007, 3.4452206, 3.9159329, 3.2697587, 4.0075404, 1.5385667, 2.1252144, 3.1652289, 3.2072070, 3.4823619, 2.9283416, 2.1110716, 3.4859436, 3.3404968, 1.9020758, 2.6443056, 4.0973004, 2.0933080, 2.7925434, 3.6788614, 2.2022123, 1.4084611, 4.1803481, 4.2225693, 2.9890908, 3.3455225, 3.0941892, 3.0067934, 3.7426229, 4.0421865, 2.6806629, 3.3226434, 3.6850530, 3.3202428, 1.0850620, 0.6600371, 3.4828643, 4.1785300, 1.7072230, 3.6157731, 3.2560421, 3.7278390, 4.3241109, 3.1471585, 2.4014606, 5.1925299, 5.3271128, 4.1348696, 2.8091154, 3.4748446\n\n\nmean\n\n\n3.162817\n\n\n\n\n1\n\n\n100\n\n\n2.6882981, 2.6539314, 2.6953924, 1.2141065, 3.5872747, 4.6357944, 2.3545765, 3.6189922, 3.2363936, 3.8465009, 2.4263543, 4.1179932, 1.4599989, 2.5618761, 2.8493270, 3.5190584, 3.5875397, 2.9206669, 1.8256390, 3.3087221, 1.3961215, 3.9912896, 4.0232204, 3.8401454, 3.1200786, 2.5737449, 3.4589262, 3.6450479, 3.6115305, 2.1107887, 4.5438923, 1.7582364, 4.1034473, 3.9827724, 3.3043272, 1.4452818, 4.5698908, 3.6884497, 2.8223963, 3.7292013, 4.5332509, 3.5065784, 3.0333277, 1.5324493, 4.0191577, 2.4066607, 3.8124099, 3.8661678, 3.3683083, 4.1348191, 2.2429007, 3.4452206, 3.9159329, 3.2697587, 4.0075404, 1.5385667, 2.1252144, 3.1652289, 3.2072070, 3.4823619, 2.9283416, 2.1110716, 3.4859436, 3.3404968, 1.9020758, 2.6443056, 4.0973004, 2.0933080, 2.7925434, 3.6788614, 2.2022123, 1.4084611, 4.1803481, 4.2225693, 2.9890908, 3.3455225, 3.0941892, 3.0067934, 3.7426229, 4.0421865, 2.6806629, 3.3226434, 3.6850530, 3.3202428, 1.0850620, 0.6600371, 3.4828643, 4.1785300, 1.7072230, 3.6157731, 3.2560421, 3.7278390, 4.3241109, 3.1471585, 2.4014606, 5.1925299, 5.3271128, 4.1348696, 2.8091154, 3.4748446\n\n\nmedian\n\n\n3.321443\n\n\n\n\n1\n\n\n200\n\n\n2.45452506, 4.05564854, 3.42902183, 1.18004359, 2.30802391, 1.06817175, 4.20967201, 2.72099995, 1.90421677, 2.89781396, 3.35702296, 2.11769743, 2.94335221, 2.41898105, 3.64408819, 5.02334405, 3.86249250, 2.97509051, 3.60063495, 4.21648074, 1.82346845, 2.39065997, 3.38726257, 1.60085986, 4.23249185, 3.01550750, 1.37904095, 2.33453534, 2.42515949, 2.09810702, 4.49159937, 2.86272068, 3.10828170, 1.96478490, 2.55525608, 2.80395073, 1.73063551, 3.95352118, 3.47254665, 2.44122190, 4.24206456, 2.98474153, 2.20821161, 2.59838126, 1.10329871, 3.97197493, 2.48604514, 3.01456167, 2.73906443, 4.52235839, 1.52663025, 2.98344199, 3.02454061, 2.99874301, 2.56606729, 2.59444094, 3.15523332, 2.02761818, 4.54817493, 2.62987667, 4.96152526, 2.39000442, 2.92257124, 1.17114074, 3.80592424, 1.52240822, 0.02674429, 1.66023786, 2.73415797, 2.61600659, 2.39705767, 2.34847596, 4.75767151, 2.98096513, 3.15528461, 2.23915356, 1.45027309, 5.75016501, 4.04742325, 3.91799247, 3.47010951, 2.38262791, 3.04210627, 2.09810110, 4.33958321, 3.80385435, 3.31847865, 2.80954669, 1.91273331, 3.14539973, 5.46280025, 3.92361969, 3.74187669, 4.41602179, 4.25166337, 5.10890569, 3.71031260, 1.52481799, 2.41027352, 3.13970325, 2.48827577, 3.15093735, 3.44203940, 2.83760088, 3.97183854, 2.32873452, 4.63839716, 1.93172732, 2.98858788, 1.13471866, 3.01825086, 2.75297945, 2.08057489, 0.82683557, 2.35062295, 3.52526155, 2.72427269, 3.05470977, 2.61175039, 2.58297695, 1.83582483, 4.73786414, 2.74592265, 2.02628138, 4.11119895, 3.97349906, 4.25712868, 4.77628758, 0.31683148, 3.65986308, 4.17944967, 3.39351378, 1.81014133, 2.64347263, 1.53449196, 1.90926985, 2.34274578, 5.26294100, 3.08769003, 3.76752300, 2.38684254, 3.15250297, 2.40829255, 2.03929503, 2.41504201, 3.65667289, 2.70975041, 3.90409773, 3.19902022, 2.94842519, 2.09179482, 1.85752166, 3.99032494, 3.11227328, 4.14963167, 2.08950468, 1.89618028, 1.36513269, 1.38361751, 2.16326299, 4.09299912, 4.23509818, 3.17206660, 3.12049317, 3.55753267, 3.49138316, 2.93098738, 1.64920369, 3.79935757, 2.67990592, 2.64304881, 2.48927206, 1.12111992, 2.04815491, 5.27315661, 3.20268763, 0.69144530, 2.94336434, 3.06284384, 3.71022814, 2.40769260, 3.29852463, 3.64253563, 5.11279510, 3.91777963, 1.42714525, 3.99264173, 3.47952087, 2.70341944, 3.81584023, 2.00022839, 3.54921029, 3.27977120, 3.91663589, 1.26874274, 1.52041893, 5.22981103, 3.38649895, 3.66026569, 2.72376479\n\n\nmean\n\n\n2.956160\n\n\n\n\n1\n\n\n200\n\n\n2.45452506, 4.05564854, 3.42902183, 1.18004359, 2.30802391, 1.06817175, 4.20967201, 2.72099995, 1.90421677, 2.89781396, 3.35702296, 2.11769743, 2.94335221, 2.41898105, 3.64408819, 5.02334405, 3.86249250, 2.97509051, 3.60063495, 4.21648074, 1.82346845, 2.39065997, 3.38726257, 1.60085986, 4.23249185, 3.01550750, 1.37904095, 2.33453534, 2.42515949, 2.09810702, 4.49159937, 2.86272068, 3.10828170, 1.96478490, 2.55525608, 2.80395073, 1.73063551, 3.95352118, 3.47254665, 2.44122190, 4.24206456, 2.98474153, 2.20821161, 2.59838126, 1.10329871, 3.97197493, 2.48604514, 3.01456167, 2.73906443, 4.52235839, 1.52663025, 2.98344199, 3.02454061, 2.99874301, 2.56606729, 2.59444094, 3.15523332, 2.02761818, 4.54817493, 2.62987667, 4.96152526, 2.39000442, 2.92257124, 1.17114074, 3.80592424, 1.52240822, 0.02674429, 1.66023786, 2.73415797, 2.61600659, 2.39705767, 2.34847596, 4.75767151, 2.98096513, 3.15528461, 2.23915356, 1.45027309, 5.75016501, 4.04742325, 3.91799247, 3.47010951, 2.38262791, 3.04210627, 2.09810110, 4.33958321, 3.80385435, 3.31847865, 2.80954669, 1.91273331, 3.14539973, 5.46280025, 3.92361969, 3.74187669, 4.41602179, 4.25166337, 5.10890569, 3.71031260, 1.52481799, 2.41027352, 3.13970325, 2.48827577, 3.15093735, 3.44203940, 2.83760088, 3.97183854, 2.32873452, 4.63839716, 1.93172732, 2.98858788, 1.13471866, 3.01825086, 2.75297945, 2.08057489, 0.82683557, 2.35062295, 3.52526155, 2.72427269, 3.05470977, 2.61175039, 2.58297695, 1.83582483, 4.73786414, 2.74592265, 2.02628138, 4.11119895, 3.97349906, 4.25712868, 4.77628758, 0.31683148, 3.65986308, 4.17944967, 3.39351378, 1.81014133, 2.64347263, 1.53449196, 1.90926985, 2.34274578, 5.26294100, 3.08769003, 3.76752300, 2.38684254, 3.15250297, 2.40829255, 2.03929503, 2.41504201, 3.65667289, 2.70975041, 3.90409773, 3.19902022, 2.94842519, 2.09179482, 1.85752166, 3.99032494, 3.11227328, 4.14963167, 2.08950468, 1.89618028, 1.36513269, 1.38361751, 2.16326299, 4.09299912, 4.23509818, 3.17206660, 3.12049317, 3.55753267, 3.49138316, 2.93098738, 1.64920369, 3.79935757, 2.67990592, 2.64304881, 2.48927206, 1.12111992, 2.04815491, 5.27315661, 3.20268763, 0.69144530, 2.94336434, 3.06284384, 3.71022814, 2.40769260, 3.29852463, 3.64253563, 5.11279510, 3.91777963, 1.42714525, 3.99264173, 3.47952087, 2.70341944, 3.81584023, 2.00022839, 3.54921029, 3.27977120, 3.91663589, 1.26874274, 1.52041893, 5.22981103, 3.38649895, 3.66026569, 2.72376479\n\n\nmedian\n\n\n2.945895\n\n\n\n\n2\n\n\n5\n\n\n3.2759330, 0.7257688, 3.9080857, 1.9137469, 2.7844733\n\n\nmean\n\n\n2.521602\n\n\n\n\n2\n\n\n5\n\n\n3.2759330, 0.7257688, 3.9080857, 1.9137469, 2.7844733\n\n\nmedian\n\n\n2.784473\n\n\n\n\n2\n\n\n10\n\n\n2.266573, 3.212118, 2.060858, 2.380806, 3.244011, 3.371743, 3.627208, 1.926886, 2.291307, 3.907132\n\n\nmean\n\n\n2.828864\n\n\n\n\n2\n\n\n10\n\n\n2.266573, 3.212118, 2.060858, 2.380806, 3.244011, 3.371743, 3.627208, 1.926886, 2.291307, 3.907132\n\n\nmedian\n\n\n2.796462\n\n\n\n\n2\n\n\n20\n\n\n2.6802944, 4.1650659, 2.3782895, 4.2482132, 4.4404015, 3.7619934, 3.5593712, 4.5992638, 2.9015423, 1.5504462, 2.7423387, 0.9669287, 3.5869642, 3.1605865, 3.1131529, 3.5716906, 2.0344703, 3.3180012, 2.8264924, 2.0873888\n\n\nmean\n\n\n3.084645\n\n\n\n\n2\n\n\n20\n\n\n2.6802944, 4.1650659, 2.3782895, 4.2482132, 4.4404015, 3.7619934, 3.5593712, 4.5992638, 2.9015423, 1.5504462, 2.7423387, 0.9669287, 3.5869642, 3.1605865, 3.1131529, 3.5716906, 2.0344703, 3.3180012, 2.8264924, 2.0873888\n\n\nmedian\n\n\n3.136870\n\n\n\n\n2\n\n\n50\n\n\n1.153105, 3.669518, 2.891213, 4.566575, 2.155155, 4.097649, 3.300880, 2.223034, 2.961566, 4.109490, 3.536325, 2.636652, 2.894499, 3.333875, 3.810231, 1.316305, 3.665728, 2.207612, 4.527723, 1.513308, 2.328851, 4.675177, 3.611932, 2.767794, 3.605293, 1.840894, 1.835571, 2.130075, 2.738894, 2.505804, 1.694177, 5.023413, 2.244351, 2.758405, 4.097159, 2.053387, 1.866040, 2.116616, 3.516413, 2.662045, 2.977548, 2.897949, 3.300409, 3.806620, 2.962794, 1.543524, 2.376109, 2.830402, 4.276123, 2.744086\n\n\nmean\n\n\n2.927166\n\n\n\n\n2\n\n\n50\n\n\n1.153105, 3.669518, 2.891213, 4.566575, 2.155155, 4.097649, 3.300880, 2.223034, 2.961566, 4.109490, 3.536325, 2.636652, 2.894499, 3.333875, 3.810231, 1.316305, 3.665728, 2.207612, 4.527723, 1.513308, 2.328851, 4.675177, 3.611932, 2.767794, 3.605293, 1.840894, 1.835571, 2.130075, 2.738894, 2.505804, 1.694177, 5.023413, 2.244351, 2.758405, 4.097159, 2.053387, 1.866040, 2.116616, 3.516413, 2.662045, 2.977548, 2.897949, 3.300409, 3.806620, 2.962794, 1.543524, 2.376109, 2.830402, 4.276123, 2.744086\n\n\nmedian\n\n\n2.860808\n\n\n\n\n2\n\n\n100\n\n\n2.8346317, 2.5726789, 2.9431273, 1.5546164, 4.8828070, 3.1168900, 3.4211327, 4.5774044, 2.7486115, 2.9443757, 2.9774681, 5.3309610, 2.9011697, 3.1664316, 2.7303646, 3.8444736, 4.4087677, 1.4337638, 3.1690382, 1.4943208, 3.9949329, 4.2439084, 2.9637432, 2.5887441, 4.2841490, 1.8821923, 2.1649303, 4.5008117, 3.8991509, 2.5435879, 2.7939842, 2.4121564, 2.3145471, 4.0048242, 2.2273509, 1.0062663, 2.0907455, 2.4368439, 1.7821444, 1.1796821, 2.6003707, 5.1183683, 4.4151575, 3.5647651, 1.9187028, 2.0580239, 2.7558166, 4.0854886, 3.5583438, 0.8237716, 3.8773012, 3.8425353, 2.9484160, 2.3098786, 1.1610172, 3.2830379, 0.7474099, 3.7343502, 3.1458057, 2.3505714, 2.4387756, 3.3347920, 3.0320184, 4.2369172, 3.0564134, 2.8545673, 2.4076504, 1.7392870, 2.3163942, 2.8365628, 2.5615265, 2.4212970, 4.5810904, 4.5406613, 3.7029810, 2.9362514, 2.2593760, 1.9660528, 2.7039363, 1.5570503, 2.9728083, 4.5613930, 2.0089218, 3.0041940, 2.9551952, 2.3113463, 2.8697454, 3.1550928, 4.2773416, 4.0535482, 2.6282835, 2.8968675, 5.4980736, 2.2227391, 3.7573846, 3.0225450, 1.3499685, 2.1108838, 2.3916303, 2.7869371\n\n\nmean\n\n\n2.949854\n\n\n\n\n2\n\n\n100\n\n\n2.8346317, 2.5726789, 2.9431273, 1.5546164, 4.8828070, 3.1168900, 3.4211327, 4.5774044, 2.7486115, 2.9443757, 2.9774681, 5.3309610, 2.9011697, 3.1664316, 2.7303646, 3.8444736, 4.4087677, 1.4337638, 3.1690382, 1.4943208, 3.9949329, 4.2439084, 2.9637432, 2.5887441, 4.2841490, 1.8821923, 2.1649303, 4.5008117, 3.8991509, 2.5435879, 2.7939842, 2.4121564, 2.3145471, 4.0048242, 2.2273509, 1.0062663, 2.0907455, 2.4368439, 1.7821444, 1.1796821, 2.6003707, 5.1183683, 4.4151575, 3.5647651, 1.9187028, 2.0580239, 2.7558166, 4.0854886, 3.5583438, 0.8237716, 3.8773012, 3.8425353, 2.9484160, 2.3098786, 1.1610172, 3.2830379, 0.7474099, 3.7343502, 3.1458057, 2.3505714, 2.4387756, 3.3347920, 3.0320184, 4.2369172, 3.0564134, 2.8545673, 2.4076504, 1.7392870, 2.3163942, 2.8365628, 2.5615265, 2.4212970, 4.5810904, 4.5406613, 3.7029810, 2.9362514, 2.2593760, 1.9660528, 2.7039363, 1.5570503, 2.9728083, 4.5613930, 2.0089218, 3.0041940, 2.9551952, 2.3113463, 2.8697454, 3.1550928, 4.2773416, 4.0535482, 2.6282835, 2.8968675, 5.4980736, 2.2227391, 3.7573846, 3.0225450, 1.3499685, 2.1108838, 2.3916303, 2.7869371\n\n\nmedian\n\n\n2.883306\n\n\n\n\n2\n\n\n200\n\n\n4.4712113, 3.4663885, 4.8183584, 4.9233962, 2.4609964, 2.6137212, 2.1381923, 2.5979934, 3.5989628, 3.0818373, 3.3310258, 2.5387531, 3.3590392, 2.4842088, 3.5872762, 4.6196110, 3.4452312, 4.2552612, 2.4250934, 3.3160895, 0.8121294, 5.3721013, 3.9765799, 3.6144518, 2.6847373, 3.2310379, 5.0754801, 3.6526849, 2.9626037, 2.2936085, 1.7721683, 3.1341585, 2.6267665, 3.0390604, 3.1431243, 3.1049473, 3.6021957, 2.8816045, 3.5591695, 3.0418614, 3.0636211, 4.4662037, 2.5273691, 3.1634745, 3.3063502, 3.7925762, 2.0509232, 3.9047870, 2.6598896, 4.5310075, 3.3894034, 3.4959820, 3.6448587, 2.9562352, 1.6431313, 3.5914394, 1.0117028, 3.9186111, 2.2712175, 2.7793923, 3.3043540, 3.9926521, 2.9267322, 2.9882560, 4.0048726, 3.2533434, 2.0013965, 2.1985930, 4.1808544, 3.8229147, 3.9488901, 1.7478035, 1.4130252, 2.9784231, 1.8325981, 2.4516226, 1.9588791, 3.0147900, 1.4106007, 1.8228845, 3.7860374, 4.8980149, 2.5862019, 3.6776653, 2.1427547, 2.8789413, 2.2828294, 2.5392775, 2.9459693, 4.8482138, 3.5799736, 3.0891623, 3.9692474, 4.0389265, 2.3749993, 2.9423099, 2.1560368, 3.1875532, 2.5682157, 1.1942029, 2.8283227, 2.2625034, 2.9965397, 2.9206258, 2.8040684, 1.3295267, 2.0698512, 2.2467431, 2.8882962, 2.5293070, 2.1340760, 1.4287556, 3.5310695, 2.6139270, 1.5563502, 4.0796788, 3.3756376, 2.0071300, 4.0982031, 2.3521521, 2.9948101, 2.8644936, 4.2993083, 1.0984440, 4.2119189, 2.4081217, 3.3380150, 4.4366194, 3.4033307, 2.2535110, 4.3431232, 2.8146054, 3.9726011, 3.9211635, 2.9477696, 1.5649822, 4.0510527, 5.2405947, 3.7003835, 1.8269189, 2.5049930, 3.2786766, 3.7157131, 0.8367070, 2.5479963, 2.0247102, 2.4633039, 3.3083875, 3.4217938, 3.4386619, 2.0136053, 2.3334876, 3.2542884, 2.1949325, 3.3629507, 3.7519038, 2.0610404, 2.6878049, 2.9188225, 3.6210392, 3.3736386, 2.5762633, 2.7108783, 2.6170364, 3.9187120, 4.0170490, 3.6795118, 4.3614973, 2.7761955, 3.6014453, 2.8579245, 3.6139005, 4.0570122, 5.9614931, 3.6459387, 3.3482272, 1.9481373, 3.4999391, 2.8656461, 1.7816658, 4.9838025, 1.2559068, 3.3220384, 1.0206524, 3.7251298, 2.6158280, 2.9391138, 1.5464312, 3.1089980, 2.8583717, 4.5959384, 4.4549930, 2.9315214, 2.6788520, 2.9814002, 1.6783025, 2.7422002, 3.4730513, 3.9221774, 2.1461390\n\n\nmean\n\n\n3.049498\n\n\n\n\n2\n\n\n200\n\n\n4.4712113, 3.4663885, 4.8183584, 4.9233962, 2.4609964, 2.6137212, 2.1381923, 2.5979934, 3.5989628, 3.0818373, 3.3310258, 2.5387531, 3.3590392, 2.4842088, 3.5872762, 4.6196110, 3.4452312, 4.2552612, 2.4250934, 3.3160895, 0.8121294, 5.3721013, 3.9765799, 3.6144518, 2.6847373, 3.2310379, 5.0754801, 3.6526849, 2.9626037, 2.2936085, 1.7721683, 3.1341585, 2.6267665, 3.0390604, 3.1431243, 3.1049473, 3.6021957, 2.8816045, 3.5591695, 3.0418614, 3.0636211, 4.4662037, 2.5273691, 3.1634745, 3.3063502, 3.7925762, 2.0509232, 3.9047870, 2.6598896, 4.5310075, 3.3894034, 3.4959820, 3.6448587, 2.9562352, 1.6431313, 3.5914394, 1.0117028, 3.9186111, 2.2712175, 2.7793923, 3.3043540, 3.9926521, 2.9267322, 2.9882560, 4.0048726, 3.2533434, 2.0013965, 2.1985930, 4.1808544, 3.8229147, 3.9488901, 1.7478035, 1.4130252, 2.9784231, 1.8325981, 2.4516226, 1.9588791, 3.0147900, 1.4106007, 1.8228845, 3.7860374, 4.8980149, 2.5862019, 3.6776653, 2.1427547, 2.8789413, 2.2828294, 2.5392775, 2.9459693, 4.8482138, 3.5799736, 3.0891623, 3.9692474, 4.0389265, 2.3749993, 2.9423099, 2.1560368, 3.1875532, 2.5682157, 1.1942029, 2.8283227, 2.2625034, 2.9965397, 2.9206258, 2.8040684, 1.3295267, 2.0698512, 2.2467431, 2.8882962, 2.5293070, 2.1340760, 1.4287556, 3.5310695, 2.6139270, 1.5563502, 4.0796788, 3.3756376, 2.0071300, 4.0982031, 2.3521521, 2.9948101, 2.8644936, 4.2993083, 1.0984440, 4.2119189, 2.4081217, 3.3380150, 4.4366194, 3.4033307, 2.2535110, 4.3431232, 2.8146054, 3.9726011, 3.9211635, 2.9477696, 1.5649822, 4.0510527, 5.2405947, 3.7003835, 1.8269189, 2.5049930, 3.2786766, 3.7157131, 0.8367070, 2.5479963, 2.0247102, 2.4633039, 3.3083875, 3.4217938, 3.4386619, 2.0136053, 2.3334876, 3.2542884, 2.1949325, 3.3629507, 3.7519038, 2.0610404, 2.6878049, 2.9188225, 3.6210392, 3.3736386, 2.5762633, 2.7108783, 2.6170364, 3.9187120, 4.0170490, 3.6795118, 4.3614973, 2.7761955, 3.6014453, 2.8579245, 3.6139005, 4.0570122, 5.9614931, 3.6459387, 3.3482272, 1.9481373, 3.4999391, 2.8656461, 1.7816658, 4.9838025, 1.2559068, 3.3220384, 1.0206524, 3.7251298, 2.6158280, 2.9391138, 1.5464312, 3.1089980, 2.8583717, 4.5959384, 4.4549930, 2.9315214, 2.6788520, 2.9814002, 1.6783025, 2.7422002, 3.4730513, 3.9221774, 2.1461390\n\n\nmedian\n\n\n2.995675\n\n\n\n\n3\n\n\n5\n\n\n1.0747243, 4.5615640, 1.9949502, 2.5591799, 0.8516282\n\n\nmean\n\n\n2.208409\n\n\n\n\n3\n\n\n5\n\n\n1.0747243, 4.5615640, 1.9949502, 2.5591799, 0.8516282\n\n\nmedian\n\n\n1.994950\n\n\n\n\n3\n\n\n10\n\n\n3.048287, 2.778905, 2.673316, 3.400211, 1.967065, 1.463854, 4.601259, 3.387260, 3.895125, 3.499271\n\n\nmean\n\n\n3.071455\n\n\n\n\n3\n\n\n10\n\n\n3.048287, 2.778905, 2.673316, 3.400211, 1.967065, 1.463854, 4.601259, 3.387260, 3.895125, 3.499271\n\n\nmedian\n\n\n3.217773\n\n\n\n\n3\n\n\n20\n\n\n2.4285227, 2.3395377, 2.7488436, 3.2524397, 3.2276578, 3.2738653, 4.0710747, 2.7178398, 0.6195107, 3.5952696, 2.9578908, 3.6323426, 4.1449626, 1.9183443, 3.0223513, 3.1286965, 2.4501342, 1.6139560, 2.8583713, 2.0375426\n\n\nmean\n\n\n2.801958\n\n\n\n\n3\n\n\n20\n\n\n2.4285227, 2.3395377, 2.7488436, 3.2524397, 3.2276578, 3.2738653, 4.0710747, 2.7178398, 0.6195107, 3.5952696, 2.9578908, 3.6323426, 4.1449626, 1.9183443, 3.0223513, 3.1286965, 2.4501342, 1.6139560, 2.8583713, 2.0375426\n\n\nmedian\n\n\n2.908131\n\n\n\n\n3\n\n\n50\n\n\n3.8046061, 1.7389417, 2.4324046, 2.4069112, 2.3684307, 3.9753758, 3.7230437, 3.7287052, 4.6498268, 3.6135468, 4.0717187, 3.9209338, 2.6941869, 2.9706652, 2.9164413, 2.8974315, 1.9216091, 3.9951739, 3.8619505, 2.3248371, 2.6893307, 2.3994889, 1.9630793, 4.1066661, 3.1823144, 3.0297148, 3.4639882, 2.7645436, 2.5417248, 1.5961892, 3.0482292, 2.5052983, 3.1519455, 2.7919992, 3.0458618, 4.9481276, 2.8886585, 2.0411453, 2.2232450, 3.0789227, 1.5290028, 2.6367495, 1.9999055, 3.5540651, 4.9393684, 2.5539007, 3.6313644, 0.3785456, 3.2908147, 1.9487786\n\n\nmean\n\n\n2.958794\n\n\n\n\n3\n\n\n50\n\n\n3.8046061, 1.7389417, 2.4324046, 2.4069112, 2.3684307, 3.9753758, 3.7230437, 3.7287052, 4.6498268, 3.6135468, 4.0717187, 3.9209338, 2.6941869, 2.9706652, 2.9164413, 2.8974315, 1.9216091, 3.9951739, 3.8619505, 2.3248371, 2.6893307, 2.3994889, 1.9630793, 4.1066661, 3.1823144, 3.0297148, 3.4639882, 2.7645436, 2.5417248, 1.5961892, 3.0482292, 2.5052983, 3.1519455, 2.7919992, 3.0458618, 4.9481276, 2.8886585, 2.0411453, 2.2232450, 3.0789227, 1.5290028, 2.6367495, 1.9999055, 3.5540651, 4.9393684, 2.5539007, 3.6313644, 0.3785456, 3.2908147, 1.9487786\n\n\nmedian\n\n\n2.906936\n\n\n\n\n3\n\n\n100\n\n\n4.0267448, 2.4347065, 3.0706354, 1.8619552, 2.1051051, 2.4159778, 2.2276860, 3.2198606, 4.2963880, 4.1106416, 2.3727025, 4.6175100, 3.7231870, 3.3952936, 1.9038731, 3.9842807, 2.1291319, 0.7617531, 3.9220697, 2.2509084, 3.6855175, 5.0565703, 1.9029950, 2.5308079, 3.1848184, 1.6005643, 3.0330627, 3.0296827, 2.1690749, 3.0171374, 2.3909994, 1.4421590, 2.8371608, 2.7534749, 2.8547618, 3.5765834, 0.5694954, 1.1923891, 2.7431577, 2.1169319, 1.9697289, 1.4216196, 2.9587375, 4.5703574, 1.2041289, 1.9937968, 2.9218875, 1.5531351, 3.1154095, 1.7936482, 4.9214755, 2.8949295, 2.5121010, 1.7239873, 1.7129663, 1.6588592, 3.3965378, 3.5308406, 2.1060778, 4.0638238, 2.9288794, 1.0274889, 3.8229956, 2.9489243, 4.6103621, 2.8593775, 3.5027458, 2.3368797, 3.9059765, 3.3097038, 2.9642133, 4.1090774, 3.3954192, 2.1599487, 4.1834967, 3.1524552, 4.5397408, 3.5094389, 3.0603497, 2.7083975, 4.3067560, 3.0184312, 2.4475454, 2.7512634, 3.5456570, 3.2623655, 3.1965461, 4.4158751, 2.4468998, 3.4643230, 2.4960860, 3.2934396, 2.2344831, 5.9669187, 2.5541070, 2.6097323, 2.8106454, 3.9297801, 1.5020411, 2.7621832\n\n\nmean\n\n\n2.905928\n\n\n\n\n3\n\n\n100\n\n\n4.0267448, 2.4347065, 3.0706354, 1.8619552, 2.1051051, 2.4159778, 2.2276860, 3.2198606, 4.2963880, 4.1106416, 2.3727025, 4.6175100, 3.7231870, 3.3952936, 1.9038731, 3.9842807, 2.1291319, 0.7617531, 3.9220697, 2.2509084, 3.6855175, 5.0565703, 1.9029950, 2.5308079, 3.1848184, 1.6005643, 3.0330627, 3.0296827, 2.1690749, 3.0171374, 2.3909994, 1.4421590, 2.8371608, 2.7534749, 2.8547618, 3.5765834, 0.5694954, 1.1923891, 2.7431577, 2.1169319, 1.9697289, 1.4216196, 2.9587375, 4.5703574, 1.2041289, 1.9937968, 2.9218875, 1.5531351, 3.1154095, 1.7936482, 4.9214755, 2.8949295, 2.5121010, 1.7239873, 1.7129663, 1.6588592, 3.3965378, 3.5308406, 2.1060778, 4.0638238, 2.9288794, 1.0274889, 3.8229956, 2.9489243, 4.6103621, 2.8593775, 3.5027458, 2.3368797, 3.9059765, 3.3097038, 2.9642133, 4.1090774, 3.3954192, 2.1599487, 4.1834967, 3.1524552, 4.5397408, 3.5094389, 3.0603497, 2.7083975, 4.3067560, 3.0184312, 2.4475454, 2.7512634, 3.5456570, 3.2623655, 3.1965461, 4.4158751, 2.4468998, 3.4643230, 2.4960860, 3.2934396, 2.2344831, 5.9669187, 2.5541070, 2.6097323, 2.8106454, 3.9297801, 1.5020411, 2.7621832\n\n\nmedian\n\n\n2.908409\n\n\n\n\n3\n\n\n200\n\n\n3.3379816, 3.0467376, 3.5856568, 4.6881144, 2.9882412, 3.8726926, 4.9507921, 2.2179698, 3.1656292, 3.0616127, 2.9423149, 2.0744901, 2.6901850, 2.9727262, 4.0697656, 2.6710079, 1.8654389, 2.8375546, 1.8670523, 3.3272469, 1.8216279, 4.0887857, 3.7945111, 3.2769436, 4.1882102, 2.0985893, 4.1767634, 2.3121987, 2.9017401, 0.6995816, 2.6310833, 2.1461711, 2.5735019, 2.6055313, 2.3392725, 3.5565659, 4.2165840, 2.4282726, 1.3777620, 3.9605101, 3.3559599, 2.7266119, 4.4954292, 1.1048459, 4.3405233, 4.2465863, 2.2344911, 3.2161769, 2.6356327, 2.1793273, 3.5823607, 1.7455905, 1.4644593, 2.3608079, 3.9028003, 1.0813524, 2.9920942, 3.7360488, 3.8347558, 4.2006599, 2.0251797, 3.1578320, 3.6828930, 3.4354898, 3.6446918, 4.2536940, 3.4351071, 3.6951262, 3.3481487, 3.4263386, 3.9004165, 2.7830213, 3.4770821, 4.4557338, 2.3610055, 2.0883887, 2.1229056, 3.4073771, 1.2205407, 3.7718883, 2.9473680, 1.9577641, 2.6836830, 1.9353318, 2.7912719, 2.4061728, 1.4001696, 4.7920980, 2.7025164, 2.0886113, 3.5193641, 3.4665924, 3.7529639, 3.3625808, 3.6445837, 4.8089620, 2.5149883, 4.7129001, 2.6400966, 2.7897778, 3.8286028, 2.2471501, 3.1699194, 2.4675223, 1.2139572, 2.0048085, 4.2639231, 3.3735465, 2.8712022, 1.3690783, 1.2301025, 1.8408825, 2.4633109, 2.5279638, 2.2077192, 3.3804254, 2.2987340, 0.9632190, 2.0159687, 3.5687473, 2.4107160, 2.6069591, 2.3379330, 2.2647634, 4.7508700, 2.1508180, 4.8035604, 2.9215948, 1.8838999, 2.9627230, 1.3184766, 3.0004679, 2.7376545, 3.8483555, 3.1799709, 2.9088631, 2.8585798, 3.4850146, 2.7303344, 2.0311355, 1.8765016, 6.1393687, 2.0304541, 1.1624620, 1.7204242, 5.1641666, 5.4209916, 5.2109649, 3.9116650, 3.8978615, 2.2806115, 2.2426713, 1.1898476, 2.3905190, 2.7221135, 2.5300610, 3.6211107, 4.5201590, 3.9518112, 2.4877154, 3.9611690, 1.5032409, 2.7716587, 2.0895720, 3.9192839, 3.8641317, 2.6356586, 3.5662045, 2.1490408, 3.2971417, 3.2662161, 1.7114598, 3.7481715, 2.5776729, 1.2499376, 3.9234398, 2.1178963, 3.5202904, 2.6368864, 3.5266851, 4.3277226, 4.1275526, 3.9812273, 2.9276576, 5.0384100, 2.7966574, 1.7282428, 2.5984431, 2.6102377, 2.5112881, 2.4589464, 2.0001536, 3.1825102, 3.4826075, 3.9767062, 2.3317354, 2.8121231, 4.6023773, 3.8168615, 1.9140217\n\n\nmean\n\n\n2.978534\n\n\n\n\n3\n\n\n200\n\n\n3.3379816, 3.0467376, 3.5856568, 4.6881144, 2.9882412, 3.8726926, 4.9507921, 2.2179698, 3.1656292, 3.0616127, 2.9423149, 2.0744901, 2.6901850, 2.9727262, 4.0697656, 2.6710079, 1.8654389, 2.8375546, 1.8670523, 3.3272469, 1.8216279, 4.0887857, 3.7945111, 3.2769436, 4.1882102, 2.0985893, 4.1767634, 2.3121987, 2.9017401, 0.6995816, 2.6310833, 2.1461711, 2.5735019, 2.6055313, 2.3392725, 3.5565659, 4.2165840, 2.4282726, 1.3777620, 3.9605101, 3.3559599, 2.7266119, 4.4954292, 1.1048459, 4.3405233, 4.2465863, 2.2344911, 3.2161769, 2.6356327, 2.1793273, 3.5823607, 1.7455905, 1.4644593, 2.3608079, 3.9028003, 1.0813524, 2.9920942, 3.7360488, 3.8347558, 4.2006599, 2.0251797, 3.1578320, 3.6828930, 3.4354898, 3.6446918, 4.2536940, 3.4351071, 3.6951262, 3.3481487, 3.4263386, 3.9004165, 2.7830213, 3.4770821, 4.4557338, 2.3610055, 2.0883887, 2.1229056, 3.4073771, 1.2205407, 3.7718883, 2.9473680, 1.9577641, 2.6836830, 1.9353318, 2.7912719, 2.4061728, 1.4001696, 4.7920980, 2.7025164, 2.0886113, 3.5193641, 3.4665924, 3.7529639, 3.3625808, 3.6445837, 4.8089620, 2.5149883, 4.7129001, 2.6400966, 2.7897778, 3.8286028, 2.2471501, 3.1699194, 2.4675223, 1.2139572, 2.0048085, 4.2639231, 3.3735465, 2.8712022, 1.3690783, 1.2301025, 1.8408825, 2.4633109, 2.5279638, 2.2077192, 3.3804254, 2.2987340, 0.9632190, 2.0159687, 3.5687473, 2.4107160, 2.6069591, 2.3379330, 2.2647634, 4.7508700, 2.1508180, 4.8035604, 2.9215948, 1.8838999, 2.9627230, 1.3184766, 3.0004679, 2.7376545, 3.8483555, 3.1799709, 2.9088631, 2.8585798, 3.4850146, 2.7303344, 2.0311355, 1.8765016, 6.1393687, 2.0304541, 1.1624620, 1.7204242, 5.1641666, 5.4209916, 5.2109649, 3.9116650, 3.8978615, 2.2806115, 2.2426713, 1.1898476, 2.3905190, 2.7221135, 2.5300610, 3.6211107, 4.5201590, 3.9518112, 2.4877154, 3.9611690, 1.5032409, 2.7716587, 2.0895720, 3.9192839, 3.8641317, 2.6356586, 3.5662045, 2.1490408, 3.2971417, 3.2662161, 1.7114598, 3.7481715, 2.5776729, 1.2499376, 3.9234398, 2.1178963, 3.5202904, 2.6368864, 3.5266851, 4.3277226, 4.1275526, 3.9812273, 2.9276576, 5.0384100, 2.7966574, 1.7282428, 2.5984431, 2.6102377, 2.5112881, 2.4589464, 2.0001536, 3.1825102, 3.4826075, 3.9767062, 2.3317354, 2.8121231, 4.6023773, 3.8168615, 1.9140217\n\n\nmedian\n\n\n2.886471\n\n\n\n\n4\n\n\n5\n\n\n2.577562, 1.123664, 3.495275, 2.719760, 4.720884\n\n\nmean\n\n\n2.927429\n\n\n\n\n4\n\n\n5\n\n\n2.577562, 1.123664, 3.495275, 2.719760, 4.720884\n\n\nmedian\n\n\n2.719760\n\n\n\n\n4\n\n\n10\n\n\n2.702431, 4.166489, 2.750906, 4.090724, 2.774019, 2.651594, 3.167391, 1.799999, 2.749191, 3.163844\n\n\nmean\n\n\n3.001659\n\n\n\n\n4\n\n\n10\n\n\n2.702431, 4.166489, 2.750906, 4.090724, 2.774019, 2.651594, 3.167391, 1.799999, 2.749191, 3.163844\n\n\nmedian\n\n\n2.762463\n\n\n\n\n4\n\n\n20\n\n\n2.8900482, 3.4663823, 2.3946123, 1.1266935, 3.3379802, 4.0589477, 4.2738963, 3.5974829, 5.8015042, 3.4725719, 1.6463334, 2.9543077, 2.1672539, 3.2862271, 4.4010676, 0.9028631, 3.1765408, 3.5989289, 2.2799673, 3.1030414\n\n\nmean\n\n\n3.096833\n\n\n\n\n4\n\n\n20\n\n\n2.8900482, 3.4663823, 2.3946123, 1.1266935, 3.3379802, 4.0589477, 4.2738963, 3.5974829, 5.8015042, 3.4725719, 1.6463334, 2.9543077, 2.1672539, 3.2862271, 4.4010676, 0.9028631, 3.1765408, 3.5989289, 2.2799673, 3.1030414\n\n\nmedian\n\n\n3.231384\n\n\n\n\n4\n\n\n50\n\n\n2.5417992, 2.7712643, 3.2603008, 1.5902826, 2.4041137, 2.6021900, 2.1068297, 4.2283983, 1.3692486, 2.9955652, 3.4650244, 3.1077124, 2.5326740, 5.6138886, 3.0343272, 4.3560290, 1.9652125, 3.0990213, 1.5725810, 1.5456695, 1.6319697, 2.3603026, 1.2883407, 3.5445709, 3.2687218, 0.8946275, 3.0903373, 2.5934762, 2.5560058, 3.7752356, 3.4707229, 2.5997251, 3.3855622, 3.8563913, 3.3555159, 3.0903885, 4.5548858, 1.8718650, 2.3247428, 3.0633230, 2.3958766, 3.5463976, 3.2704150, 2.0239806, 2.8522347, 1.7801888, 2.9331158, 3.5143356, 3.1246447, 1.8767593\n\n\nmean\n\n\n2.801136\n\n\n\n\n4\n\n\n50\n\n\n2.5417992, 2.7712643, 3.2603008, 1.5902826, 2.4041137, 2.6021900, 2.1068297, 4.2283983, 1.3692486, 2.9955652, 3.4650244, 3.1077124, 2.5326740, 5.6138886, 3.0343272, 4.3560290, 1.9652125, 3.0990213, 1.5725810, 1.5456695, 1.6319697, 2.3603026, 1.2883407, 3.5445709, 3.2687218, 0.8946275, 3.0903373, 2.5934762, 2.5560058, 3.7752356, 3.4707229, 2.5997251, 3.3855622, 3.8563913, 3.3555159, 3.0903885, 4.5548858, 1.8718650, 2.3247428, 3.0633230, 2.3958766, 3.5463976, 3.2704150, 2.0239806, 2.8522347, 1.7801888, 2.9331158, 3.5143356, 3.1246447, 1.8767593\n\n\nmedian\n\n\n2.892675\n\n\n\n\n4\n\n\n100\n\n\n3.0181795, 3.1820159, 2.8390711, 3.9013929, 2.9089998, 2.3781238, 2.9665397, 2.0201009, 3.0919985, 3.8296835, 2.3138039, 4.3592009, 3.5122567, 1.2843327, 0.8425531, 3.6482090, 1.1299042, 3.2927918, 3.1919376, 3.6177099, 3.6207109, 5.0441964, 2.0670874, 2.5374294, 3.2004210, 1.6477960, 2.1863851, 2.4497617, 3.6312731, 3.6447851, 0.6144123, 3.4086673, 3.1185903, 3.6694021, 1.7242021, 2.6752880, 5.1434517, 3.0748484, 2.9999282, 4.5485503, 2.9316575, 3.3015455, 4.2693085, 1.6217036, 2.4394224, 4.2841995, 3.8561266, 2.8120557, 5.8017036, 3.3899501, 3.3749675, 3.6431217, 1.0892514, 3.6225169, 2.8967333, 4.3033562, 3.5743987, 3.4982402, 3.1149025, 2.3937729, 4.3760731, 4.7448725, 2.1975521, 3.5528219, 2.1416862, 3.2485131, 4.4099829, 2.7861281, 2.5234690, 3.4944403, 1.8494273, 2.8579902, 2.9158367, 2.1895905, 3.5870681, 3.0879314, 4.0345519, 2.0506254, 4.8413177, 2.7391807, 2.5804362, 2.6821090, 3.3549040, 4.5469212, 1.9058571, 3.6630682, 1.8668980, 1.7935556, 3.0096299, 2.1824717, 2.3973071, 1.9284134, 2.5119362, 2.8627759, 1.2537074, 4.7452578, 1.6890902, 4.7486918, 3.2425947, 4.2115684\n\n\nmean\n\n\n3.053612\n\n\n\n\n4\n\n\n100\n\n\n3.0181795, 3.1820159, 2.8390711, 3.9013929, 2.9089998, 2.3781238, 2.9665397, 2.0201009, 3.0919985, 3.8296835, 2.3138039, 4.3592009, 3.5122567, 1.2843327, 0.8425531, 3.6482090, 1.1299042, 3.2927918, 3.1919376, 3.6177099, 3.6207109, 5.0441964, 2.0670874, 2.5374294, 3.2004210, 1.6477960, 2.1863851, 2.4497617, 3.6312731, 3.6447851, 0.6144123, 3.4086673, 3.1185903, 3.6694021, 1.7242021, 2.6752880, 5.1434517, 3.0748484, 2.9999282, 4.5485503, 2.9316575, 3.3015455, 4.2693085, 1.6217036, 2.4394224, 4.2841995, 3.8561266, 2.8120557, 5.8017036, 3.3899501, 3.3749675, 3.6431217, 1.0892514, 3.6225169, 2.8967333, 4.3033562, 3.5743987, 3.4982402, 3.1149025, 2.3937729, 4.3760731, 4.7448725, 2.1975521, 3.5528219, 2.1416862, 3.2485131, 4.4099829, 2.7861281, 2.5234690, 3.4944403, 1.8494273, 2.8579902, 2.9158367, 2.1895905, 3.5870681, 3.0879314, 4.0345519, 2.0506254, 4.8413177, 2.7391807, 2.5804362, 2.6821090, 3.3549040, 4.5469212, 1.9058571, 3.6630682, 1.8668980, 1.7935556, 3.0096299, 2.1824717, 2.3973071, 1.9284134, 2.5119362, 2.8627759, 1.2537074, 4.7452578, 1.6890902, 4.7486918, 3.2425947, 4.2115684\n\n\nmedian\n\n\n3.081390\n\n\n\n\n4\n\n\n200\n\n\n1.7163342, 3.3961512, 3.3508282, 2.5039774, 4.6840417, 1.7388718, 2.4119315, 2.8617928, 2.0973344, 2.1290068, 3.0838036, 1.9595181, 2.4239329, 2.2075452, 2.5775338, 3.3921317, 0.3204456, 3.4629006, 3.3416441, 2.6480426, 2.3242814, 2.3658204, 2.1976661, 3.0677451, 2.6734496, 2.9459689, 3.2758985, 2.5727472, 5.6979733, 4.4121483, 3.0515411, 3.5657808, 2.2442798, 2.8411756, 2.1189565, 1.9452891, 4.0218776, 5.2161058, 3.9068794, 2.0692046, 3.7466105, 0.9048727, 3.0184510, 4.7313734, 3.8866503, 1.3898996, 4.2114470, 3.1818671, 3.6175192, 3.0604298, 2.1619366, 0.9402405, 3.6955505, 3.0629654, 2.3677511, 1.1087315, 4.3015642, 3.9787920, 4.7858164, 3.3748548, 3.9135828, 3.6184084, 4.1628526, 4.6338721, 2.4531146, 3.8241168, 1.8725589, 1.7221809, 1.7535746, 0.9253364, 3.6569145, 3.4339670, 3.5715451, 4.6249207, 4.6819166, 4.2661941, 1.2672861, 1.9829952, 2.3027015, 2.2311619, 3.1796823, 3.0096723, 2.7324376, 2.4350636, 3.3580408, 2.3852859, 4.2023372, 4.2472032, 3.9590326, 2.5610634, 3.1149327, 3.8371374, 3.2669376, 1.7471463, 5.1862870, 1.9557388, 2.1586536, 2.4014890, 4.2447406, 3.3300805, 1.9529079, 3.8841227, 3.5972757, 3.2476957, 2.6679333, 4.2667915, 3.2644636, 1.3508051, 2.6746331, 2.9296305, 2.1811953, 2.3909156, 2.6666524, 1.3167173, 1.7220197, 4.0457457, 2.8216641, 3.9428210, 3.2624007, 4.6230240, 3.2122163, 2.3820006, 2.0584235, 2.3835105, 2.0552709, 1.8885412, 1.8576204, 3.4357655, 3.1843560, 2.8095216, 2.8899896, 5.7854697, 3.5817640, 1.0424798, 3.8083765, 2.1554346, 4.2815605, 4.4691496, 3.0988933, 0.8793161, 1.6357474, 2.0181340, 3.3496876, 3.5091329, 1.3825665, 3.7306101, 3.6229595, 4.9544289, 3.4510336, 2.1901128, 3.5817777, 2.5769730, 2.3174844, 2.7497388, 3.5184649, 4.5784404, 1.6337282, 4.4608322, 3.4271655, 3.4710742, 2.2471736, 2.7938811, 2.7958883, 2.3072717, 3.4583664, -0.1945934, 1.6988172, 4.0357038, 1.6414525, 3.5970889, 4.2535352, 3.2422433, 1.6789045, 3.1877825, 4.6130923, 4.3407352, 5.3869467, 2.2066576, 3.4598220, 2.7061118, 1.1128346, 2.8470241, 2.5815477, 5.0300598, 3.1588658, 3.6022633, 3.7555937, 2.0517514, 2.2354213, 4.0315750, 3.2004044, 5.0633260, 2.8667188, 4.1450519, 3.4346506, 2.4464445, 3.2140254, 3.4815925, 2.8929998, 3.3238329\n\n\nmean\n\n\n3.013620\n\n\n\n\n4\n\n\n200\n\n\n1.7163342, 3.3961512, 3.3508282, 2.5039774, 4.6840417, 1.7388718, 2.4119315, 2.8617928, 2.0973344, 2.1290068, 3.0838036, 1.9595181, 2.4239329, 2.2075452, 2.5775338, 3.3921317, 0.3204456, 3.4629006, 3.3416441, 2.6480426, 2.3242814, 2.3658204, 2.1976661, 3.0677451, 2.6734496, 2.9459689, 3.2758985, 2.5727472, 5.6979733, 4.4121483, 3.0515411, 3.5657808, 2.2442798, 2.8411756, 2.1189565, 1.9452891, 4.0218776, 5.2161058, 3.9068794, 2.0692046, 3.7466105, 0.9048727, 3.0184510, 4.7313734, 3.8866503, 1.3898996, 4.2114470, 3.1818671, 3.6175192, 3.0604298, 2.1619366, 0.9402405, 3.6955505, 3.0629654, 2.3677511, 1.1087315, 4.3015642, 3.9787920, 4.7858164, 3.3748548, 3.9135828, 3.6184084, 4.1628526, 4.6338721, 2.4531146, 3.8241168, 1.8725589, 1.7221809, 1.7535746, 0.9253364, 3.6569145, 3.4339670, 3.5715451, 4.6249207, 4.6819166, 4.2661941, 1.2672861, 1.9829952, 2.3027015, 2.2311619, 3.1796823, 3.0096723, 2.7324376, 2.4350636, 3.3580408, 2.3852859, 4.2023372, 4.2472032, 3.9590326, 2.5610634, 3.1149327, 3.8371374, 3.2669376, 1.7471463, 5.1862870, 1.9557388, 2.1586536, 2.4014890, 4.2447406, 3.3300805, 1.9529079, 3.8841227, 3.5972757, 3.2476957, 2.6679333, 4.2667915, 3.2644636, 1.3508051, 2.6746331, 2.9296305, 2.1811953, 2.3909156, 2.6666524, 1.3167173, 1.7220197, 4.0457457, 2.8216641, 3.9428210, 3.2624007, 4.6230240, 3.2122163, 2.3820006, 2.0584235, 2.3835105, 2.0552709, 1.8885412, 1.8576204, 3.4357655, 3.1843560, 2.8095216, 2.8899896, 5.7854697, 3.5817640, 1.0424798, 3.8083765, 2.1554346, 4.2815605, 4.4691496, 3.0988933, 0.8793161, 1.6357474, 2.0181340, 3.3496876, 3.5091329, 1.3825665, 3.7306101, 3.6229595, 4.9544289, 3.4510336, 2.1901128, 3.5817777, 2.5769730, 2.3174844, 2.7497388, 3.5184649, 4.5784404, 1.6337282, 4.4608322, 3.4271655, 3.4710742, 2.2471736, 2.7938811, 2.7958883, 2.3072717, 3.4583664, -0.1945934, 1.6988172, 4.0357038, 1.6414525, 3.5970889, 4.2535352, 3.2422433, 1.6789045, 3.1877825, 4.6130923, 4.3407352, 5.3869467, 2.2066576, 3.4598220, 2.7061118, 1.1128346, 2.8470241, 2.5815477, 5.0300598, 3.1588658, 3.6022633, 3.7555937, 2.0517514, 2.2354213, 4.0315750, 3.2004044, 5.0633260, 2.8667188, 4.1450519, 3.4346506, 2.4464445, 3.2140254, 3.4815925, 2.8929998, 3.3238329\n\n\nmedian\n\n\n3.065355\n\n\n\n\n5\n\n\n5\n\n\n3.514865, 2.496826, 2.801990, 3.761042, 2.422648\n\n\nmean\n\n\n2.999474\n\n\n\n\n5\n\n\n5\n\n\n3.514865, 2.496826, 2.801990, 3.761042, 2.422648\n\n\nmedian\n\n\n2.801990\n\n\n\n\n\n\n\nNow we are finally ready to analyze the results of our simulation. First, let’s compute the bias and variance of our estimators for each sample size.\n\nCodedf %>%\n  group_by(size, Estimator) %>%\n  summarize(Bias = (mean(Estimate) - 3),\n            Variance = var(Estimate)) %>%\n  pivot_longer(Bias:Variance) -> summary_df\n\n\n\n\n\n\n\n\n\nsize\n\n\nEstimator\n\n\nname\n\n\nvalue\n\n\n\n\n\n5\n\n\nmean\n\n\nBias\n\n\n0.0000212\n\n\n\n\n5\n\n\nmean\n\n\nVariance\n\n\n0.1991816\n\n\n\n\n5\n\n\nmedian\n\n\nBias\n\n\n0.0014145\n\n\n\n\n5\n\n\nmedian\n\n\nVariance\n\n\n0.2857473\n\n\n\n\n10\n\n\nmean\n\n\nBias\n\n\n-0.0009591\n\n\n\n\n10\n\n\nmean\n\n\nVariance\n\n\n0.0999965\n\n\n\n\n10\n\n\nmedian\n\n\nBias\n\n\n-0.0003135\n\n\n\n\n10\n\n\nmedian\n\n\nVariance\n\n\n0.1382072\n\n\n\n\n20\n\n\nmean\n\n\nBias\n\n\n0.0006338\n\n\n\n\n20\n\n\nmean\n\n\nVariance\n\n\n0.0502061\n\n\n\n\n20\n\n\nmedian\n\n\nBias\n\n\n0.0010408\n\n\n\n\n20\n\n\nmedian\n\n\nVariance\n\n\n0.0736867\n\n\n\n\n50\n\n\nmean\n\n\nBias\n\n\n0.0006931\n\n\n\n\n50\n\n\nmean\n\n\nVariance\n\n\n0.0200216\n\n\n\n\n50\n\n\nmedian\n\n\nBias\n\n\n0.0007830\n\n\n\n\n50\n\n\nmedian\n\n\nVariance\n\n\n0.0305778\n\n\n\n\n100\n\n\nmean\n\n\nBias\n\n\n0.0000954\n\n\n\n\n100\n\n\nmean\n\n\nVariance\n\n\n0.0100445\n\n\n\n\n100\n\n\nmedian\n\n\nBias\n\n\n0.0000096\n\n\n\n\n100\n\n\nmedian\n\n\nVariance\n\n\n0.0154879\n\n\n\n\n200\n\n\nmean\n\n\nBias\n\n\n-0.0000699\n\n\n\n\n200\n\n\nmean\n\n\nVariance\n\n\n0.0050434\n\n\n\n\n200\n\n\nmedian\n\n\nBias\n\n\n-0.0006630\n\n\n\n\n200\n\n\nmedian\n\n\nVariance\n\n\n0.0078376\n\n\n\n\n\n\n\nPlotting the bias and variance as a function of sample size, we see that both the mean and median are unbiased estimators of the center of the true distribution, but the median has higher variance. Therefore, we would prefer the mean under these assumptions.\n\nCodesummary_df %>%\n  ggplot() +\n  aes(x=size, y=value, color=Estimator) +\n  geom_line(alpha=0.6) +\n  geom_point(alpha=0.6) +\n  facet_wrap(~name) +\n  scale_color_brewer(palette = \"Set1\") +\n  cowplot::theme_cowplot(font_size = 12, font_family = \"Lato\") +\n  theme(legend.position = c(0.8,0.8)) +\n  labs(\n    x = \"Sample Size\",\n    y = \"Estimated Value\"\n  )\n\n\n\n\nPlotting the sampling distribution for each of the estimators shows that the median indeed has higher variance.\n\nCodelabel_names <- as_labeller(c(`5` = \"Sample Size: 5\",\n                             `10` = \"Sample Size: 10\",\n                             `20` = \"Sample Size: 20\",\n                             `50` = \"Sample Size: 50\",\n                             `100` = \"Sample Size: 100\",\n                             `200` = \"Sample Size: 200\")) \n\ndf %>%\n  ggplot() +\n  aes(x=Estimate, color=Estimator, fill=Estimator) +\n  geom_density(alpha=0.3, size=0.8) +\n  facet_wrap(~size, labeller=label_names) +\n  geom_vline(aes(xintercept = 3), linetype=2, alpha=0.3) +\n  coord_cartesian(xlim=c(1,5), ylim=c(0,6)) +\n  cowplot::theme_cowplot(font_family = \"Lato\", font_size=12) +\n  scale_fill_brewer(palette = \"Set1\") +\n  scale_color_brewer(palette = \"Set1\") +\n  theme(legend.position = c(0.88,0.88)) +\n  labs(\n    title = \"Normal(3,1) Distribution\",\n    subtitle = \"Performance of mean and median\",\n    x=\"Estimate\",\n    y=\"PDF\"\n  )"
  },
  {
    "objectID": "posts/robust-estimators/index.html#scenario-2",
    "href": "posts/robust-estimators/index.html#scenario-2",
    "title": "Statistical simulation of robust estimators with tidyverse tools",
    "section": "Scenario 2",
    "text": "Scenario 2\nNow let’s take a look at a distribution with heavier tails than the normal. An example is a mixture of normal two distributions.\nThe data-generating process is this: With probability 0.9, draw from the \\(N(3, 1)\\) distribution. Otherwise, (with probability 0.1), draw from the \\(N(3, 10)\\) distribution.\nWe can write a function to draw from this distribution.\n\nCode# generates 1 draw from the specifies mixture normal distribution\nmixed_normal <- function(){\n  x <- runif(1)\n  if (x>0.1) {\n    return(rnorm(n=1, mean = 3, sd=1))\n  }\n  else{\n    return(rnorm(n=1, mean = 3, sd=10))\n  }\n}\n\n# generates n draws from the specifies mixture normal distribution\nrmixed_norm  <- function(n){\n  map_dbl(1:n, ~mixed_normal())\n}\n\n\nPlotting the normal distribution and the mixture distribution on top of each other, we see that they are very similar, but the mixture distribution has heavier tails (i.e., more of the probability mass is in the tails compared to the normal distribution).\n\nCodetibble(normal = rnorm(1e5, mean=3),\n       mixture = rmixed_norm(1e5)) %>%\n  pivot_longer(cols=normal:mixture, names_to=\"Distribution\", values_to=\"value\") %>%\n  ggplot() +\n  aes(x=value, color=Distribution) +\n  geom_density(alpha=0.7)+\n  cowplot::theme_cowplot(font_family = \"Source Sans Pro\", font_size=12) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme(legend.position = c(0.88,0.90)) +\n  labs(\n    title = \"Mixture Normal vs Normal Distribution\",\n    subtitle = \"\",\n    x= \"X\",\n    y= \"PDF\"\n  )\n\n\n\n\nNow let’s compare the performance of the mean and median on the mixture distribution.\n\nCodesize <- c(5,10,20,50,100,200)\ntrial <- 1:1e5\n\ndf <- crossing(trial, size)\n\ndf$data <- map(df$size, ~rmixed_norm(n=.x))\n\ndf$mean <- map_dbl(df$data, ~mean(.x))\ndf$median <- map_dbl(df$data, ~median(.x))\n\ndf <- pivot_longer(df, cols=mean:median, names_to=\"Estimator\", values_to=\"Estimate\")\n\ndf %>%\n  group_by(size, Estimator) %>%\n  summarize(Bias = (mean(Estimate) - 3),\n            Variance = var(Estimate)) %>%\n  pivot_longer(Bias:Variance) -> summary_df\n\n\nsummary_df %>%\n  ggplot() +\n  aes(x=size, y=value, color=Estimator) +\n  geom_line(alpha=0.6) +\n  geom_point(alpha=0.6) +\n  facet_wrap(~name) +\n  scale_color_brewer(palette = \"Set1\") +\n  cowplot::theme_cowplot(font_size = 12, font_family = \"Lato\") +\n  theme(legend.position = c(0.8,0.8)) +\n  labs(\n    x = \"Sample Size\",\n    y = \"Estimated Value\"\n  )\n\n\n\nCodelabel_names <- as_labeller(c(`5` = \"Sample Size: 5\",\n                             `10` = \"Sample Size: 10\",\n                             `20` = \"Sample Size: 20\",\n                             `50` = \"Sample Size: 50\",\n                             `100` = \"Sample Size: 100\",\n                             `200` = \"Sample Size: 200\")) \n\ndf %>%\n  ggplot() +\n  aes(x=Estimate, color=Estimator, fill=Estimator) +\n  geom_density(alpha=0.3, size=0.8) +\n  facet_wrap(~size, labeller=label_names) +\n  geom_vline(aes(xintercept = 3), linetype=2, alpha=0.3) +\n  coord_cartesian(xlim=c(1,5), ylim=c(0,6)) +\n  cowplot::theme_cowplot(font_family = \"Lato\", font_size=12) +\n  scale_fill_brewer(palette = \"Set1\") +\n  scale_color_brewer(palette = \"Set1\") +\n  theme(legend.position = c(0.88,0.88)) +\n  labs(\n    title = \"Mixture Normal Distribution\",\n    subtitle = \"Performance of mean and median\",\n    x=\"Estimate\",\n    y=\"PDF\"\n  )\n\n\n\n\nIt looks like the median greatly outperforms the mean! Both are unbiased, but the median has lower variance."
  },
  {
    "objectID": "posts/robust-estimators/index.html#take-away-points",
    "href": "posts/robust-estimators/index.html#take-away-points",
    "title": "Statistical simulation of robust estimators with tidyverse tools",
    "section": "Take-away points",
    "text": "Take-away points\n\nSimulation is a powerful tool in statistics. Here we showed how is can be used to compare the properties of estimators.\nFor distributions with heavy tails, the median may be a better estimator of center than the mean."
  },
  {
    "objectID": "posts/gradient-descent-pt1/index.html",
    "href": "posts/gradient-descent-pt1/index.html",
    "title": "What is Gradient Descent? (Part I)",
    "section": "",
    "text": "Codelibrary(tidyverse)\nlibrary(glue)\nlibrary(gganimate)"
  },
  {
    "objectID": "posts/gradient-descent-pt1/index.html#introduction",
    "href": "posts/gradient-descent-pt1/index.html#introduction",
    "title": "What is Gradient Descent? (Part I)",
    "section": "Introduction",
    "text": "Introduction\nGradient descent is an optimization algorithm that finds the minimum of a function. Commonly, the function to be minimized is a loss function: a function that quantifies the “badness” associated with the given inputs, which you would naturally want to minimize. A common loss function is the mean-squared error. For example, using mean-squared error, the loss incurred by an inaccurate prediction is the squared distance from the prediction to the true value. Neural networks are commonly optimized using some form of gradient descent.\nLet’s start with a simple example, where we already know the answer. We wish to minimize the quadratic function given by\n\\[\nf(x) = (x + 2)^2 + 3\n\\]\nThe shape of the function, a parabola, is shown in the plot below. Most applications of gradient descent occur in dimensions much higher than 2D, where we cannot so easily visualize the function we are trying to minimize.\n\nCodex <- seq(-10,5,length.out=1e4)\ny <- (x + 2)^2 + 3\n\nplot_data <- tibble(x, y)\n\nplot_data %>%\n  ggplot() +\n  aes(x=x, y=y) +\n  geom_line() +\n  geom_hline(yintercept = 3, linetype=2) +\n  geom_vline(xintercept = -2, linetype=2) +\n  scale_x_continuous(breaks=c(-2)) +\n  scale_y_continuous(breaks=c(3)) +\n  cowplot::theme_cowplot(font_family = \"Lato\")\n\n\n\n\nFinding the minimum is a solved problem using calculus. We can take the first-derivative, set it equal to zero, and solve, to obtain a minimum of \\(y=3\\), which occurs at \\(x=-2\\). Then an application of the second-derivative test confirms that it is minimum, rather than a maximum. Our goal is to reproduce this result using gradient descent."
  },
  {
    "objectID": "posts/gradient-descent-pt1/index.html#an-analogy-for-gradient-descent",
    "href": "posts/gradient-descent-pt1/index.html#an-analogy-for-gradient-descent",
    "title": "What is Gradient Descent? (Part I)",
    "section": "An analogy for gradient descent",
    "text": "An analogy for gradient descent\nGradient descent works by starting at a location in the space. Then, each iteration of the algorithm it moves downhill with respect to the function, which is by definition opposite the gradient. The algorithm proceeds downhill until it reaches a minimum where the gradient is zero within some tolerance (success) or the maximum number of iterations is reached (failure). Apart from the tuning parameters of the algorithm, which we will discuss later, the only information gradient descent needs to work is the function to be minimized and its first derivative.\nHere’s an analogy. Think of a ball moving under the influence of gravity in a landscape of hills and valleys. If you let the ball move freely, it will roll to a point of minimum height in the landscape. Does the ball know the whole landscape and decide to move to the minimum point? No. The only information it uses to find the minimum is the slope at the point it is currently at. The local information is enough. Gravity is constantly moving the ball downhill, based on the slope of the landscape at the current location."
  },
  {
    "objectID": "posts/gradient-descent-pt1/index.html#the-gradient-descent-algorithm",
    "href": "posts/gradient-descent-pt1/index.html#the-gradient-descent-algorithm",
    "title": "What is Gradient Descent? (Part I)",
    "section": "The gradient descent algorithm",
    "text": "The gradient descent algorithm\nThe general algorithm for gradient descent is as follows:\n\nPick a starting point and a learning rate\nUsing the derivative of the function, compute the gradient (i.e., slope) at the current point.\nCompute the step size: \\(\\text{delta} = - \\text{gradient} * \\text{learning\\_rate}\\)\n\nSet \\(x \\rightarrow x + \\text{delta}\\)\n\nRepeat from step 2 until either delta is below a certain threshold or a maximum number of iterations is reached\n\nNow, let’s go through this step-by-step for our quadratic function example.\n\nPick an arbitrarily chosen starting point of \\(x=5\\). Thus \\(f(x) = (5 + 2)^2 + 3 = 52\\). We also pick a commonly used learning rate of 0.1.\nThe derivative of \\(f(x)\\) is \\(\\frac{df}{dx} = 2x+4\\). So the gradient is \\(2(5) + 4 = \\boxed{14}\\)\n\nSet the step size: \\(\\text{delta} = - \\text{gradient} * \\text{learning\\_rate} = - 14* 0.01 = \\boxed{-0.14}\\)\n\nSet the current value of \\(x\\) to \\(x + delta = 5 - 0.14 = \\boxed{4.86}\\)\n\nAssume we set the step size (delta) threshold to 0.001 and the maximum number of iteration to 5000. Since neither of these criteria are currently met, we go back to step 2, but now with \\(x=4.86\\), and repeat until we meet one of the exit conditions."
  },
  {
    "objectID": "posts/gradient-descent-pt1/index.html#implementation-in-r",
    "href": "posts/gradient-descent-pt1/index.html#implementation-in-r",
    "title": "What is Gradient Descent? (Part I)",
    "section": "Implementation in R",
    "text": "Implementation in R\nNow that we understand the gradient descent algorithm in theory, let’s translate this into R code.\n\nCode# Define f(x) and df/dx\nf <- function(x){(x+2)^2 + 3}\ndf_dx <- function(x){2*x+4}\n\n# Set learning rate\nlearning_rate <- 0.1\n\n# Set starting point\nx <- 5\n\n# Create a counter to track the iteration\niter <- 1\n\nwhile(TRUE){ # Loop until we reach exit conditions\n  \n  # Compute the gradient at the current x value\n  current_grad <- df_dx(x)\n  \n  # Compute delta at the current x value\n  delta <- -current_grad*learning_rate\n  \n  # Compute the updated x value, given delta\n  x <- x + delta\n  \n  # Print the current state of the algorithm\n  # the glue package is used for printing variables easily\n  print(glue(\"Iteration: {iter}\"))\n  print(glue(\"x: {x}\"))\n  print(glue(\"y: {f(x)}\"))\n  print(glue(\"delta: {delta}\"))\n  \n  # Increment the iteration counter\n  iter <- iter + 1\n  \n  # Exit if delta is below the threshold or max iterations have been reached\n  if (abs(delta)<0.001 | iter>5000) {\n    break\n  }\n}\n\n\nHere’s the output from the beginning and end of the algorithm.\nIteration: 1\nx: 3.6\ny: 34.36\ndelta: -1.4\nIteration: 2\nx: 2.48\ny: 23.0704\ndelta: -1.12\nIteration: 3\nx: 1.584\ny: 15.845056\ndelta: -0.896\n\n...\n\nIteration: 32\nx: -1.994454028624\ny: 3.0000307577985\ndelta: -0.00138649284399963\nIteration: 33\nx: -1.9955632228992\ny: 3.00001968499104\ndelta: -0.00110919427519969\nIteration: 34\nx: -1.99645057831936\ny: 3.00001259839427\ndelta: -0.000887355420159741\n\nWe see that our gradient descent algorithm converged to the minimum at \\((3,-2)\\), with some error that could be reduced if we lowered the step size threshold."
  },
  {
    "objectID": "posts/gradient-descent-pt1/index.html#animations",
    "href": "posts/gradient-descent-pt1/index.html#animations",
    "title": "What is Gradient Descent? (Part I)",
    "section": "Animations",
    "text": "Animations\nAnimations are a good way to get intuition on how optimization algorithms like gradient descent work. The animation below shows our algorithm using three different learning rates. The code to create the animations can be found here.\n\nVideo\n\nUsing a learning rate of 0.01 takes much longer to converge, but with more complicated functions it is less likely to overshoot and miss the minimum. Using a learning rate of 0.95, the algorithm constantly overshoots the minimum and oscillates on either side of it until it finally settles down. A learning rate of 0.1 seems like the best compromise between accuracy and speed, since we know the true minimum.\n\n\nVideo\nSpecial case is when the learning rate is exactly 1: the algorithm will move between two points on opposite sides on the parabola and remain stuck there\nIn this specific example, a learning rate higher than 1 will constantly overshoot the minimum and will never converge. A special case is when the learning rate is exactly 1: the algorithm will move between two points on opposite sides on the parabola and remain stuck there. See the animation below.\nIn real applications, where the true minimum is unknown, trial and error is necessary to find a good learning rate. There are more complex algorithms that build on gradient descent to automatically tune the learning rate as the algorithm progresses."
  },
  {
    "objectID": "posts/gradient-descent-pt1/index.html#next-steps",
    "href": "posts/gradient-descent-pt1/index.html#next-steps",
    "title": "What is Gradient Descent? (Part I)",
    "section": "Next steps",
    "text": "Next steps\nIn the next post in this series, we will extend our gradient descent algorithm to optimize over more complex functions: fitting a least-squares regression line, and a logistic regression curve."
  },
  {
    "objectID": "posts/odds-ratio-dichotomize/index.html",
    "href": "posts/odds-ratio-dichotomize/index.html",
    "title": "Sensitivity of odds-ratios calculated on dichotomized variables to inclusion criteria",
    "section": "",
    "text": "Codelibrary(tidyverse)\nset.seed(123)"
  },
  {
    "objectID": "posts/odds-ratio-dichotomize/index.html#motivation",
    "href": "posts/odds-ratio-dichotomize/index.html#motivation",
    "title": "Sensitivity of odds-ratios calculated on dichotomized variables to inclusion criteria",
    "section": "Motivation",
    "text": "Motivation\nIn this document, we will show how calculating an odds ratio based on a dichotomized continuous predictor variable can be manipulated by changing the range of the predictor variable that was sampled (i.e, study inclusion criteria), whereas a logistic regression model that uses the continuous values of the predictor will produce a stable estimate."
  },
  {
    "objectID": "posts/odds-ratio-dichotomize/index.html#scenario",
    "href": "posts/odds-ratio-dichotomize/index.html#scenario",
    "title": "Sensitivity of odds-ratios calculated on dichotomized variables to inclusion criteria",
    "section": "Scenario",
    "text": "Scenario\nAssume that we are interested in a disease where the incidence varies with age.\nWe will assume as the true model a simple relationship where the probability of developing the disease is a linear function of age. The below plot shows this relationship.\n\nCode# True model of disease probability is a linear function of age\np_disease <- function(age){\n  0.25 + 0.0075*age\n}\n\n# Plot true model\ntibble(age = seq(20, 80, length.out=2), prob = p_disease(age)) %>%\n  ggplot() +\n  aes(x=age, y=prob) +\n  geom_line() +\n  labs(title = \"True probability of having the disease\",\n       x=\"Age\",\n       y=\"P(Disease)\") +\n  theme_bw()\n\n\n\n\nWe decide to sample subjects from the population and record if they have the disease. For simplicity, assume we sample patients uniformly within a given age range. We will show that dichotomizing age at a cutpoint is not a good idea, and can lead to estimates that can be greatly affected by the chosen age range to be sampled.\nTo dichotomize the predictor variable, let’s compare the incidence of disease among old (age > 50) and young (age < 50) patients and calculate an odds ratio, instead of using age as a continuous variable. The below simulation shows the results of two scenarios. As a comparison, we also fit a logistic regression using continuous age.\nFirst, we sample 10,000 subjects with ages between 40 and 60. Second, we sample 10,000 subjects with ages between 20 and 80. We show that the choices of inclusion criteria has a large effect on the odds ratio comparing odds of disease between young and old subjects, but the estimates provided by logistic regression are unchanged."
  },
  {
    "objectID": "posts/odds-ratio-dichotomize/index.html#simulation",
    "href": "posts/odds-ratio-dichotomize/index.html#simulation",
    "title": "Sensitivity of odds-ratios calculated on dichotomized variables to inclusion criteria",
    "section": "Simulation",
    "text": "Simulation\nSample from ages 40 to 60\n\nCode# Draw 10,000 patients uniformly between 40 and 60\nages <- runif(10000, min=40, max=60)\n\n# Calculate true probabilities for each patient\nprobs <- p_disease(ages)\n\n# Generate data where each patient has `probs` probability of having the disease\ndata <- map_dbl(probs, ~sample(c(0,1), size=1, prob=c(1-.x, .x)))\n\n\n\nCode# Put simulation data into a data frame\ndf <- tibble(age=ages, prob=probs, disease=data)\n\n# Dichotomize at age = 50\ndf$old <- (df$age > 50)\n\nhead(df)\n\n\n\n\nage\nprob\ndisease\nold\n\n\n\n45.75155\n0.5931366\n1\nFALSE\n\n\n55.76610\n0.6682458\n1\nTRUE\n\n\n48.17954\n0.6113465\n0\nFALSE\n\n\n57.66035\n0.6824526\n1\nTRUE\n\n\n58.80935\n0.6910701\n1\nTRUE\n\n\n40.91113\n0.5568335\n1\nFALSE\n\n\n\n\n\n\n\nCodetable(df$disease, df$old)\n\n   \n    FALSE TRUE\n  0  2081 1614\n  1  2976 3329\n\n\n\nCodeodds_ratio <- (3329 / 1614) / (2976 / 2081)\n\nodds_ratio\n\n[1] 1.442279\n\n\n\nCode# Fit logistic regression model using continuous age\nglm(disease ~ age, family=binomial(), data=df)\n\n\nCall:  glm(formula = disease ~ age, family = binomial(), data = df)\n\nCoefficients:\n(Intercept)          age  \n   -1.23211      0.03547  \n\nDegrees of Freedom: 9999 Total (i.e. Null);  9998 Residual\nNull Deviance:      13170 \nResidual Deviance: 13080    AIC: 13080\n\n\nSample from ages 20 to 80\n\nCodeages <- runif(10000, min=20, max=80)\nprobs <- p_disease(ages)\ndata <- map_dbl(probs, ~sample(c(0,1), size=1, prob=c(1-.x, .x)))\ndf <- tibble(age=ages, prob=probs, disease=data)\ndf$old <- (df$age > 50)\n\ntable(df$disease, df$old)\n\n   \n    FALSE TRUE\n  0  2400 1179\n  1  2625 3796\n\n\n\nCodeodds_ratio <- (3796 / 1179) / (2625 / 2400)\n\nodds_ratio\n\n[1] 2.943705\n\n\n\nCodeglm(disease ~ age, family=binomial(), data=df)\n\n\nCall:  glm(formula = disease ~ age, family = binomial(), data = df)\n\nCoefficients:\n(Intercept)          age  \n   -1.15573      0.03586  \n\nDegrees of Freedom: 9999 Total (i.e. Null);  9998 Residual\nNull Deviance:      13040 \nResidual Deviance: 12220    AIC: 12230"
  },
  {
    "objectID": "posts/odds-ratio-dichotomize/index.html#conclusion",
    "href": "posts/odds-ratio-dichotomize/index.html#conclusion",
    "title": "Sensitivity of odds-ratios calculated on dichotomized variables to inclusion criteria",
    "section": "Conclusion",
    "text": "Conclusion\nWe see that when sampling from ages 40 to 60, the dichotomization approach estimated an odds ratio of 1.44 compared to an odds ratio of 2.94 when sampling from ages 20 to 80.\nIn contrast, when sampling from ages 40 to 60, the logistic regression estimated a regression coefficient for age of 0.0355 compared to a very similar value of 0.0359 when sampling from ages 20 to 80."
  },
  {
    "objectID": "posts/bs4/index.html",
    "href": "posts/bs4/index.html",
    "title": "Creating a bookdown book with the bs4 theme",
    "section": "",
    "text": "If you’ve been learning R through the amazing free resources made available by the R community, then you probably seen examples of the bs4 bookdown theme in a few of these various sources:\n\nR for Data Science: https://r4ds.had.co.nz\nThe ggplot2 book: https://ggplot2-book.org\nMastering Shiny: https://mastering-shiny.org\n\nI think the bs4 theme looks better, and is easier to navigate, than the older gitbook theme (example here).\nThis is a quick guide on how to get started. For comprehensive details, look at the official guide by Yihui Xie, the author of bookdown."
  },
  {
    "objectID": "posts/bs4/index.html#how-do-you-use-the-bs4-theme",
    "href": "posts/bs4/index.html#how-do-you-use-the-bs4-theme",
    "title": "Creating a bookdown book with the bs4 theme",
    "section": "How do you use the bs4 theme?",
    "text": "How do you use the bs4 theme?\nTo follow this tutorial, you need to have the development version of bookdown installed. You can install it with\n\nCoderemotes::install_github('rstudio/bookdown')\n\n\nIt will also be helpful to work in RStudio, although it is not strictly necessary.\nWe will create an example project using the bs4 theme, using a template provided by the developers. Then we can edit this template project to make our bookdown book. To create an example project, enter the following command into the R console within RStudio:\n\nCodebookdown::create_bs4_book(\"your_project_name_here\")\n\n\nThis will create the project in your current directory.\nNow, click on the .Rproj file within the project directory to open the project in RStudio. You will see the files of the example like this:\n\n\nExamples bs4 files\n\n\nYou can then edit the files according to your needs. The first file to start editing is index.rmd, which contains the metadata of the book such as the title, author, date and more. It also contains the content that will go on the landing page for the HTML rendering of the book.\nNext you will want to edit files for each chapter, and delete those you don’t need.\nLastly, to fiddle with the theme, you can edit the style.css file if you have some experience with CSS.\nTo render the book, use\n\nCodebookdown::render_book()\n\n\nThen to view the preview of the HTML page, use\n\nCodebookdown::serve_book()\n\n\n\n\nThe final result\n\n\nTo host my bookdown books online, I put the project into a GitHub repository, and then use Netlify to host it for free. However, this is out of the scope of this tutorial. The official guide by Yihui Xie has more details on the hosting process."
  },
  {
    "objectID": "posts/early-stopping/index.html",
    "href": "posts/early-stopping/index.html",
    "title": "Repeated testing inflates type I error",
    "section": "",
    "text": "Does your astrological sign affect your height? Imagine that 20 scientists want to test this hypothesis. Each scientist, independently of the others, brings in 1,000 pairs of twins – one Taurus and one Leo – and measures the difference in their heights. Assume that in reality, the null hypothesis is true: there is no difference in their heights. Of course, there is random variation that will make each twin’s height different, but the null hypothesis is that the mean of this variation is zero.\n\nEspecially for height, it’s safe to assume that the variation in heights is normally distributed.\n\nEach scientists measures their 1,000 pairs of twins, conducts a t-test, and reports whether or not their statistical test has rejected the null hypothesis of no difference. If the null hypothesis is true (which we assume it is in this scenario), and the p-value threshold for significance is set at 0.05 = 1/20, we would expect that on average, 1 out of the 20 scientists would wrongly reject the null hypothesis when it is in fact true. This is the definition of type I error rate. But what if the scientists took multiple looks at the data?\nIt may have began as a way to save money – participants can be expensive! Starting with the 10th pair of twins, each scientist tests their hypothesis with a statistical test after every data point comes in. Measure the 11th pair. Run the test on the 11 data points. Measure the 12th pair. Run the test on the 12 data points. And so on. If any of these tests are significant, can the scientist claim that their result is statistically significant at the 0.05 level? Is the type I error rate of their testing procedure controlled at 0.05?\nThe answer is wholeheartedly, no. Repeated testing of the data will greatly inflate the type I error rate. Instead of the nominal 1/20 probability to wrongly reject the null hypothesis when it is true, the type I error rate of this sequential testing procedure will be much higher. If sampling continues indefinitely, sequential testing is guaranteed to reach a significant result. Edwards, Lindman, and Savage (1963) phrase this succinctly: “And indeed if an experimenter uses this procedure, then with probability 1 he will eventually reject any sharp null hypothesis, even though it be true.”\n\nEdwards, W., Lindman, H., & Savage, L. J. (1963). Bayesian statistical inference for psychological research. Psychological review, 70(3), 193."
  },
  {
    "objectID": "posts/early-stopping/index.html#simulation-using-r",
    "href": "posts/early-stopping/index.html#simulation-using-r",
    "title": "Repeated testing inflates type I error",
    "section": "Simulation using R",
    "text": "Simulation using R\nUsing R, let’s simulate the scenario described above and see for ourselves what happens to the type I error rate. To recap, we have 20 independent scientists conducting their own experiment. After every data point comes in, they conduct a statistical testing using the data they have collected so far. As we can see by the wiggling lines, given that the null hypothesis is true, the p-value fluctuate wildly with each new test. If a scientist obtains a p-value < 0.05 in the course of the experiment, the line past that observation is colored red so that we can identify when significance has been declared by each scientist.\n\nThe animations were created using the gganimate package.\n\n\n\nVideo\n\n\nOn the right panel, the cumulative type I error rate and the type I error rate at each observation is shown. We can see that by the time all 1000 data points are recorded, close to half of the scientists have declared significance at some point in the process! This error rate is clearly higher than 1/20 as would be expected without sequential testing. At any given time point however, the type I error rate is preserved: only about 1 scientist will have wrongly declared significance.\nTo verify our conclusions, let’s run this simulation for 2,000 scientists instead of 20 and observe the type I error rate.\n\n\nVideo\n\n\nAs seen before, the cumulative type I error rate increases the more looks the scientists take at the data, reaching almost 50% by 1,000 observations. Contrast this to type I error rate at any given observation, which remains controlled at the nominal value of 0.05."
  },
  {
    "objectID": "posts/early-stopping/index.html#so-how-can-we-control-type-i-error",
    "href": "posts/early-stopping/index.html#so-how-can-we-control-type-i-error",
    "title": "Repeated testing inflates type I error",
    "section": "So how can we control type I error?",
    "text": "So how can we control type I error?\nHow can we fix this problem? One approach is creating rules limiting the number of interim tests that can be conducted. For example, a topic of recent relevance, there was much debate over how many interim looks at the data there should be for the COVID-19 vaccine trials.\nAnother approach is applying corrections to the p-value threshold to ensure that the overall type I error rate is still 5%. The field of sequential analysis is concerned with these types of problems, and the solutions can be mathematically complex."
  },
  {
    "objectID": "posts/gganimate-map/index.html",
    "href": "posts/gganimate-map/index.html",
    "title": "Using gganimate with ggmap",
    "section": "",
    "text": "Codelibrary(tidyverse)\nlibrary(ggmap)\nlibrary(gganimate)\n\n# ggplot2 themes\nlibrary(cowplot)\n\n# Formatting of HTML tables\nlibrary(kableExtra)"
  },
  {
    "objectID": "posts/gganimate-map/index.html#overview",
    "href": "posts/gganimate-map/index.html#overview",
    "title": "Using gganimate with ggmap",
    "section": "Overview",
    "text": "Overview\nAnimating your ggplot2 visualizations is easy using the gganimate package. But did you also know that gganimate can be used with the ggmap package to animate geographic data? Using data from Nashville Open Data, we’ll create an animation to visualize the development of parks in Nashville over time."
  },
  {
    "objectID": "posts/gganimate-map/index.html#data-cleaning-and-exploration",
    "href": "posts/gganimate-map/index.html#data-cleaning-and-exploration",
    "title": "Using gganimate with ggmap",
    "section": "Data cleaning and exploration",
    "text": "Data cleaning and exploration\nFirst, let’s load in the data.\n\nCode# Read in data\ndf <-\n  read_csv(\"Parks_Property_2016.csv\") %>%\n  janitor::clean_names() %>%\n  select(lat, long = lon, year_established = year_estab, acres, park_name =  common_nam)\n\n\n\nCodedf %>% \n  kable(format = \"html\") %>%\n  kable_styling(\"striped\") %>%\n  scroll_box(height=\"500px\")\n\n\n\n\n lat \n    long \n    year_established \n    acres \n    park_name \n  \n\n\n 3.607738e+01 \n    -86.95922 \n    1988 \n    69.8600000 \n    Harpeth River \n  \n\n 3.605943e+01 \n    -86.93816 \n    1972 \n    9.8800000 \n    Harpeth Knoll \n  \n\n 3.607160e+01 \n    -86.93354 \n    1982 \n    17.1400000 \n    Red Caboose \n  \n\n 3.615017e+01 \n    -86.92646 \n    2007 \n    809.5900000 \n    Bells Bend \n  \n\n 3.626076e+01 \n    -86.91984 \n    1996 \n    2168.7920000 \n    Beaman \n  \n\n 3.605688e+01 \n    -86.90744 \n    1937 \n    1113.1200000 \n    Edwin Warner \n  \n\n 3.613620e+01 \n    -86.88757 \n    2012 \n    8.5300000 \n    H. G. Hill \n  \n\n 3.606729e+01 \n    -86.88420 \n    1926 \n    1991.5600000 \n    Percy Warner \n  \n\n 3.615454e+01 \n    -86.87071 \n    1964 \n    25.2400000 \n    Charlotte \n  \n\n 3.631718e+01 \n    -86.87022 \n    1989 \n    18.3800000 \n    Joelton \n  \n\n 3.616150e+01 \n    -86.86422 \n    1952 \n    33.4500000 \n    West \n  \n\n 3.617850e+01 \n    -86.83915 \n    1964 \n    12.2600000 \n    Bordeaux Garden \n  \n\n 3.611866e+01 \n    -86.83532 \n    1988 \n    3.2400000 \n    Woodmont \n  \n\n 3.615925e+01 \n    -86.83257 \n    1947 \n    11.2800000 \n    Boyd -Taylor \n  \n\n 3.634344e+01 \n    -86.86116 \n    2013 \n    98.4100000 \n    Paradise Ridge \n  \n\n 3.610406e+01 \n    -86.86017 \n    1988 \n    8.3900000 \n    Parmer \n  \n\n 3.620875e+01 \n    -86.82747 \n    1964 \n    54.2000000 \n    Hartman \n  \n\n 3.613357e+01 \n    -86.82402 \n    1927 \n    13.0700000 \n    Elmington \n  \n\n 3.615638e+01 \n    -86.85505 \n    2014 \n    11.2500000 \n    England \n  \n\n 3.616553e+01 \n    -86.82243 \n    1912 \n    30.7000000 \n    Hadley \n  \n\n 3.619058e+01 \n    -86.82113 \n    1954 \n    261.1700000 \n    Rhodes \n  \n\n 0.000000e+00 \n    0.00000 \n    0 \n    0.3400000 \n    East Jr. Tennis Courts \n  \n\n 3.620718e+01 \n    -86.85206 \n    2012 \n    34.8500000 \n    Mullins \n  \n\n 3.613922e+01 \n    -86.84705 \n    1938 \n    208.9800000 \n    McCabe \n  \n\n 3.615153e+01 \n    -86.84464 \n    1907 \n    9.9800000 \n    Richland \n  \n\n 3.621440e+01 \n    -86.84351 \n    1980 \n    16.8100000 \n    Bordeaux-Timothy \n  \n\n 3.615160e+01 \n    -86.79200 \n    1975 \n    0.5900000 \n    Owen Bradley \n  \n\n 3.627492e+01 \n    -86.81879 \n    1978 \n    19.7000000 \n    Whites Creek \n  \n\n 3.615774e+01 \n    -86.81796 \n    1969 \n    1.5000000 \n    McKissack \n  \n\n 3.617482e+01 \n    -86.81664 \n    1983 \n    7.3600000 \n    Fisk \n  \n\n 3.611058e+01 \n    -86.80866 \n    1999 \n    1.5300000 \n    Sally Beaman \n  \n\n 3.613682e+01 \n    -86.80631 \n    1978 \n    7.6500000 \n    Dragon \n  \n\n 3.609537e+01 \n    -86.80484 \n    1973 \n    13.0300000 \n    Green Hills \n  \n\n 3.617866e+01 \n    -86.80315 \n    1909 \n    1.6000000 \n    Elizabeth \n  \n\n 3.613167e+01 \n    -86.80244 \n    1996 \n    1.7100000 \n    St. Bernard \n  \n\n 3.616257e+01 \n    -86.79951 \n    1901 \n    8.1200000 \n    Watkins \n  \n\n 3.615941e+01 \n    -86.79734 \n    1979 \n    0.8600000 \n    Edmondson \n  \n\n 3.614940e+01 \n    -86.81340 \n    1903 \n    125.1400000 \n    Centennial \n  \n\n 3.617086e+01 \n    -86.79474 \n    2000 \n    0.4000000 \n    Hope Gardens \n  \n\n 3.618075e+01 \n    -86.78999 \n    1910 \n    6.6300000 \n    Morgan \n  \n\n 3.614644e+01 \n    -86.78956 \n    2012 \n    0.3500000 \n    Flora Wilson \n  \n\n 3.615004e+01 \n    -86.78945 \n    1975 \n    2.3100000 \n    Tony Rose \n  \n\n 3.611917e+01 \n    -86.78919 \n    1945 \n    20.4100000 \n    Sevier \n  \n\n 3.619941e+01 \n    -86.78749 \n    1969 \n    3.4200000 \n    Lock One \n  \n\n 3.604615e+01 \n    -86.75473 \n    1979 \n    6.9500000 \n    Granbery \n  \n\n 3.614350e+01 \n    -86.78345 \n    1960 \n    25.0800000 \n    Rose \n  \n\n 3.616269e+01 \n    -86.78181 \n    2001 \n    0.2800000 \n    Church Street \n  \n\n 3.613750e+01 \n    -86.78087 \n    1914 \n    15.9000000 \n    Reservoir \n  \n\n 3.613438e+01 \n    -86.77809 \n    1981 \n    1.3200000 \n    Neil \n  \n\n 3.616685e+01 \n    -86.77809 \n    2006 \n    6.0100000 \n    Public Square \n  \n\n 3.615921e+01 \n    -86.77682 \n    2005 \n    2.6700000 \n    Walk of Fame \n  \n\n 3.616832e+01 \n    -86.75391 \n    1963 \n    7.9600000 \n    Kirkpatrick \n  \n\n 3.621581e+01 \n    -86.75174 \n    1983 \n    26.2800000 \n    Oakwood \n  \n\n 3.617000e+01 \n    -86.78000 \n    1977 \n    3.4900000 \n    Bicentennial \n  \n\n 3.616222e+01 \n    -86.77611 \n    2000 \n    0.3100000 \n    Commerce Center \n  \n\n 3.616424e+01 \n    -86.77530 \n    1930 \n    0.6600000 \n    Fort Nashborough \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Crieve Hall School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Jordonia School Playground \n  \n\n 3.614503e+01 \n    -86.77421 \n    1928 \n    57.3900000 \n    Fort Negley \n  \n\n 3.616256e+01 \n    -86.77404 \n    1983 \n    5.2900000 \n    Riverfront \n  \n\n 3.623509e+01 \n    -86.77146 \n    1973 \n    10.4600000 \n    Parkwood \n  \n\n 3.625341e+01 \n    -86.77143 \n    2003 \n    12.1300000 \n    Willow Creek \n  \n\n 3.607724e+01 \n    -86.72783 \n    2007 \n    13.5300000 \n    Caldwell \n  \n\n 3.616249e+01 \n    -86.77058 \n    2012 \n    4.7551980 \n    Cumberland \n  \n\n 3.618177e+01 \n    -86.76702 \n    1920 \n    11.1300000 \n    McFerrin \n  \n\n 3.614385e+01 \n    -86.76534 \n    1913 \n    6.4400000 \n    Dudley \n  \n\n 3.627176e+01 \n    -86.74802 \n    1965 \n    321.4600000 \n    Cedar Hill \n  \n\n 3.617057e+01 \n    -86.74634 \n    1996 \n    0.5600000 \n    Shelby Walk \n  \n\n 3.610819e+01 \n    -86.74541 \n    2006 \n    0.7430000 \n    Turner School \n  \n\n 3.617793e+01 \n    -86.76230 \n    1963 \n    31.9400000 \n    Douglas \n  \n\n 3.617287e+01 \n    -86.76041 \n    1916 \n    10.6500000 \n    East Park \n  \n\n 3.618830e+01 \n    -86.75971 \n    1963 \n    18.4500000 \n    Cleveland \n  \n\n 3.620367e+01 \n    -86.75968 \n    1991 \n    6.8100000 \n    Tom Joy \n  \n\n 3.615160e+01 \n    -86.75898 \n    1983 \n    0.4000000 \n    Mildred Shute \n  \n\n 3.615007e+01 \n    -86.75654 \n    1913 \n    2.2200000 \n    Napier \n  \n\n 3.611188e+01 \n    -86.74425 \n    1939 \n    8.7700000 \n    Coleman \n  \n\n 3.617516e+01 \n    -86.74182 \n    1921 \n    0.1800000 \n    Bass \n  \n\n 3.608775e+01 \n    -86.74002 \n    0 \n    196.5900000 \n    Grassmere \n  \n\n 3.606692e+01 \n    -86.73968 \n    1978 \n    13.6700000 \n    Whitfield \n  \n\n 3.619271e+01 \n    -86.73947 \n    1953 \n    2.4400000 \n    Eastland \n  \n\n 3.617616e+01 \n    -86.73717 \n    2013 \n    2.2300000 \n    Lockeland Springs \n  \n\n 3.617055e+01 \n    -86.73295 \n    1912 \n    343.3100000 \n    Shelby \n  \n\n 3.618291e+01 \n    -86.70550 \n    1997 \n    950.1800000 \n    Shelby Bottoms \n  \n\n 3.619700e+01 \n    -86.72762 \n    1972 \n    19.1400000 \n    South Inglewood \n  \n\n 3.622800e+01 \n    -86.72445 \n    1995 \n    5.7000000 \n    Litton \n  \n\n 3.609511e+01 \n    -86.71480 \n    1973 \n    35.6800000 \n    Paragon Mills \n  \n\n 3.609215e+01 \n    -86.70763 \n    2003 \n    4.1900000 \n    Providence \n  \n\n 3.605723e+01 \n    -86.70645 \n    1982 \n    26.9400000 \n    Pitts \n  \n\n 3.624415e+01 \n    -86.70246 \n    1956 \n    5.7300000 \n    Lock Two \n  \n\n 3.626582e+01 \n    -86.70099 \n    1988 \n    30.7400000 \n    Madison \n  \n\n 3.610830e+01 \n    -86.69954 \n    1963 \n    76.0100000 \n    Seven Oaks \n  \n\n 3.618991e+01 \n    -86.68239 \n    1966 \n    374.3000000 \n    Two Rivers \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Andrew Jackson School Playground \n  \n\n 3.608808e+01 \n    -86.67803 \n    1978 \n    79.9400000 \n    Ezell \n  \n\n 3.605559e+01 \n    -86.67340 \n    1950 \n    7.9800000 \n    Antioch \n  \n\n 3.618528e+01 \n    -86.66682 \n    2002 \n    74.3800000 \n    Heartland \n  \n\n 3.620519e+01 \n    -86.65257 \n    1965 \n    649.7100000 \n    Peeler \n  \n\n 3.609890e+01 \n    -86.63865 \n    2007 \n    24.9800000 \n    Una \n  \n\n 3.600102e+01 \n    -86.63764 \n    1971 \n    6.2500000 \n    Crawford \n  \n\n 3.624013e+01 \n    -86.63373 \n    2011 \n    4.4000000 \n    Lakewood \n  \n\n 3.618753e+01 \n    -86.63272 \n    2006 \n    9.7600000 \n    Stone Hall \n  \n\n 3.610490e+01 \n    -86.62597 \n    1980 \n    381.3600000 \n    Hamilton Creek \n  \n\n 3.599103e+01 \n    -86.61878 \n    1983 \n    274.1300000 \n    Cane Ridge \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Kings Lane School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Dan Mills School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Pennington Bend School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Schwab School Playground \n  \n\n 3.617756e+01 \n    -86.61507 \n    1999 \n    22.1900000 \n    Hermitage \n  \n\n 3.617318e+01 \n    -86.79860 \n    1984 \n    0.6800000 \n    Monroe \n  \n\n 3.618239e+01 \n    -86.85325 \n    1963 \n    19.7800000 \n    City Cemetery \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Tulip Grove School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Hermitage School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Hattie Cotton School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Rosebank School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Stanford School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Hickman Elm School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Cockrill School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Park Ave School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Jones Paideia School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    0 \n    1.0200000 \n    Hillwood School Tennis Courts \n  \n\n 3.610288e+01 \n    -86.68115 \n    2006 \n    64.1700000 \n    Soccer Complex \n  \n\n 3.618239e+01 \n    -86.85325 \n    1976 \n    5.0000000 \n    County Cemetery \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Glencliff School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    0 \n    0.6800000 \n    Glencliff Tennis Courts \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Lakeview School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Norman Binkley School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Haywood School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    0 \n    0.5100000 \n    Bellevue Tennis Courts \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Moss School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    0 \n    0.5100000 \n    Ewing Park Tennis Courts \n  \n\n 3.619124e+01 \n    -86.81393 \n    1934 \n    46.4800000 \n    Buena Vista \n  \n\n 3.619149e+01 \n    -86.81267 \n    1934 \n    4.9700000 \n    Potters Field \n  \n\n 3.613298e+01 \n    86.90497 \n    2003 \n    14.1400000 \n    Brookmeade \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Stratton School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Dupont School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Neely's Bend School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    0 \n    0.5100000 \n    Neely's Bend Tennis Courts \n  \n\n 0.000000e+00 \n    0.00000 \n    0 \n    0.5100000 \n    Maplewood Tennis Courts \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Percy Priest School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Tusculum School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    0 \n    0.5100000 \n    Mcmurray Tennis Courts \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Cole School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Mt. View School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Charlotte School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Old Center School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Paragon Mills School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Whitsett School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Chadwell School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    0 \n    0.6800000 \n    Hillsboro Tennis Courts \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Tom Joy School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Una School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Sylvan Park School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    0 \n    0.6800000 \n    Overton Tennis Courts \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Amquie School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Harpeth School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Julia Green School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Alex Green School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Mcgavock School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Ruby Major School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Cora Howe School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Shayne School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Dodson School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Maxwell School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    0 \n    0.5100000 \n    Stratford Tennis Courts \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Fall-Hamilton School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Edmonson Library Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Hull Jackson School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Ross School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    0 \n    0.5100000 \n    Granbery School Tennis Courts \n  \n\n 0.000000e+00 \n    0.00000 \n    0 \n    0.3400000 \n    Antioch Tennis Courts \n  \n\n 3.624002e+01 \n    -86.64811 \n    2012 \n    84.0000000 \n    Crooked Branch \n  \n\n 3.611668e+01 \n    -86.78903 \n    2013 \n    5.4000000 \n    Gale Lane \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    0.1345503 \n    Cumberland River Greenway - Metro Center \n  \n\n 3.625271e+01 \n    -86.64679 \n    2013 \n    6.0100000 \n    Old Hickory Baseball \n  \n\n 3.625579e+01 \n    -86.64605 \n    2013 \n    2.4100000 \n    Rachel's Walk \n  \n\n 3.626437e+01 \n    -86.65058 \n    2013 \n    0.4500000 \n    Veterans \n  \n\n 3.626542e+01 \n    -86.64965 \n    2013 \n    13.5800000 \n    Old Hickory \n  \n\n 3.626393e+01 \n    -86.65150 \n    2013 \n    0.1200000 \n    Old Hickory Community Center \n  \n\n 3.625664e+01 \n    -86.65259 \n    2013 \n    1.6100000 \n    Old Hickory Arts \n  \n\n 3.625845e+01 \n    -86.64896 \n    2013 \n    2.3900000 \n    12th Street Ballfield \n  \n\n 3.611722e+01 \n    -86.71963 \n    2013 \n    62.6100000 \n    Whitsett \n  \n\n 0.000000e+00 \n    0.00000 \n    2003 \n    1.5553245 \n    Stones River Greeenway - Two Rivers to Lytle \n  \n\n 3.601296e+01 \n    -86.69024 \n    2013 \n    85.6200000 \n    Mill Creek \n  \n\n 3.618238e+01 \n    -86.65910 \n    2013 \n    615.9000000 \n    Lytle Farm \n  \n\n 3.616015e+01 \n    -86.77186 \n    2015 \n    12.5400000 \n    Ascend Amphitheater \n  \n\n 3.605297e+01 \n    -86.65626 \n    2014 \n    12.1363239 \n    Southeast Community Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2003 \n    0.4646216 \n    Stones River Greeenway - Two Rivers to Lytle \n  \n\n 0.000000e+00 \n    0.00000 \n    2003 \n    2.3579139 \n    Stones River Greeenway - Two Rivers to Lytle \n  \n\n 0.000000e+00 \n    0.00000 \n    2003 \n    0.1121120 \n    Stones River Greeenway - Two Rivers to Lytle \n  \n\n 1.735803e+06 \n    666357.14396 \n    2012 \n    0.6655799 \n    Gulch Greenway \n  \n\n 1.736155e+06 \n    665443.67692 \n    2015 \n    0.4948844 \n    Gulch Greenway \n  \n\n 1.737172e+06 \n    670336.24990 \n    2001 \n    0.2594513 \n    Cumberland River Greenway - Bicentennial Connector \n  \n\n 3.619003e+01 \n    -86.64606 \n    2015 \n    172.4690974 \n    Ravenwood \n  \n\n 0.000000e+00 \n    0.00000 \n    2001 \n    2.5000000 \n    Cumberland River Greenway - Bicentennial Connector \n  \n\n 3.611345e+01 \n    -86.77666 \n    2012 \n    0.3481739 \n    Browns Creek Park \n  \n\n 0.000000e+00 \n    0.00000 \n    2001 \n    0.7298034 \n    Cumberland River Greenway - SB trailhead \n  \n\n 0.000000e+00 \n    0.00000 \n    2008 \n    0.0493584 \n    Cumberland River Greenway - Downtown \n  \n\n 0.000000e+00 \n    0.00000 \n    2008 \n    0.0818948 \n    Cumberland River Greenway - Downtown \n  \n\n 0.000000e+00 \n    0.00000 \n    2008 \n    0.0117001 \n    Cumberland River Greenway - Downtown \n  \n\n 0.000000e+00 \n    0.00000 \n    2008 \n    1.7948271 \n    Cumberland River Greenway - Downtown \n  \n\n 0.000000e+00 \n    0.00000 \n    2008 \n    0.1613896 \n    Cumberland River Greenway - Downtown \n  \n\n 0.000000e+00 \n    0.00000 \n    2008 \n    0.0167640 \n    Cumberland River Greenway - Downtown \n  \n\n 0.000000e+00 \n    0.00000 \n    2008 \n    0.2653782 \n    Cumberland River Greenway - Downtown \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    11.9566555 \n    Whites Creek Greenway - Hartman Park \n  \n\n 0.000000e+00 \n    0.00000 \n    2005 \n    2.7587219 \n    Whites Creek Greenway - Hartman Park \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    0.8719442 \n    Whites Creek Greenway - Hartman Park \n  \n\n 0.000000e+00 \n    0.00000 \n    2006 \n    1.0000000 \n    Whites Creek Greenway - Hartman Park \n  \n\n 0.000000e+00 \n    0.00000 \n    2008 \n    0.5361007 \n    Cumberland River Greenway - Downtown \n  \n\n 0.000000e+00 \n    0.00000 \n    2008 \n    0.6990988 \n    Cumberland River Greenway - Downtown \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    2.1957676 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2008 \n    0.6213730 \n    Cumberland River Greenway - Downtown \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    1.0171761 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    0.8803449 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    1.4035318 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    0.1757014 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    0.1910113 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    0.3268539 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    0.8981220 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    0.1643947 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    0.8378213 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    2.2856454 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    0.1554352 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    0.4177268 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2008 \n    0.6409715 \n    Cumberland River Greenway - Downtown \n  \n\n 0.000000e+00 \n    0.00000 \n    2008 \n    0.2436326 \n    Cumberland River Greenway - Downtown \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    0.6941219 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    0.1009122 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    0.1245130 \n    Cumberland River Greenway - Metro Center \n  \n\n 0.000000e+00 \n    0.00000 \n    2001 \n    0.2207411 \n    Cumberland River Greenway - Bicentennial Connector \n  \n\n 0.000000e+00 \n    0.00000 \n    2001 \n    0.4808856 \n    Cumberland River Greenway - Bicentennial Connector \n  \n\n 0.000000e+00 \n    0.00000 \n    2001 \n    1.0315835 \n    Cumberland River Greenway - Downtown \n  \n\n 0.000000e+00 \n    0.00000 \n    2001 \n    0.0586311 \n    Cumberland River Greenway - Downtown \n  \n\n 0.000000e+00 \n    0.00000 \n    2009 \n    1.8924259 \n    Cumberland River Greenway - Boyd Taylor \n  \n\n 0.000000e+00 \n    0.00000 \n    2001 \n    1.1242000 \n    Cumberland River Greenway - Downtown \n  \n\n 0.000000e+00 \n    0.00000 \n    1995 \n    4.7682243 \n    Harpeth River Greenway - Warner - Morton Mill \n  \n\n 0.000000e+00 \n    0.00000 \n    2008 \n    23.1109609 \n    Harpeth River Greenway - Warner - Warner Exchange \n  \n\n 0.000000e+00 \n    0.00000 \n    2013 \n    33.2810709 \n    Harpeth River Greenway - Warner - Harpeth Bend \n  \n\n 0.000000e+00 \n    0.00000 \n    2013 \n    3.1920090 \n    Harpeth River Greenway - Warner - Harpeth Valley \n  \n\n 0.000000e+00 \n    0.00000 \n    1995 \n    9.4195271 \n    Harpeth River Greenway - Warner - Morton Mill \n  \n\n 0.000000e+00 \n    0.00000 \n    2013 \n    9.0121617 \n    Harpeth River Greenway - Warner - Harpeth Crest \n  \n\n 0.000000e+00 \n    0.00000 \n    2013 \n    4.0313277 \n    Harpeth River Greenway - Harpeth Springs \n  \n\n 0.000000e+00 \n    0.00000 \n    2013 \n    12.0255760 \n    Harpeth River Greenway - Harpeth Springs \n  \n\n 0.000000e+00 \n    0.00000 \n    2006 \n    7.8561414 \n    Harpeth River Greenway - River Walk \n  \n\n 0.000000e+00 \n    0.00000 \n    2006 \n    1.4861100 \n    Harpeth River Greenway - River Walk \n  \n\n 0.000000e+00 \n    0.00000 \n    2006 \n    1.8113980 \n    Harpeth River Greenway - River Walk \n  \n\n 0.000000e+00 \n    0.00000 \n    2006 \n    7.1464777 \n    Harpeth River Greenway - River Walk \n  \n\n 0.000000e+00 \n    0.00000 \n    2006 \n    10.9477867 \n    Harpeth River Greenway - River Walk \n  \n\n 0.000000e+00 \n    0.00000 \n    2006 \n    5.5703800 \n    Harpeth River Greenway - River Walk \n  \n\n 0.000000e+00 \n    0.00000 \n    2006 \n    2.4222613 \n    Harpeth River Greenway - River Walk \n  \n\n 0.000000e+00 \n    0.00000 \n    2013 \n    0.1684959 \n    Harpeth River Greenway - Warner - Harpeth Bend \n  \n\n 0.000000e+00 \n    0.00000 \n    1995 \n    2.2458589 \n    Harpeth River Greenway - Warner - Morton Mill \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    32.7153412 \n    Mill Creek Greenway - Blue Hole \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    6.8735880 \n    Mill Creek Greenway - Blue Hole \n  \n\n 0.000000e+00 \n    0.00000 \n    2001 \n    5.0335253 \n    Mill Creek Greenway - Ezell Park \n  \n\n 0.000000e+00 \n    0.00000 \n    2001 \n    3.5095535 \n    Mill Creek Greenway - Ezell Park \n  \n\n 0.000000e+00 \n    0.00000 \n    2014 \n    3.5486258 \n    Mill Creek Greenway - Mill Creek Park \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    50.2175012 \n    Mill Creek Greenway - Blue Hole \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    10.5583895 \n    Mill Creek Greenway - Blue Hole \n  \n\n 0.000000e+00 \n    0.00000 \n    2015 \n    25.9882102 \n    Mill Creek Greenway-Rivendell \n  \n\n 0.000000e+00 \n    0.00000 \n    2006 \n    2.2191096 \n    Richland Creek Creenway - White Bridge Connector \n  \n\n 0.000000e+00 \n    0.00000 \n    2014 \n    9.6707414 \n    Mill Creek Greenway - Mill Creek Park \n  \n\n 0.000000e+00 \n    0.00000 \n    2014 \n    0.3969118 \n    Mill Creek Greenway - Mill Creek Park \n  \n\n 0.000000e+00 \n    0.00000 \n    2006 \n    9.5489080 \n    Richland Creek Creenway - White Bridge Connector \n  \n\n 0.000000e+00 \n    0.00000 \n    2006 \n    3.9594254 \n    Richland Creek Creenway - White Bridge Connector \n  \n\n 0.000000e+00 \n    0.00000 \n    2006 \n    1.1946428 \n    Richland Creek Creenway - White Bridge Connector \n  \n\n 0.000000e+00 \n    0.00000 \n    2006 \n    1.3220493 \n    Richland Creek Creenway - White Bridge Connector \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    0.0532986 \n    Richland Creek Creenway - Lion's Head Connector \n  \n\n 0.000000e+00 \n    0.00000 \n    2004 \n    15.3544355 \n    Richland Creek Creenway -McCabe Loop \n  \n\n 0.000000e+00 \n    0.00000 \n    2010 \n    2.0813361 \n    Richland Creek Creenway - Knob Road Connector \n  \n\n 0.000000e+00 \n    0.00000 \n    2013 \n    1.7147314 \n    Cumberland River Greenway - Rolling Mill Hill \n  \n\n 0.000000e+00 \n    0.00000 \n    2003 \n    3.5618533 \n    Stones River Greenway - Lebanon Pk to Dam \n  \n\n 0.000000e+00 \n    0.00000 \n    2008 \n    53.2851401 \n    Seven Mile Creek Greenway - Ellington Ag \n  \n\n 0.000000e+00 \n    0.00000 \n    2008 \n    1.5429462 \n    Seven Mile Creek Greenway - Harding Mall \n  \n\n 0.000000e+00 \n    0.00000 \n    2013 \n    1.1000000 \n    Cumberland River Greenway - Rolling Mill Hill \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    0.1000000 \n    Smithson School Playground \n  \n\n 0.000000e+00 \n    0.00000 \n    2000 \n    16.8742281 \n    Stones River Greenway - Alta Lake \n  \n\n 0.000000e+00 \n    0.00000 \n    2003 \n    5.0076261 \n    Stones River Greenway - Lebanon Pk to Dam \n  \n\n 0.000000e+00 \n    0.00000 \n    2003 \n    0.6513379 \n    Stones River Greenway - Lebanon Pk to Dam \n  \n\n 0.000000e+00 \n    0.00000 \n    2005 \n    16.6344681 \n    Stones River Greenway - Lebanon Pk to Dam \n  \n\n 0.000000e+00 \n    0.00000 \n    2014 \n    135.4692117 \n    Whites Creek Greenway - Fontanel \n  \n\n 0.000000e+00 \n    0.00000 \n    1999 \n    19.2924154 \n    Stones River Greenway - Lebanon Pk to Dam \n  \n\n 0.000000e+00 \n    0.00000 \n    2003 \n    6.4750941 \n    Stones River Greenway - Lebanon Pk to Dam \n  \n\n 0.000000e+00 \n    0.00000 \n    2003 \n    3.7454341 \n    Stones River Greenway - Lebanon Pk to Dam \n  \n\n 0.000000e+00 \n    0.00000 \n    2000 \n    1.4684997 \n    Stones River Greenway - Alta Lake \n  \n\n 0.000000e+00 \n    0.00000 \n    2003 \n    0.1818802 \n    Stones River Greenway - Lebanon Pk to Dam \n  \n\n 0.000000e+00 \n    0.00000 \n    2014 \n    7.3042493 \n    Whites Creek Community Garden \n  \n\n 0.000000e+00 \n    0.00000 \n    2002 \n    6.5039280 \n    Mill Creek Greenway - Whittimore Branch \n  \n\n\n\n\n\nBefore we create the animations, let’s do some data cleaning.\nAre parks duplicated?\n\nCodedf %>%\n  filter(duplicated(park_name)) %>%\n  kable(format = \"html\") %>%\n  kable_styling(\"striped\") %>%\n  scroll_box(height=\"300px\")\n\n\n\n\n lat \n    long \n    year_established \n    acres \n    park_name \n  \n\n\n 0 \n    0.0 \n    2003 \n    0.4646216 \n    Stones River Greeenway - Two Rivers to Lytle \n  \n\n 0 \n    0.0 \n    2003 \n    2.3579139 \n    Stones River Greeenway - Two Rivers to Lytle \n  \n\n 0 \n    0.0 \n    2003 \n    0.1121120 \n    Stones River Greeenway - Two Rivers to Lytle \n  \n\n 1736155 \n    665443.7 \n    2015 \n    0.4948844 \n    Gulch Greenway \n  \n\n 0 \n    0.0 \n    2001 \n    2.5000000 \n    Cumberland River Greenway - Bicentennial Connector \n  \n\n 0 \n    0.0 \n    2008 \n    0.0818948 \n    Cumberland River Greenway - Downtown \n  \n\n 0 \n    0.0 \n    2008 \n    0.0117001 \n    Cumberland River Greenway - Downtown \n  \n\n 0 \n    0.0 \n    2008 \n    1.7948271 \n    Cumberland River Greenway - Downtown \n  \n\n 0 \n    0.0 \n    2008 \n    0.1613896 \n    Cumberland River Greenway - Downtown \n  \n\n 0 \n    0.0 \n    2008 \n    0.0167640 \n    Cumberland River Greenway - Downtown \n  \n\n 0 \n    0.0 \n    2008 \n    0.2653782 \n    Cumberland River Greenway - Downtown \n  \n\n 0 \n    0.0 \n    2005 \n    2.7587219 \n    Whites Creek Greenway - Hartman Park \n  \n\n 0 \n    0.0 \n    2004 \n    0.8719442 \n    Whites Creek Greenway - Hartman Park \n  \n\n 0 \n    0.0 \n    2006 \n    1.0000000 \n    Whites Creek Greenway - Hartman Park \n  \n\n 0 \n    0.0 \n    2008 \n    0.5361007 \n    Cumberland River Greenway - Downtown \n  \n\n 0 \n    0.0 \n    2008 \n    0.6990988 \n    Cumberland River Greenway - Downtown \n  \n\n 0 \n    0.0 \n    2004 \n    2.1957676 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2008 \n    0.6213730 \n    Cumberland River Greenway - Downtown \n  \n\n 0 \n    0.0 \n    2004 \n    1.0171761 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2004 \n    0.8803449 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2004 \n    1.4035318 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2004 \n    0.1757014 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2004 \n    0.1910113 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2004 \n    0.3268539 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2004 \n    0.8981220 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2004 \n    0.1643947 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2004 \n    0.8378213 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2004 \n    2.2856454 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2004 \n    0.1554352 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2004 \n    0.4177268 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2008 \n    0.6409715 \n    Cumberland River Greenway - Downtown \n  \n\n 0 \n    0.0 \n    2008 \n    0.2436326 \n    Cumberland River Greenway - Downtown \n  \n\n 0 \n    0.0 \n    2004 \n    0.6941219 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2004 \n    0.1009122 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2004 \n    0.1245130 \n    Cumberland River Greenway - Metro Center \n  \n\n 0 \n    0.0 \n    2001 \n    0.2207411 \n    Cumberland River Greenway - Bicentennial Connector \n  \n\n 0 \n    0.0 \n    2001 \n    0.4808856 \n    Cumberland River Greenway - Bicentennial Connector \n  \n\n 0 \n    0.0 \n    2001 \n    1.0315835 \n    Cumberland River Greenway - Downtown \n  \n\n 0 \n    0.0 \n    2001 \n    0.0586311 \n    Cumberland River Greenway - Downtown \n  \n\n 0 \n    0.0 \n    2001 \n    1.1242000 \n    Cumberland River Greenway - Downtown \n  \n\n 0 \n    0.0 \n    1995 \n    9.4195271 \n    Harpeth River Greenway - Warner - Morton Mill \n  \n\n 0 \n    0.0 \n    2013 \n    12.0255760 \n    Harpeth River Greenway - Harpeth Springs \n  \n\n 0 \n    0.0 \n    2006 \n    1.4861100 \n    Harpeth River Greenway - River Walk \n  \n\n 0 \n    0.0 \n    2006 \n    1.8113980 \n    Harpeth River Greenway - River Walk \n  \n\n 0 \n    0.0 \n    2006 \n    7.1464777 \n    Harpeth River Greenway - River Walk \n  \n\n 0 \n    0.0 \n    2006 \n    10.9477867 \n    Harpeth River Greenway - River Walk \n  \n\n 0 \n    0.0 \n    2006 \n    5.5703800 \n    Harpeth River Greenway - River Walk \n  \n\n 0 \n    0.0 \n    2006 \n    2.4222613 \n    Harpeth River Greenway - River Walk \n  \n\n 0 \n    0.0 \n    2013 \n    0.1684959 \n    Harpeth River Greenway - Warner - Harpeth Bend \n  \n\n 0 \n    0.0 \n    1995 \n    2.2458589 \n    Harpeth River Greenway - Warner - Morton Mill \n  \n\n 0 \n    0.0 \n    2002 \n    6.8735880 \n    Mill Creek Greenway - Blue Hole \n  \n\n 0 \n    0.0 \n    2001 \n    3.5095535 \n    Mill Creek Greenway - Ezell Park \n  \n\n 0 \n    0.0 \n    2002 \n    50.2175012 \n    Mill Creek Greenway - Blue Hole \n  \n\n 0 \n    0.0 \n    2002 \n    10.5583895 \n    Mill Creek Greenway - Blue Hole \n  \n\n 0 \n    0.0 \n    2014 \n    9.6707414 \n    Mill Creek Greenway - Mill Creek Park \n  \n\n 0 \n    0.0 \n    2014 \n    0.3969118 \n    Mill Creek Greenway - Mill Creek Park \n  \n\n 0 \n    0.0 \n    2006 \n    9.5489080 \n    Richland Creek Creenway - White Bridge Connector \n  \n\n 0 \n    0.0 \n    2006 \n    3.9594254 \n    Richland Creek Creenway - White Bridge Connector \n  \n\n 0 \n    0.0 \n    2006 \n    1.1946428 \n    Richland Creek Creenway - White Bridge Connector \n  \n\n 0 \n    0.0 \n    2006 \n    1.3220493 \n    Richland Creek Creenway - White Bridge Connector \n  \n\n 0 \n    0.0 \n    2013 \n    1.1000000 \n    Cumberland River Greenway - Rolling Mill Hill \n  \n\n 0 \n    0.0 \n    2003 \n    5.0076261 \n    Stones River Greenway - Lebanon Pk to Dam \n  \n\n 0 \n    0.0 \n    2003 \n    0.6513379 \n    Stones River Greenway - Lebanon Pk to Dam \n  \n\n 0 \n    0.0 \n    2005 \n    16.6344681 \n    Stones River Greenway - Lebanon Pk to Dam \n  \n\n 0 \n    0.0 \n    1999 \n    19.2924154 \n    Stones River Greenway - Lebanon Pk to Dam \n  \n\n 0 \n    0.0 \n    2003 \n    6.4750941 \n    Stones River Greenway - Lebanon Pk to Dam \n  \n\n 0 \n    0.0 \n    2003 \n    3.7454341 \n    Stones River Greenway - Lebanon Pk to Dam \n  \n\n 0 \n    0.0 \n    2000 \n    1.4684997 \n    Stones River Greenway - Alta Lake \n  \n\n 0 \n    0.0 \n    2003 \n    0.1818802 \n    Stones River Greenway - Lebanon Pk to Dam \n  \n\n\n\n\n\nThese look like errors so we will remove them.\n\nCodedf <-\ndf %>%\n  filter(!(lat == 0),\n         !(long == 0)) %>%\n  distinct(park_name, .keep_all = TRUE)\n\n\nWe also need to remove unreasonable lat/long values.\n\nCodedf <-\ndf %>%\n  filter(!(abs(lat) >= 180),\n         !(abs(long) >= 180))\n\n\n\nCode# Convert all long values to negative because of an error\ndf$long <- abs(df$long) * -1\n\n\nHow many parks are there?\n\nCodenrow(df)\n\n[1] 123\n\n\n125 parks in Nashville – not bad!\nWhich years are represented in the data?\n\nCoderange(df$year_established)\n\n[1]    0 2015\n\n\nStrange, it looks like the oldest park was established in year “0”. This must be a mistake.\n\nCode# Newest 5 parks\nsort(df$year_established) %>% tail()\n\n[1] 2013 2013 2014 2014 2015 2015\n\nCode# Oldest 5 parks\nsort(df$year_established) %>% head()\n\n[1]    0 1901 1903 1907 1909 1910\n\n\nThe true range of the data is 1901 - 2015. It looks like the park recorded as being established in year zero was a mistake. Let’s remove it from the dataset.\n\nCodedf <-\n  df %>%\n  filter(year_established != 0)\n\n\nNow let’s take a look at the distribution of the years when parks were established. First, we’ll make a histogram.\n\nCodedf %>%\n  ggplot() +\n  aes(year_established) +\n  geom_histogram(bins=30, color=\"black\", fill=\"grey\") +\n  labs(\n    title = \"Number of parks established in Nashville per year\",\n    subtitle = \"\",\n    x= \"Year Established\",\n    y= \"Frequency\") +\n  cowplot::theme_cowplot(font_family = \"Source Sans Pro\",\n                         font_size = 12)\n\n\n\n\nThe rate of new park development looks to be increasing over time. An ECDF plot supports this observation.\n\nCodedf %>%\n  ggplot()+\n  aes(year_established) +\n  stat_ecdf() +\n  labs(\n    title = \"Cumulative distribution of Nashville parks over time\",\n    subtitle = \"\",\n    x= \"Year Established\",\n    y= \"ECDF\") +\n  cowplot::theme_cowplot(font_family = \"Source Sans Pro\",\n                         font_size = 12)"
  },
  {
    "objectID": "posts/gganimate-map/index.html#creating-the-animation",
    "href": "posts/gganimate-map/index.html#creating-the-animation",
    "title": "Using gganimate with ggmap",
    "section": "Creating the Animation",
    "text": "Creating the Animation\nNow that we’ve cleaned and explored the data, let’s create an animation with gganimate and ggmap. I would like to visualize the development of Nashville’s parks by year.\nFirst, let’s try to just plot the locations of all the parks. Luckily, the (latitude, longitude) coordinates are provided.\nWe start with the qmplot() function from ggmap, which is a shortcut for plotting on maps, just like qplot() in ggplot2. We pass in the latitude and longitude coordinates and the data frame. The argument maptype = \"toner-lite\" indicates the type of basemap to use as the background. We also specify alpha=0.5 so we can see when the points overlap. I would like larger parks to be represented by larger circles, so we can map size to acreage by aes(size=acres). Then we add the extra theming using the cowplot package.\n\nCodeqmplot(long, lat, data = df, maptype=\"toner-lite\", alpha=0.5) + \n  aes(size=acres) +\n  labs(\n    title = \"Nashville Parks\",\n    x= \"Longitude\",\n    y= \"Latitude\",\n    caption = \"Area corresponds to acreage \\n Data available from Nashville Open Data\") +\n  cowplot::theme_cowplot(font_family = \"Source Sans Pro\",\n                         font_size = 12) +\n  theme(legend.position = \"none\")\n\n\n\n\nLooks pretty good already. Now let’s make this into an animation!\nWe will add the transition_states() function from gganimate and specify that each state of the animation is determined by year_established. We also set subtitle = \"Year: {closest_state}\" to display the year of the current frame.\n\nCodeqmplot(x=long, y=lat, data = df) + \n  aes(size=acres, group=year_established) +\n  labs(\n    title = \"Nashville Parks\",\n    subtitle = \"Year: {closest_state}\",\n    x= \"Longitude\",\n    y= \"Latitude\",\n    caption = \"Area corresponds to acreage \\n Data available from Nashville Open Data\") +\n  cowplot::theme_cowplot(font_family = \"Source Sans Pro\",\n                         font_size = 12) +\n  theme(legend.position = \"none\") +\n  transition_states(year_established)\n\n\n\n\nIt’s animated now, but there are two problems.\nFirst, the points are disappearing after each year. We can add shadow_mark(color=\"black\") to have the points stay on the plot. We specify that the old points are colored black so that we can color the current points red, to highlight which points were just displayed.\nSecond, the passage of time is not constant. We want to have each frame change in increments of one year. In our current animation, the years are skipping between the years present in the data. To fix this, we convert year_established to a factor, and fill in the missing years.\n\nCodedf$year_established <-\n  df$year_established %>%\n  # convert to factor\n  as.factor() %>%\n  # add extra years\n  fct_expand(1900:2019 %>% as.character) %>%\n  # sort years\n  fct_relevel(1900:2019 %>% as.character)\n\n\nNow that we’ve made those changes, let’s try again.\n\nCodeqmplot(long, lat, data = df,\n       maptype = \"toner-lite\", alpha=0.5, color=\"red\") + \n  aes(size=acres, group=year_established) +\n  labs(\n    title = \"Nashville Parks\",\n    subtitle = \"Year: {closest_state}\",\n    x= \"Longitude\",\n    y= \"Latitude\",\n    caption = \"Area corresponds to acreage \\n Data available from Nashville Open Data\") +\n  cowplot::theme_cowplot(font_family = \"Source Sans Pro\",\n                         font_size = 12) +\n  theme(legend.position = \"none\") +\n  transition_states(year_established) +\n  shadow_mark(color=\"black\")\n\n\n\n\nLooks good! But wait a second… the animation only goes to 1950. Wasn’t it supposed to go to 2015? This is a little quirk of gganimate. By default, the animation is capped at 100 frames. For the transition_states() animation, by default a single frame is allocated for each state, and another frame is allocated for transitions between states. So 100 frames can represent 50 years of data. The animation is cut short because we have more than 50 years of data.\nLet’s fix this by saving the animation to a variable, and then using the animate() function to increase the number of frames.\n\nCodeparks_anim <- \n  qmplot(long, lat, data = df,\n       maptype = \"toner-lite\", alpha=0.5, color=\"red\") + \n  aes(size=acres, group=year_established) +\n  labs(\n    title = \"Nashville Parks\",\n    subtitle = \"Year: {closest_state}\",\n    x= \"Longitude\",\n    y= \"Latitude\",\n    caption = \"Area corresponds to acreage \\n Data available from Nashville Open Data\") +\n  cowplot::theme_cowplot(font_family = \"Source Sans Pro\",\n                         font_size = 12) +\n  theme(legend.position = \"none\") +\n  transition_states(year_established) +\n  shadow_mark(color=\"black\")\n\nanimate(\n  parks_anim,\n  nframes=300, # number of frames to compute\n  )\n\n\n\n\nMy preferred method of rendering the animation is to use ffmpeg, instead of the default GIF renderer, because it creates videos (.mp4) rather than GIFs. You will need to install ffpmeg on your computer separately. Using ffmpeg also allows for finer control over the frame rate of the animation and creates smaller files. I’ll show how to use it below.\nThe animate() function has parameters for duration (total duration in seconds), fps (frames per second), and nframes (total number of frames). You can specify any two. For our case, we give the duration and number of frames, and gganimate figures out the proper frame rate to fit the specified number of frames into the specified number of seconds.\nWe also set res=300 to increase the resolution. This has the side effect of making the font appear larger, so we decrease the font size in the call to theme_cowplot().\nBe warned that this may take a bit of time to animate. Here’s the final result!\n\nCodeparks_anim <- \n  qmplot(long, lat, data = df,\n       maptype = \"toner-lite\", alpha=0.5, color=\"red\") + \n  aes(size=acres, group=year_established) +\n  labs(\n    title = \"Nashville Parks\",\n    subtitle = \"Year: {closest_state}\",\n    x= \"Longitude\",\n    y= \"Latitude\",\n    caption = \"Area corresponds to acreage \\n Data available from Nashville Open Data\") +\n  cowplot::theme_cowplot(font_family = \"Source Sans Pro\",\n                         font_size = 10) +\n  theme(legend.position = \"none\") +\n  transition_states(year_established) +\n  shadow_mark(color=\"black\")\n\nanimate(\n  parks_anim,\n  duration=15, # duration of the animation in seconds\n  nframes=768, # number of frames to compute\n  height = 6,\n  width = 6,\n  units = \"in\",\n  res = 300, # resolution of the output\n  renderer = ffmpeg_renderer() # render to video with ffmpeg\n  )"
  },
  {
    "objectID": "posts/what-is-a-statistic/index.html",
    "href": "posts/what-is-a-statistic/index.html",
    "title": "What is a statistic?",
    "section": "",
    "text": "Codelibrary(tidyverse)"
  },
  {
    "objectID": "posts/what-is-a-statistic/index.html#introduction",
    "href": "posts/what-is-a-statistic/index.html#introduction",
    "title": "What is a statistic?",
    "section": "Introduction",
    "text": "Introduction\nWhen we collect data from a data-generating process, we can calculate values from that data. These values are called statistics.\nCommon example include:\n\nmean and median (measures of center)\nvariance and IQR (measures of spread)\norder statistics, such as the minimum and the maximum\n\nWe can even create arbitrary statistics that appear to have little use, such as adding only the first and third elements of the data and dividing by 17."
  },
  {
    "objectID": "posts/what-is-a-statistic/index.html#simulating-statistics-of-dice-rolls",
    "href": "posts/what-is-a-statistic/index.html#simulating-statistics-of-dice-rolls",
    "title": "What is a statistic?",
    "section": "Simulating statistics of dice rolls",
    "text": "Simulating statistics of dice rolls\nAs a simple data-generating process, let’s consider rolling 5 dice. Each time we roll, we obtain 5 numbers, each from 1 to 6. We will call each one of these vectors of 5 numbers,\n\\[\n(x_1, x_2, x_3, x_4, x_5)\n\\]\na sample. We then will compute statistics from these samples. The main question we seek to answer is: how are the statistics distributed? When I calculate the mean of 5 dice, what will the most likely result be? We can ask this question about any statistic.\nWe’ll write a function to roll n dice called roll().\n\nCode# A function to roll `n` dice\nroll <- function(n){\n  sample(x = 1:6, size=n, replace=TRUE)\n}\n\n\nThen we’ll use purrr:map() to generate 100,000 rolls of 5 dice.\n\nCode# Roll 5 dice 100,000 times\ndata <- map(1:1e5, ~roll(5))\n\n\nHere’s an example of running the function.\n\nCode# Look at first three rolls\ndata[1:3]\n\n[[1]]\n[1] 3 1 4 2 5\n\n[[2]]\n[1] 5 3 3 1 1\n\n[[3]]\n[1] 5 3 3 3 2\n\n\nFor each of these rolls, we can calculate the value of a statistic.\nWe’ll calculate the following statistics:\n\nmedian\nmean\nminimum\nmaximum\nsecond order statistic \\(X_{(2)}\\)\n\nrange\n\n\nCode# Returns the nth order statistic of the sample\norder_stat <- function(x, n){\n  x <- sort(x)\n  return(x[n])\n}\n\n# Generate various statistics for each roll\nmedians <- map_dbl(data, ~median(.x))\nmeans <- map_dbl(data, ~mean(.x))\nminimums <- map_dbl(data, ~min(.x))\nmaximums <- map_dbl(data, ~max(.x))\nsecond_order_stat <- map_dbl(data, ~order_stat(x=.x, n=2))\nranges <- maximums - minimums\n\n\n\nCode# Create a data frame from our computed statistics\ndf <- tibble(medians, means, minimums, maximums, second_order_stat, ranges)\n\n# Pivot the data into long format for plotting\ndf <- pivot_longer(df, cols = everything())\n\n\nNow using the data from our simulation, we can plot the sampling distribution of the each of the statistics.\n\nCodedf$name <- recode(df$name,\n  `medians` = \"Median\",\n  `means` = \"Mean\",\n  `minimums` = \"Minimum\",\n  `maximums` = \"Maximum\",\n  `second_order_stat` = \"2nd Order Statistic\",\n  `ranges` = \"Range\")\n\ndf$name <- as.factor(df$name)\ndf$name <- fct_relevel(df$name,\n                       c(\"Minimum\",\n                         \"2nd Order Statistic\",\n                         \"Maximum\",\n                         \"Range\",\n                         \"Mean\",\n                         \"Median\"))\n\ndf %>%\n  ggplot(aes(x = value)) +\n  geom_bar(aes(y = ..prop..),\n           width = 0.2, fill = \"gray\", color = \"black\") +\n  scale_x_continuous(breaks = 0:6) +\n  facet_wrap(~name, scales = \"free_x\") +\n  labs(x = \"Value\",\n       y = \"Estimated Probability\",\n       title = \"Distribution of various statistics for 100,000 rolls of 5 dice\",\n       caption = \"Monte Carlo estimate with 100,000 simulations\") +\n  ggthemes::theme_solarized() +\n  theme(text = element_text(size = 12, family = \"Source Sans Pro\"))\n\n\n\nDistributions of statistics computed from rolls of 5 dice. Probabilities were estimated using 100,000 simulations.\n\n\n\n\nA few things to note:\n\nBecause of averaging, the mean can take on more possible values than the other statistics. Qe can see it taking on the characteristic bell shape of the normal distribution due to the central limit theorem.\nThe median is always a whole number because we are rolling an odd number of dice.\nSome of these distributions are tedious to work out analytically, and with more complicated data-generating processes there may be no closed form solutions."
  },
  {
    "objectID": "posts/linear-algebra/index.html",
    "href": "posts/linear-algebra/index.html",
    "title": "Linear Algebra / Matrix Operations in R",
    "section": "",
    "text": "Creating vectors\nVectors can be created with the c() function.\n\nCodec(1,3,7)\n\n[1] 1 3 7\n\n\nFor vectors that are a continuous sequence of numbers, you can use the : operator.\n\nCode1:8\n\n[1] 1 2 3 4 5 6 7 8\n\n\nFor vectors of repeated numbers, such as a zero vector, use the rep() function.\n\nCode# Create a zero vector of length 10\nrep(0, times=10)\n\n [1] 0 0 0 0 0 0 0 0 0 0\n\nCode# Or to be more concise\n# rep(0, 10)\n\n\nMore complicated sequences can be created with the seq() function.\n\nCode# Create a sequence from 1 to 3 with a step size of 0.5\nseq(1,3, by = 0.5)\n\n[1] 1.0 1.5 2.0 2.5 3.0\n\n\n\nCode# Create 10 equal spaced numbers between 1 and 3\nseq(1,3, length.out = 10)\n\n [1] 1.000000 1.222222 1.444444 1.666667 1.888889 2.111111 2.333333 2.555556\n [9] 2.777778 3.000000\n\n\nCreating matrices\nThere are two common ways to create matrices in R.\nThe first method is using the matrix() function. You pass the elements of the matrix into matrix() and specify the number of rows and columns. Note that R fills in the numbers going down each column. This can be unintuitive.\n\nCode# Put the numbers 1 to 12 in 3 rows and 4 columns\nmatrix(1:12, nrow=3, ncol=4)\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n\n\nCode# Put the numbers 1 to 12 in 2 rows and 6 columns\nmatrix(1:12, nrow=2, ncol=6)\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    1    3    5    7    9   11\n[2,]    2    4    6    8   10   12\n\n\nThe second method is using rbind() and cbind(). Use rbind() to combine vectors into a matrix by row, and cbind() to combine vectors into a matrix by column.\n\nCodex1 <- c(1,2,3,4)\nx2 <- c(5,6,7,8)\nx3 <- c(9,10,11,12) \n\n\n\nCoderbind(x1, x2, x3)\n\n   [,1] [,2] [,3] [,4]\nx1    1    2    3    4\nx2    5    6    7    8\nx3    9   10   11   12\n\n\n\nCodecbind(x1, x2, x3)\n\n     x1 x2 x3\n[1,]  1  5  9\n[2,]  2  6 10\n[3,]  3  7 11\n[4,]  4  8 12\n\n\nTo create a \\(n \\times n\\) identity matrix, use the diag(n) function.\n\nCodediag(5)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    0    0    0    0\n[2,]    0    1    0    0    0\n[3,]    0    0    1    0    0\n[4,]    0    0    0    1    0\n[5,]    0    0    0    0    1\n\n\nOnce a matrix is created, the dim() can be used to obtain the dimensions.\n\nCodem <- cbind(x1, x2, x3)\n\n# See that m has 4 rows and 3 columns\ndim(m)\n\n[1] 4 3\n\n\nIf you are only interested in the number of rows and columns, use nrow() and ncol() respectively.\n\nCodenrow(m)\n\n[1] 4\n\nCodencol(m)\n\n[1] 3\n\n\nMatrix indexing\nOnce you have a matrix in R, how do you subset parts of the matrix? Let’s use this matrix, m as an example.\n\nCodem <- matrix(1:12, nrow=3, ncol=4)\n\nprint(m)\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n\nThe syntax m[i] selects the ith element. Recall that R counts going down columns.\n\nCodem[2]\n\n[1] 2\n\n\nThe syntax m[i, ] selects the ith row\n\nCodem[2,]\n\n[1]  2  5  8 11\n\n\nThe syntax m[,i] selects the ith column.\n\nCodem[,2]\n\n[1] 4 5 6\n\n\nThe syntax m[i,j] selects the element in the ith row and jth column.\n\nCodem[2,2]\n\n[1] 5\n\n\nMatrix operations\nMatrix multiplication uses the %*% operator.\n\nCode# Define matrices\nA <- matrix(1:9, nrow=3, ncol=3)\nB <- matrix(1:6, nrow=3, ncol=2)\n\n# Matrix multiplication\nA %*% B\n\n     [,1] [,2]\n[1,]   30   66\n[2,]   36   81\n[3,]   42   96\n\n\nRemember that the order of matrix multiplication is important!\n\nCodeB %*% A\n\n\nError in B %*% A : non-conformable arguments"
  },
  {
    "objectID": "posts/tmerge/index.html",
    "href": "posts/tmerge/index.html",
    "title": "Using the tmerge() function to structure time-dependent covariates for survival analysis",
    "section": "",
    "text": "Codelibrary(tidyverse)\nlibrary(survival)\nlibrary(kableExtra)"
  },
  {
    "objectID": "posts/tmerge/index.html#why-do-we-need-tmerge",
    "href": "posts/tmerge/index.html#why-do-we-need-tmerge",
    "title": "Using the tmerge() function to structure time-dependent covariates for survival analysis",
    "section": "Why do we need tmerge?",
    "text": "Why do we need tmerge?\nIn survival analysis, we differentiate between time-independent covariates and time-dependent covariates. Time-independent covariates are constant over time, while time-dependent covariates can vary over time.\nAs an example, assume we are modeling time-to-death in years, with exposure to a chemical as our time-dependent covariate of interest. Assume that we can quantify the exposure as 0, 1, or 2. We will use this exposure and the sex of the subject as covariates in our model.\nTo represent time-dependent covariates, we need to have multiple rows for each subject, where each row represents a different value of the time dependent covariates.\nTake for example a subject who started with exposure = 1. Then at 4 years, their exposure status changed to exposure = 0. Then at 7 years, their exposure status changed to exposure = 2. Then the subject died at 10 years (i.e., status = 1). We would need three rows to represent this subject, since there are 3 distinct time periods: 0-4, 4-7, and 7-10. The survival package uses the names tstart and tstop to denote the beginning and end of each time period. So when structuring data from time-dependent variables, the rows for this subject would look like this:\n\n\n\n\n\n id \n    tstart \n    tstop \n    exposure \n    status \n  \n\n\n 1 \n    0 \n    4 \n    1 \n    0 \n  \n\n 1 \n    4 \n    7 \n    0 \n    0 \n  \n\n 1 \n    7 \n    10 \n    2 \n    1"
  },
  {
    "objectID": "posts/tmerge/index.html#using-tmerge",
    "href": "posts/tmerge/index.html#using-tmerge",
    "title": "Using the tmerge() function to structure time-dependent covariates for survival analysis",
    "section": "Using tmerge\n",
    "text": "Using tmerge\n\nCreating example data\nFirst, we need our data in two data frames, one for the time-independent covariates and one for the time-dependent covariates.\nHere’s some example data for the time-independent covariates. We have 3 subjects, and each row contains their id, sex, survival time, and whether or not they experience the event of interest (in this case, death). We use event = 1 to indicate death, and event = 0 to indicate censoring.\n\nCodedf_time_ind <-\n  tibble(id = c(1,2,3),\n         sex = c(\"M\",\"F\",\"F\"),\n         surv_time = c(5,10,15),\n         event = c(1,1,0))\n\n\n\n\n\n\n\n id \n    sex \n    surv_time \n    event \n  \n\n\n 1 \n    M \n    5 \n    1 \n  \n\n 2 \n    F \n    10 \n    1 \n  \n\n 3 \n    F \n    15 \n    0 \n  \n\n\n\n\nAnd here’s some example time-dependent data. Each subject has a record for their exposure status at time = 0, and another record whenever their exposure status changes. For example, in the data below, subject 1 has\n\nexposure status 0 from time 0 to 2\nexposure status 1 from time 2 to 4\nexposure status 2 from time 4 onwards\n\n\nCodedf_time_dep <-\n  tibble(id = c(1,1,1,2,2,3),\n         time = c(0,2,4,0,7,0),\n         exposure = c(0,1,2,0,1,0))\n\n\n\n\n\n\n\n id \n    time \n    exposure \n  \n\n\n 1 \n    0 \n    0 \n  \n\n 1 \n    2 \n    1 \n  \n\n 1 \n    4 \n    2 \n  \n\n 2 \n    0 \n    0 \n  \n\n 2 \n    7 \n    1 \n  \n\n 3 \n    0 \n    0 \n  \n\n\n\n\nWe will use the tmerge function to turn these data frames in a single data frame to use in a time-dependent survival analysis. The tmerge function is used multiple times in the process of formatting data for time-dependent covariates.\nFirst, we use tmerge with the independent variables. Note that we call tmerge with df_time_ind as both the data1 and data2 argument. We must also specify the id variable and the event variable using the syntax event(survival_time_variable, event_indicator_variable). Using the name event on the left of the expression is optional.\n\nCodedf_time_ind <-\n  tmerge(data1=df_time_ind,\n         data2=df_time_ind,\n         id=id,\n         event=event(surv_time, event))\n\n\nNow the df_time_ind data frame looks like this:\n\n\n\n\n\n id \n    sex \n    surv_time \n    event \n    tstart \n    tstop \n  \n\n\n 1 \n    M \n    5 \n    1 \n    0 \n    5 \n  \n\n 2 \n    F \n    10 \n    1 \n    0 \n    10 \n  \n\n 3 \n    F \n    15 \n    0 \n    0 \n    15 \n  \n\n\n\n\nNotice that the tstart, tstart, and event variables have been added.\nNow to add the time-dependent variables, we call tmerge again, now with df_time_ind as the data1 argument and df_time_dep as the data2 argument. To specify the time-dependent exposure variable, we use the tdc function with the syntax time_dependent_variable = tdc(time, time_dependent_variable).\n\nCodedf_final <-\ntmerge(data1=df_time_ind,\n       data2=df_time_dep,\n       id=id,\n       exposure=tdc(time, exposure))\n\n\nBelow we have our completed dataset with properly structured time-dependent variables.\n\n\n\n\n\n id \n    sex \n    surv_time \n    event \n    tstart \n    tstop \n    exposure \n  \n\n\n 1 \n    M \n    5 \n    0 \n    0 \n    2 \n    0 \n  \n\n 1 \n    M \n    5 \n    0 \n    2 \n    4 \n    1 \n  \n\n 1 \n    M \n    5 \n    1 \n    4 \n    5 \n    2 \n  \n\n 2 \n    F \n    10 \n    0 \n    0 \n    7 \n    0 \n  \n\n 2 \n    F \n    10 \n    1 \n    7 \n    10 \n    1 \n  \n\n 3 \n    F \n    15 \n    0 \n    0 \n    15 \n    0 \n  \n\n\n\n\nFinally, fitting a model with the survival package uses the general syntax Surv(tstart, tstop, event_indicator_variable) as shown below, where we fit a Cox proportional hazard model.\n\nCodecoxph(Surv(tstart, tstop, event) ~ exposure, data=df_final)"
  },
  {
    "objectID": "posts/tmerge/index.html#references",
    "href": "posts/tmerge/index.html#references",
    "title": "Using the tmerge() function to structure time-dependent covariates for survival analysis",
    "section": "References",
    "text": "References\nFor more details, see this presentation and this report on further features of tmerge."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "An in-depth dive into the workings of logistic regression.\n\n\n\n\n\n\nMay 11, 2022\n\n\nMax Rohde\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nInformal notes about common linear algebra / matrix operations in R\n\n\n\n\n\n\nApr 29, 2022\n\n\nMax Rohde\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nThe tmerge() function in the survival package is used to structure data to represent time-dependent variables in a survival analysis. This post shows a minimal example of how to use tmerge.\n\n\n\n\n\n\nMar 31, 2022\n\n\nMax Rohde\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nA short simulation example showing why dichomization of continuous variables can lead to wrong conclusions.\n\n\n\n\n\n\nJan 16, 2022\n\n\nMax Rohde\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nA short guide to creating a bookdown book using the bs4 theme\n\n\n\n\n\n\nAug 10, 2021\n\n\nMax Rohde\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nExploring gradient descent using R and a minimal amount of mathematics\n\n\n\n\n\n\nJan 16, 2021\n\n\nMax Rohde\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nFunctions from the tidyverse provide a powerful way to do statistical simulations. We demonstrate this approach by evaluating the properties of the mean and median as estimators of center for two distributions.”\n\n\n\n\n\n\nJan 13, 2021\n\n\nMax Rohde\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nCombining gganimate with ggmap can be used to create animations of geographic data. I give a few examples using data from Nashville Open Data.\n\n\n\n\n\n\nJan 6, 2021\n\n\nMax Rohde\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nType I error is increased when you test your hypothesis multiple times during the data collection process. Simulations can provide a clear picture of this process.\n\n\n\n\n\n\nDec 23, 2020\n\n\nMax Rohde\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nExploring the idea of a statistic by simulating dice rolls in R\n\n\n\n\n\n\nDec 8, 2020\n\n\nMax Rohde\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Max Rohde",
    "section": "",
    "text": "Resume\n  \n  \n     Email\n  \n  \n     Google Scholar\n  \n  \n     Github\n  \n  \n     Twitter\n  \n  \n     LinkedIn\n  \n\n  \n  \n\n\nHello, I’m Max. I’m currently a PhD student at Vanderbilt University in the Department of Biostatistics. Currently I’m conducting research on Bayesian clinical trial designs for COVID-19 with Dr. Frank Harrell, and I’m a statistician on the ACTIV-6 trial.\n\n\n\nVanderbilt University | Nashville, TN\nPhD in Biostatistics | 2020 - Present\nCarleton College | Northfield, MN\nBA in Physics | 2013 - 2017\nBA in Geology | 2013 - 2017"
  },
  {
    "objectID": "about.html#research-work-experience",
    "href": "about.html#research-work-experience",
    "title": "Max Rohde",
    "section": "Research / Work Experience",
    "text": "Research / Work Experience\n\nORISE Fellow at FDA Division of Antivirals: Natural-language processing tools for product label data and meta-analyses of clinical trials for hepatitis C and HIV treatments.\nMIT Washington Office: Reporting on current events in science policy.\nAlbuquerque Seismological Laboratory: Effects of atmospheric noise on seismometers.\nLIGO collaboration: Magnetic transients and implications for gravitational wave astronomy.\nAcademic tutoring: teaching physics, chemistry, and mathematics to high-school and undergraduate students."
  },
  {
    "objectID": "about.html#personal",
    "href": "about.html#personal",
    "title": "Max Rohde",
    "section": "Personal",
    "text": "Personal\nIn my free time I enjoy cooking (and collecting cookbooks), playing funk guitar, and swimming."
  },
  {
    "objectID": "anim.html",
    "href": "anim.html",
    "title": "Animations",
    "section": "",
    "text": "Overfitting with Regression Splines\nRegression splines are an effective tool for fitting curves to non-linear data. However, the flexibility of splines is both a blessing and a curse. If the degrees of freedom are set too high, splines can quickly overfit a dataset – resulting in good performance on the training data but poor performance on the testing data.\nThe below animation shows training data (top left) and test data (top right), with the true data generating function as the gray dashed line. We see that the best performance on the test set is obtained at about 5 degrees of freedom, while the training error goes to zero, a clear sign of overfitting.\n\n\nVideo\n\n\n\n\nIllustrating the bias-variance tradeoff with the KNN and Least-Squares classifiers\nComparing the least-squares classifier to the KNN classifier, fit on bootstrap resamples, demonstrates the bias-variance tradeoff. The black line is the true 0.5 probability contour, the red line is the estimated 0.5 probability contour. Data from Elements of Statistical Learning.\n\n\nVideo\n\n\n\n\nExample of link function misspecification in GLM for binary outcomes\n\n\nVideo\n\n\n\n\nBayesian Inference for a Binomial Proportion\nBayesian inference can be using to quantity our uncertainty about the parameter \\(p\\) from a statistical model where the data is distributed \\(\\text{Bin}(n,p)\\). An example is the bias of a coin. In the below example, the true bias is \\(p = 0.7\\). As the data come in, we can update our posterior distribution for \\(p\\).\n\n\nVideo\n\n\n\n\nk-Nearest Neighbors Decision Boundary\nk-Nearest Neighbors is a non-parametric classification algorithm that classifies each point to the majority class of the \\(k\\) nearest points. The number of neighbors to use greatly affects the decision boundaries, as shown in the below animation.\n\n\nVideo\n\n\n\n\nSimple MCMC Animation\n\n\nVideo\n\n\n\n\nBayesian Linear Regression\nBayesian inference can also be used in linear regression. As the data is collected, we become more confident about the parameters of the linear regression model:\n\nthe slope of the linear relationship\nthe variance of the error term\nthe intercept of the linear relationship\n\nThe model was fit using Stan to do the MCMC sampling and the posterior distributions were plotted using a kernel density estimate.\n\n\nVideo\n\n\n\n\nVisualizing priors\nWhen doing Bayesian inference, it’s important to visualize what your priors are implying. For a linear regression with only an intercept and slope, a N(0,1) prior on the slope produces very different regression lines (before using data) compared to a N(0,10) prior.\n\n\nVideo\n\n\n\n\nCalculating π with Monte Carlo Estimation\nMonte Carlo estimation is a technique for solving deterministic problems by random sampling.\nFor example, you can compute π by uniform sampling within a square for \\(x \\in [-1,1], y \\in [-1,1]\\), and rejecting the points where \\(x^2 + y^2 > 1\\).\nThen \\(\\pi = \\text{(Proportion not rejected)} \\times 4\\).\n\n\nVideo\n\n\n\n\nOverfitting in Polynomial Regression\nOverfitting is a major problem when fitting complex models to few data points. As a simple example, polynomial regression can fit noise in the data rather than the true model. Here the true model is quadratic with error that is normally distributed with mean zero. As the degree of the polynomial increases, the model rapidly overfits the data. At the extreme, if the degree of the polynomial is greater than (Number of points - 1), then the fitted polynomial will pass through every data point.\n\n\nVideo\n\n\n\n\nFinding the MLE estimate of the mean for a Normal Distribution\nYou can estimate the MLE for the mean of a normal distribution given a dataset by varying the mean until the peak of the log-likelihood is reached. This visually looks like sliding around different candidate distributions until the best match is found. Once the MLE for the mean is found, the variance can be varied in the same fashion (keeping the mean fixed at the MLE) to find the MLE for the variance.\n\n\nVideo\n\n\n\n\nExample of collider bias\n\n\n\n\n\n\n\nUsing Quantile-Quantile Plots to Detect Depatures from Normality\nQuantile-quantile plots are a useful tool for assessing the fit of data to a given distribution. This animation shows Q-Q plots for t-distributed data with various degrees of freedom. We see that the Q-Q plot shows more clearly the departure from normality compared to the histogram.\n\n\nVideo\n\n\n\n\nThe German Tank Problem\nThe German Tank problem is a famous problem in statistics. During World War 2, the Allied forces used the serial numbers on German tanks to estimate the number of tanks produced. The results of this statistical analysis estimated a production of 246 tanks per month, while intelligence from spies estimated a much higher rate of around 1.400 tanks per month. After the war, German records showed that the true rate was 245 per month! The statistical evidence that the numbers of tanks was lower than expected gave the Allies motivation to attack the Western Front, leading to the fall of Berlin and the end of the war in Europe.\nWe can formulate this problem assuming the serial numbers start at 1 and are randomly sampled from the population of tanks. Let \\(X_1, X_2, \\ldots X_n\\) be a sample of \\(n\\) serial numbers. The maximum likelihood estimate for the total number of serial numbers is \\(X_{(n)}\\), the maximum of the observed serial numbers. However, this is a biased estimator – it underestimates the true number of tanks.\nWe can improve this estimator by adding a factor to our maximum likelihood estimator to make it unbiased – the number of known missing tank serial numbers divided by the sample size, which can be thought of as the average gap between the recorded serial numbers. Thus the new estimator is\n\\[\n\\hat{\\theta}=x_{(n)}+\\frac{x_{(n)}-n}{n} = \\left(1+\\frac{1}{n}\\right) x_{(n)}-1\n\\]\nwhich has the desired property of being unbiased. Simulating the performance of our estimators with a known population size of 2,000 tanks, we see that bias-corrected MLE has higher variance than the MLE but it achieves a lower mean squared error across the tested sample sizes due to being unbiased.\n\nThere are \\(X_{(n)} - n\\) known missing tank serial numbers.\n\n\nMy analysis follows that given in Leemis, L. (2020). Mathematical Statistics.\n\n\n\nVideo\n\n\n\n\nComparing Estimators for Unif(0, θ)\nThe maximum likelihood estimator (MLE), while it has many nice statistics properties, isn’t always the best estimator. To estimate θ for Unif(0,θ), the MLE is the maximum of the data, which is biased low. It is an underestimate of the true value of θ. To correct the bias, we can multiply the maximum by \\(\\frac{n+1}{n}\\) for an estimator that is unbiased, but has slightly higher variance. However, we see that the result is lower mean-squared error (MSE). We also show the method of moments estimator for reference, which is twice the sample mean.\n\n\nVideo\n\n\n\n\nComparing Estimators for Center of Unif(0,1)\nEstimators of central tendency can have very different properties. For Unif(0,1), the mean, median, and midrange (defined by \\(\\frac{\\text{max} - \\text{min}}{2}\\)) are consistent estimators of the center, but the median has high variance and the midrange is biased.\n\n\nVideo\n\n\n\n\nSampling Distribution of the Mean for the Gamma Distribution\nAs sample size increases, the sampling distribution of the mean\n\ndecreases in variance\napproaches a normal distribution (central limit theorem)\nhas expected value equal to population mean\n\nFor example, mean of N i.i.d samples from Gamma(a,b) is distributed Gamma(Na, Nb).\n\n\nVideo"
  }
]